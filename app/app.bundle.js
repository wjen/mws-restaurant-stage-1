!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/serviceworker.bundle.js").then(e=>{console.log("SW registered: ",e)}).catch(e=>{console.log("SW registration failed: ",e)})})},function(e,t){class n{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get DATABASE_REVIEWS_URL(){return"http://localhost:1337/reviews"}static fetchRestaurants(e){fetch(n.DATABASE_URL).then(function(t){t.json().then(function(t){e(null,t)})})}static fetchReviews(e,t){let r=n.DATABASE_REVIEWS_URL+"/?restaurant_id="+e;fetch(r).then(e=>e.json()).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantById(e,t){n.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){n.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){n.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){n.fetchRestaurants((n,o)=>{if(n)r(n,null);else{let n=o;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){n.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){n.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e.photograph?`/img/${e.photograph}.jpg`:`/img/${e.id}.jpg`}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:n.urlForRestaurant(e)});return r.addTo(newMap),r}static saveNewReview(e,t){fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(e)}).then(e=>(console.log("response from dbhelper"),e.json())).then(e=>{t(null,e)}).catch(e=>{console.log(e)})}}window.DBHelper=n},function(e,t,n){n(0),n(1),e.exports=n(3)},function(e,t){var n;document.addEventListener("DOMContentLoaded",e=>{l(),r(),s()});const r=()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,o())})},o=(e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");t.addEventListener("change",i),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},s=()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,a())})},a=(e=self.cuisines)=>{const t=document.getElementById("cuisines-select");t.addEventListener("change",i),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},l=()=>{n=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),self.newMap=n,L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1Ijoid2VudGluIiwiYSI6ImNqaXJ0N25iZjFwdjYza3A4MGt1aHU2bjEifQ.DnNFUoN5uzw01l_XK_c7nQ",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(n),i()},i=()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,o=e[n].value,s=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(o,s,(e,t)=>{e?console.error(e):(c(t),u())})},c=e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e},u=(e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{console.log(e),t.append(d(e))}),f()},d=e=>{const t=document.createElement("li"),n=document.createElement("img"),r=document.createElement("div");n.className="restaurant-img",n.setAttribute("alt",e.name),n.src=DBHelper.imageUrlForRestaurant(e),console.log(n.src),r.append(n),t.append(r);const o=document.createElement("h1");o.innerHTML=e.name,t.append(o);const s=document.createElement("p");s.innerHTML=e.neighborhood,t.append(s);const a=document.createElement("p");a.innerHTML=e.address,t.append(a);const l=document.createElement("button");return l.classList="button button--success",l.innerHTML="View Details",l.setAttribute("aria-label",e.name+e.neighborhood+e.address+"View Details"),l.onclick=(()=>{const t=DBHelper.urlForRestaurant(e);window.location=t}),t.append(l),t},f=(e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,n);t.on("click",function(){window.location.href=t.options.url}),self.markers.push(t)})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,