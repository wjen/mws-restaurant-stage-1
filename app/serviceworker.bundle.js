!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=12)}({1:function(e,t,n){"use strict";const r=(e,t)=>t.some(t=>e instanceof t);let o,s;const a=new WeakMap,c=new WeakMap,i=new WeakMap,u=new WeakMap,l=new WeakMap;let d={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return c.get(e);if("objectStoreNames"===t)return e.objectStoreNames||i.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return p(e[t])},has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function f(e){return e===IDBDatabase.prototype.transaction&&"objectStoreNames"in IDBTransaction.prototype?function(t,...n){const r=e.call(g(this),t,...n);return i.set(r,t.sort?t.sort():[t]),p(r)}:(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(g(this),t),p(a.get(this))}:function(...t){return p(e.apply(g(this),t))}}function h(e){return"function"==typeof e?f(e):(e instanceof IDBTransaction&&function(e){if(c.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",s),e.removeEventListener("abort",s)},o=()=>{t(),r()},s=()=>{n(e.error),r()};e.addEventListener("complete",o),e.addEventListener("error",s),e.addEventListener("abort",s)});c.set(e,t)}(e),r(e,o||(o=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function p(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",s)},o=()=>{t(p(e.result)),r()},s=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",s)});return t.then(t=>{t instanceof IDBCursor&&a.set(t,e)}),l.set(t,e),t}(e);if(u.has(e))return u.get(e);const t=h(e);return t!==e&&(u.set(e,t),l.set(t,e)),t}const g=e=>l.get(e);function v(e,t,{blocked:n,upgrade:r,blocking:o}={}){const s=indexedDB.open(e,t),a=p(s);return r&&s.addEventListener("upgradeneeded",e=>{r(p(s.result),e.oldVersion,e.newVersion,p(s.transaction))}),n&&s.addEventListener("blocked",()=>n()),o&&a.then(e=>e.addEventListener("versionchange",o)),a}n.d(t,"a",function(){return v});const b=["get","getKey","getAll","getAllKeys","count"],m=["put","add","delete","clear"],w=new Map;function y(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(w.get(t))return w.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n;if(!(n in(r?IDBIndex:IDBObjectStore).prototype))return;let o;return b.includes(n)&&(o=function(e,...t){let o=this.transaction(e).store;return r&&(o=o.index(t.shift())),o[n](...t)}),m.includes(n)&&(o=function(e,...t){const r=this.transaction(e,"readwrite");return r.store[n](...t),r.done}),o&&w.set(t,o),o}d=(e=>({get:(t,n,r)=>y(t,n)||e.get(t,n,r),has:(t,n)=>!!y(t,n)||e.has(t,n)}))(d)},12:function(e,t,n){"use strict";n.r(t);var r=n(1);const o=["static_cache-v5","images_cache-v"],s=Object(r.a)("rr-db",3,{upgrade(e,t){switch(t){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id");case 1:e.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id");case 2:e.createObjectStore("pending",{keyPath:"id",autoIncrement:!0})}}});self.addEventListener("install",e=>{e.waitUntil(caches.open("static_cache-v5").then(e=>e.addAll(["/","/src/main.js","/src/dbhelper.js","/restaurant.html","/index.html","/src/restaurant_info.js","/src/styles.css","/src/rr-icon512.png"]).catch(e=>{console.log("error opening cache"+e)})))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>{Promise.all(e.map(e=>{if(!o.includes(e))return caches.delete(e)}))}))}),self.addEventListener("fetch",e=>{let t=new URL(e.request.url);if("1337"===t.port){let n=t.searchParams.get("restaurant_id")-0;return a(e,n)}u(e)});const a=(e,t)=>{"GET"!==e.request.method?e.respondWith(fetch(e.request)):e.request.url.indexOf("restaurants")>-1?c(e):(console.log("starting handling from reviews event"),i(e,t))},c=e=>{e.respondWith(s.then(e=>(console.log("starting from idb"),e.transaction("restaurants").objectStore("restaurants").getAll())).then(t=>(console.log(t),t.length&&t||(e=>new Promise(function(t,n){fetch(e.request).then(e=>e.json()).then(e=>{t(e)}).catch(e=>{console.log(e),n(e)})}))(e).then(e=>(console.log("fetched now storing"),s.then(t=>{let n=t.transaction("restaurants","readwrite"),r=n.objectStore("restaurants");return e.forEach(function(e){r.put(e)}),n.done}).then(()=>(console.log("stored restaurants, now returning"),e)))))).then(e=>(console.log(e),new Response(JSON.stringify(e)))).catch(e=>new Response("Error fetching data",{status:500})))},i=(e,t)=>{e.respondWith(s.then(e=>e.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(t)).then(t=>(console.log("serviceworker handle reviews"),console.log(t),t.length&&t||fetch(e.request).then(e=>e.json()).then(e=>(console.log("using serviceworker fetch"),console.log("starting to store reviews"),s.then(t=>{let n=t.transaction("reviews","readwrite"),r=n.objectStore("reviews");return e.forEach(function(e){r.put(e)}),n.done}).then(()=>e))))).then(e=>(console.log(e),new Response(JSON.stringify(e)))).catch(e=>new Response("Error fetching data",{status:500})))},u=e=>{e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).then(t=>{let n=function(e){let t=["png","jpg","jpeg","svg","gif"],n=!1;for(let r of t)if(e.endsWith(r)){n=!0;break}return n}(e.request.url)?"images_cache-v":"static_cache-v5";return caches.open(n).then(n=>(n.put(e.request,t.clone()),t))}).catch(e=>new Response("Application is not connected to the internet",{status:404,statusText:"Application is not connected to the internet"}))))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9lc20vY2h1bmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N3LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaW5zdGFuY2VPZkFueSIsImNvbnN0cnVjdG9ycyIsInNvbWUiLCJpZGJQcm94eWFibGVUeXBlcyIsImN1cnNvckFkdmFuY2VNZXRob2RzIiwiY3Vyc29yUmVxdWVzdE1hcCIsIldlYWtNYXAiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJ0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAiLCJ0cmFuc2Zvcm1DYWNoZSIsInJldmVyc2VUcmFuc2Zvcm1DYWNoZSIsImlkYlByb3h5VHJhcHMiLCJbb2JqZWN0IE9iamVjdF0iLCJ0YXJnZXQiLCJwcm9wIiwicmVjZWl2ZXIiLCJJREJUcmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJ1bmRlZmluZWQiLCJvYmplY3RTdG9yZSIsIndyYXAiLCJoYXMiLCJ3cmFwRnVuY3Rpb24iLCJmdW5jIiwiSURCRGF0YWJhc2UiLCJ0cmFuc2FjdGlvbiIsInN0b3JlTmFtZXMiLCJhcmdzIiwidHgiLCJ1bndyYXAiLCJ0aGlzIiwic2V0Iiwic29ydCIsIklEQkN1cnNvciIsImFkdmFuY2UiLCJjb250aW51ZSIsImNvbnRpbnVlUHJpbWFyeUtleSIsImluY2x1ZGVzIiwiYXBwbHkiLCJ0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlIiwiZG9uZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidW5saXN0ZW4iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29tcGxldGUiLCJlcnJvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24iLCJJREJPYmplY3RTdG9yZSIsIklEQkluZGV4IiwiUHJveHkiLCJJREJSZXF1ZXN0IiwicmVxdWVzdCIsInByb21pc2UiLCJzdWNjZXNzIiwicmVzdWx0IiwidGhlbiIsInByb21pc2lmeVJlcXVlc3QiLCJuZXdWYWx1ZSIsIm9wZW5EQiIsInZlcnNpb24iLCJibG9ja2VkIiwidXBncmFkZSIsImJsb2NraW5nIiwiaW5kZXhlZERCIiwib3BlbiIsIm9wZW5Qcm9taXNlIiwiZXZlbnQiLCJvbGRWZXJzaW9uIiwibmV3VmVyc2lvbiIsImRiIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInJlYWRNZXRob2RzIiwid3JpdGVNZXRob2RzIiwiY2FjaGVkTWV0aG9kcyIsIk1hcCIsImdldE1ldGhvZCIsInRhcmdldEZ1bmNOYW1lIiwicmVwbGFjZSIsInVzZUluZGV4IiwibWV0aG9kIiwic3RvcmVOYW1lIiwic3RvcmUiLCJpbmRleCIsInNoaWZ0Iiwib2xkVHJhcHMiLCJjYWxsYmFjayIsImlkYl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiYWxsQ2FjaGVzIiwiZGJQcm9taXNlIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwiY3JlYXRlSW5kZXgiLCJhdXRvSW5jcmVtZW50Iiwic2VsZiIsIndhaXRVbnRpbCIsImNhY2hlcyIsImNhY2hlIiwiYWRkQWxsIiwiY2F0Y2giLCJjb25zb2xlIiwibG9nIiwia2V5cyIsImNhY2hlTmFtZXMiLCJhbGwiLCJtYXAiLCJkZWxldGUiLCJjaGVja1VybCIsIlVSTCIsInVybCIsInBvcnQiLCJpZCIsInNlYXJjaFBhcmFtcyIsImhhbmRsZUFKQVhFdmVudCIsImhhbmRsZU5vbkFKQVhFdmVudCIsInJlc3BvbmRXaXRoIiwiZmV0Y2giLCJpbmRleE9mIiwiaGFuZGxlUmVzdGF1cmFudEV2ZW50cyIsImhhbmRsZVJldmlld3NFdmVudHMiLCJnZXRBbGwiLCJkYXRhIiwibGVuZ3RoIiwicmVzcCIsImpzb24iLCJnZXRSZXN0YXVyYW50cyIsInJlc3RhdXJhbnRzIiwiZm9yRWFjaCIsInJlc3RhdXJhbnQiLCJwdXQiLCJmaW5hbFJlc3BvbnNlIiwiUmVzcG9uc2UiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhdHVzIiwiZmV0Y2hSZXNwb25zZSIsInJldmlld3MiLCJyZXZpZXciLCJtYXRjaCIsInJlc3BvbnNlIiwidXNlQ2FjaGUiLCJpbWdUeXBlcyIsImlzSW1hZ2UiLCJ0eXBlIiwiZW5kc1dpdGgiLCJpc0ltYWdlVVJMIiwiY2xvbmUiLCJzdGF0dXNUZXh0Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1os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QUFLLElBQUlDLEtBQVFGLEVBQ2YsR0FBSWhDLEVBQUltQyxTQUFTRCxHQUFPLENBQUVELEdBQVUsRUFBTSxNQUU1QyxPQUFPQSxFQTJJY0csQ0FBVzlFLEVBQU1mLFFBQVF5RCxLQTFMMUIsaUJBREEsa0JBNExkLE9BQU9iLE9BQ0ovQixLQUFLMkUsR0FDTHBGLEtBQUt5QyxJQUNKQSxFQUFNZ0MsSUFBSTlELEVBQU1mLFFBQVNtRixFQUFjVyxTQUNoQ1gsTUFFVnBDLE1BQU10RCxHQUNBLElBQUlzRixTQUFTLCtDQUFnRCxDQUNsRUcsT0FBUSxJQUNSYSxXQUFZIiwiZmlsZSI6InNlcnZpY2V3b3JrZXIuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEyKTtcbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKGMgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcclxubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xyXG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cclxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XHJcbiAgICByZXR1cm4gaWRiUHJveHlhYmxlVHlwZXMgfHxcclxuICAgICAgICAoaWRiUHJveHlhYmxlVHlwZXMgPSBbSURCRGF0YWJhc2UsIElEQk9iamVjdFN0b3JlLCBJREJJbmRleCwgSURCQ3Vyc29yLCBJREJUcmFuc2FjdGlvbl0pO1xyXG59XHJcbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxyXG5mdW5jdGlvbiBnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpIHtcclxuICAgIHJldHVybiBjdXJzb3JBZHZhbmNlTWV0aG9kcyB8fCAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgPSBbXHJcbiAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxyXG4gICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXHJcbiAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZVByaW1hcnlLZXksXHJcbiAgICBdKTtcclxufVxyXG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xyXG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcclxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xyXG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XHJcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xyXG4gICAgICAgICAgICB1bmxpc3RlbigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcclxuICAgIH0pO1xyXG4gICAgcHJvbWlzZS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIC8vIFNpbmNlIGN1cnNvcmluZyByZXVzZXMgdGhlIElEQlJlcXVlc3QgKCpzaWdoKiksIHdlIGNhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWxcclxuICAgICAgICAvLyAoc2VlIHdyYXBGdW5jdGlvbikuXHJcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCQ3Vyc29yKSB7XHJcbiAgICAgICAgICAgIGN1cnNvclJlcXVlc3RNYXAuc2V0KHZhbHVlLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIFRoaXMgbWFwcGluZyBleGlzdHMgaW4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGJ1dCBkb2Vzbid0IGRvZXNuJ3QgZXhpc3QgaW4gdHJhbnNmb3JtQ2FjaGUuIFRoaXNcclxuICAgIC8vIGlzIGJlY2F1c2Ugd2UgY3JlYXRlIG1hbnkgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0LlxyXG4gICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChwcm9taXNlLCByZXF1ZXN0KTtcclxuICAgIHJldHVybiBwcm9taXNlO1xyXG59XHJcbmZ1bmN0aW9uIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih0eCkge1xyXG4gICAgLy8gRWFybHkgYmFpbCBpZiB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgYSBkb25lIHByb21pc2UgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXHJcbiAgICBpZiAodHJhbnNhY3Rpb25Eb25lTWFwLmhhcyh0eCkpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgY29uc3QgZG9uZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xyXG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KHR4LmVycm9yKTtcclxuICAgICAgICAgICAgdW5saXN0ZW4oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xyXG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xyXG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xyXG4gICAgfSk7XHJcbiAgICAvLyBDYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsLlxyXG4gICAgdHJhbnNhY3Rpb25Eb25lTWFwLnNldCh0eCwgZG9uZSk7XHJcbn1cclxubGV0IGlkYlByb3h5VHJhcHMgPSB7XHJcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xyXG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbikge1xyXG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciB0cmFuc2FjdGlvbi5kb25lLlxyXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2RvbmUnKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRG9uZU1hcC5nZXQodGFyZ2V0KTtcclxuICAgICAgICAgICAgLy8gUG9seWZpbGwgZm9yIG9iamVjdFN0b3JlTmFtZXMgYmVjYXVzZSBvZiBFZGdlLlxyXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29iamVjdFN0b3JlTmFtZXMnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0Lm9iamVjdFN0b3JlTmFtZXMgfHwgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLmdldCh0YXJnZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxyXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N0b3JlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMV0gP1xyXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxyXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldFtwcm9wXSk7XHJcbiAgICB9LFxyXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xyXG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbiAmJiAocHJvcCA9PT0gJ2RvbmUnIHx8IHByb3AgPT09ICdzdG9yZScpKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQ7XHJcbiAgICB9LFxyXG59O1xyXG5mdW5jdGlvbiBhZGRUcmFwcyhjYWxsYmFjaykge1xyXG4gICAgaWRiUHJveHlUcmFwcyA9IGNhbGxiYWNrKGlkYlByb3h5VHJhcHMpO1xyXG59XHJcbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XHJcbiAgICAvLyBEdWUgdG8gZXhwZWN0ZWQgb2JqZWN0IGVxdWFsaXR5ICh3aGljaCBpcyBlbmZvcmNlZCBieSB0aGUgY2FjaGluZyBpbiBgd3JhcGApLCB3ZVxyXG4gICAgLy8gb25seSBjcmVhdGUgb25lIG5ldyBmdW5jIHBlciBmdW5jLlxyXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXHJcbiAgICBpZiAoZnVuYyA9PT0gSURCRGF0YWJhc2UucHJvdG90eXBlLnRyYW5zYWN0aW9uICYmXHJcbiAgICAgICAgJ29iamVjdFN0b3JlTmFtZXMnIGluIElEQlRyYW5zYWN0aW9uLnByb3RvdHlwZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xyXG4gICAgICAgICAgICBjb25zdCB0eCA9IGZ1bmMuY2FsbCh1bndyYXAodGhpcyksIHN0b3JlTmFtZXMsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuc2V0KHR4LCBzdG9yZU5hbWVzLnNvcnQgPyBzdG9yZU5hbWVzLnNvcnQoKSA6IFtzdG9yZU5hbWVzXSk7XHJcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxyXG4gICAgLy8gSURCLCB5b3UgYWR2YW5jZSB0aGUgY3Vyc29yIGFuZCB3YWl0IGZvciBhIG5ldyAnc3VjY2Vzcycgb24gdGhlIElEQlJlcXVlc3QgdGhhdCBnYXZlIHlvdSB0aGVcclxuICAgIC8vIGN1cnNvci4gSXQncyBraW5kYSBsaWtlIGEgcHJvbWlzZSB0aGF0IGNhbiByZXNvbHZlIHdpdGggbWFueSB2YWx1ZXMuIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlXHJcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXHJcbiAgICAvLyB1bmRlZmluZWQgaWYgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIGhhcyBiZWVuIHJlYWNoZWQuXHJcbiAgICBpZiAoZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKS5pbmNsdWRlcyhmdW5jKSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXHJcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXHJcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHdyYXAoY3Vyc29yUmVxdWVzdE1hcC5nZXQodGhpcykpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXHJcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cclxuICAgICAgICByZXR1cm4gd3JhcChmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncykpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xyXG4gICAgLy8gVGhpcyBkb2Vzbid0IHJldHVybiwgaXQganVzdCBjcmVhdGVzIGEgJ2RvbmUnIHByb21pc2UgZm9yIHRoZSB0cmFuc2FjdGlvbixcclxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXHJcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcclxuICAgICAgICBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odmFsdWUpO1xyXG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xyXG4gICAgLy8gUmV0dXJuIHRoZSBzYW1lIHZhbHVlIGJhY2sgaWYgd2UncmUgbm90IGdvaW5nIHRvIHRyYW5zZm9ybSBpdC5cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XHJcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcclxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlJlcXVlc3QpXHJcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xyXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxyXG4gICAgLy8gVGhpcyBpcyBmYXN0ZXIsIGJ1dCBpdCBhbHNvIHByb3ZpZGVzIG9iamVjdCBlcXVhbGl0eS5cclxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxyXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xyXG4gICAgY29uc3QgbmV3VmFsdWUgPSB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKTtcclxuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxyXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXHJcbiAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XHJcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xyXG59XHJcbmNvbnN0IHVud3JhcCA9ICh2YWx1ZSkgPT4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG5cbmV4cG9ydCB7IHdyYXAgYXMgYSwgYWRkVHJhcHMgYXMgYiwgaW5zdGFuY2VPZkFueSBhcyBjLCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgZCwgdW53cmFwIGFzIGUgfTtcbiIsImltcG9ydCB7IGEgYXMgd3JhcCwgYiBhcyBhZGRUcmFwcyB9IGZyb20gJy4vY2h1bmsuanMnO1xuZXhwb3J0IHsgZSBhcyB1bndyYXAsIGEgYXMgd3JhcCB9IGZyb20gJy4vY2h1bmsuanMnO1xuXG4vKipcclxuICogT3BlbiBhIGRhdGFiYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cclxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXHJcbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXHJcbiAqL1xyXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZyB9ID0ge30pIHtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcclxuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcclxuICAgIGlmICh1cGdyYWRlKSB7XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHVwZ3JhZGUod3JhcChyZXF1ZXN0LnJlc3VsdCksIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIHdyYXAocmVxdWVzdC50cmFuc2FjdGlvbikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGJsb2NrZWQpXHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcclxuICAgIGlmIChibG9ja2luZylcclxuICAgICAgICBvcGVuUHJvbWlzZS50aGVuKGRiID0+IGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCBibG9ja2luZykpO1xyXG4gICAgcmV0dXJuIG9wZW5Qcm9taXNlO1xyXG59XHJcbi8qKlxyXG4gKiBEZWxldGUgYSBkYXRhYmFzZS5cclxuICpcclxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XHJcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xyXG4gICAgaWYgKGJsb2NrZWQpXHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcclxuICAgIHJldHVybiB3cmFwKHJlcXVlc3QpLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcclxufVxuXG5jb25zdCByZWFkTWV0aG9kcyA9IFsnZ2V0JywgJ2dldEtleScsICdnZXRBbGwnLCAnZ2V0QWxsS2V5cycsICdjb3VudCddO1xyXG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XHJcbmNvbnN0IGNhY2hlZE1ldGhvZHMgPSBuZXcgTWFwKCk7XHJcbmZ1bmN0aW9uIGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHtcclxuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXHJcbiAgICAgICAgIShwcm9wIGluIHRhcmdldCkgJiZcclxuICAgICAgICB0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGlmIChjYWNoZWRNZXRob2RzLmdldChwcm9wKSlcclxuICAgICAgICByZXR1cm4gY2FjaGVkTWV0aG9kcy5nZXQocHJvcCk7XHJcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcclxuICAgIGNvbnN0IHVzZUluZGV4ID0gcHJvcCAhPT0gdGFyZ2V0RnVuY05hbWU7XHJcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXHJcbiAgICBpZiAoISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IG1ldGhvZDtcclxuICAgIGlmIChyZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpIHtcclxuICAgICAgICBtZXRob2QgPSBmdW5jdGlvbiAoc3RvcmVOYW1lLCAuLi5hcmdzKSB7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSkuc3RvcmU7XHJcbiAgICAgICAgICAgIGlmICh1c2VJbmRleClcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5pbmRleChhcmdzLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3RhcmdldEZ1bmNOYW1lXSguLi5hcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKHdyaXRlTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpIHtcclxuICAgICAgICBtZXRob2QgPSBmdW5jdGlvbiAoc3RvcmVOYW1lLCAuLi5hcmdzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gdGhpcy50cmFuc2FjdGlvbihzdG9yZU5hbWUsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICAgICAgdHguc3RvcmVbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHguZG9uZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKG1ldGhvZClcclxuICAgICAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xyXG4gICAgcmV0dXJuIG1ldGhvZDtcclxufVxyXG5hZGRUcmFwcyhvbGRUcmFwcyA9PiAoe1xyXG4gICAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpLFxyXG4gICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiAhIWdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmhhcyh0YXJnZXQsIHByb3ApLFxyXG59KSk7XG5cbmV4cG9ydCB7IG9wZW5EQiwgZGVsZXRlREIgfTtcbiIsImNvbnN0IGNhY2hlVmVyc2lvbiA9ICc1JztcbmNvbnN0IFNUQVRJQ19DQUNIRSA9IGBzdGF0aWNfY2FjaGUtdiR7Y2FjaGVWZXJzaW9ufWA7XG5jb25zdCBJTUFHRVNfQ0FDSEUgPSBgaW1hZ2VzX2NhY2hlLXZgO1xuY29uc3QgYWxsQ2FjaGVzID0gW1xuICBTVEFUSUNfQ0FDSEUsXG4gIElNQUdFU19DQUNIRVxuXTtcblxuaW1wb3J0IHsgb3BlbkRCLCBkZWxldGVEQiwgd3JhcCwgdW53cmFwIH0gZnJvbSAnaWRiJztcblxuY29uc3QgZGJQcm9taXNlID0gb3BlbkRCKCdyci1kYicsIDMsIHtcbiAgdXBncmFkZShkYiwgb2xkVmVyc2lvbikge1xuICAgIHN3aXRjaCAob2xkVmVyc2lvbikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBjb25zdCBzdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycsIHsga2V5UGF0aDogJ2lkJyB9KTtcbiAgICAgICAgc3RvcmUuY3JlYXRlSW5kZXgoJ2lkJywgJ2lkJyk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGNvbnN0IHJldmlld3NTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXZpZXdzJywge1xuICAgICAgICAgIGtleVBhdGg6ICdpZCcsXG4gICAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV2aWV3c1N0b3JlLmNyZWF0ZUluZGV4KFwicmVzdGF1cmFudF9pZFwiLCBcInJlc3RhdXJhbnRfaWRcIik7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGNvbnN0IHBlbmRpbmdTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwZW5kaW5nJywge1xuICAgICAgICAgIGtleVBhdGg6ICdpZCcsXG4gICAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuXG4gY29uc3QgZ2V0UmVzdGF1cmFudHMgPSAoZXZlbnQpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmZXRjaChldmVudC5yZXF1ZXN0KVxuICAgICAgLnRoZW4ocmVzcCA9PiByZXNwLmpzb24oKSlcbiAgICAgIC50aGVuKGpzb24gPT4geyByZXNvbHZlKGpzb24pOyB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuZnVuY3Rpb24gaXNJbWFnZVVSTCh1cmwpIHtcbiAgbGV0IGltZ1R5cGVzID0gW1wicG5nXCIsIFwianBnXCIsIFwianBlZ1wiLCBcInN2Z1wiLCBcImdpZlwiXTtcbiAgbGV0IGlzSW1hZ2UgPSBmYWxzZTtcbiAgZm9yIChsZXQgdHlwZSBvZiBpbWdUeXBlcykge1xuICAgIGlmICh1cmwuZW5kc1dpdGgodHlwZSkpIHsgaXNJbWFnZSA9IHRydWU7IGJyZWFrfTtcbiAgfVxuICByZXR1cm4gaXNJbWFnZTtcbn1cblxuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2luc3RhbGwnLCBldmVudCA9PiB7XG4gIGV2ZW50LndhaXRVbnRpbChcbiAgICBjYWNoZXMub3BlbihTVEFUSUNfQ0FDSEUpLnRoZW4oY2FjaGUgPT4ge1xuICAgICAgcmV0dXJuIGNhY2hlLmFkZEFsbChbXG4gICAgICAgICcvJyxcbiAgICAgICAgJy9zcmMvbWFpbi5qcycsXG4gICAgICAgICcvc3JjL2RiaGVscGVyLmpzJyxcbiAgICAgICAgJy9yZXN0YXVyYW50Lmh0bWwnLFxuICAgICAgICAnL2luZGV4Lmh0bWwnLFxuICAgICAgICAnL3NyYy9yZXN0YXVyYW50X2luZm8uanMnLFxuICAgICAgICAnL3NyYy9zdHlsZXMuY3NzJyxcbiAgICAgICAgJy9zcmMvcnItaWNvbjUxMi5wbmcnXG4gICAgICBdKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBvcGVuaW5nIGNhY2hlJyArIGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0pXG4gICk7XG59KTtcblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdhY3RpdmF0ZScsIGV2ZW50ID0+IHtcbiAgZXZlbnQud2FpdFVudGlsKFxuICAgIGNhY2hlcy5rZXlzKCkudGhlbihjYWNoZU5hbWVzID0+IHtcbiAgICAgIFByb21pc2UuYWxsKFxuICAgICAgICAgY2FjaGVOYW1lcy5tYXAoY2FjaGUgPT4ge1xuICAgICAgICAgIGlmKCFhbGxDYWNoZXMuaW5jbHVkZXMoY2FjaGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVzLmRlbGV0ZShjYWNoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0pXG4gICk7XG59KTtcblxuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2ZldGNoJywgZXZlbnQgPT4ge1xuICBsZXQgY2hlY2tVcmwgPSBuZXcgVVJMKGV2ZW50LnJlcXVlc3QudXJsKTtcbiAgaWYgKGNoZWNrVXJsLnBvcnQgPT09IFwiMTMzN1wiKSB7XG4gICAgbGV0IGlkID0gY2hlY2tVcmwuc2VhcmNoUGFyYW1zLmdldCgncmVzdGF1cmFudF9pZCcpIC0gMDtcbiAgICByZXR1cm4gaGFuZGxlQUpBWEV2ZW50KGV2ZW50LCBpZCk7XG4gIH0gZWxzZSB7XG4gICAgaGFuZGxlTm9uQUpBWEV2ZW50KGV2ZW50KTtcbiAgfVxufSk7XG5cbmNvbnN0IGhhbmRsZUFKQVhFdmVudCA9IChldmVudCwgaWQpID0+IHtcbiAgLy8gT25seSB1c2UgZm9yIGNhY2hpbmcgZm9yIEdldCBldmVudHNcbiAgaWYoZXZlbnQucmVxdWVzdC5tZXRob2QgIT09IFwiR0VUXCIpIHtcbiAgICBldmVudC5yZXNwb25kV2l0aCggZmV0Y2goZXZlbnQucmVxdWVzdCkpXG4gIH0gZWxzZSBpZihldmVudC5yZXF1ZXN0LnVybC5pbmRleE9mKFwicmVzdGF1cmFudHNcIikgPiAtMSkge1xuICAgIGhhbmRsZVJlc3RhdXJhbnRFdmVudHMoZXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdzdGFydGluZyBoYW5kbGluZyBmcm9tIHJldmlld3MgZXZlbnQnKVxuICAgIGhhbmRsZVJldmlld3NFdmVudHMoZXZlbnQsIGlkKTtcbiAgfVxufVxuXG5jb25zdCBoYW5kbGVSZXN0YXVyYW50RXZlbnRzID0gKGV2ZW50KSA9PiB7XG4gIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgICAgZGJQcm9taXNlLnRoZW4oIGRiID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ3N0YXJ0aW5nIGZyb20gaWRiJyk7XG4gICAgICAgIHJldHVybiBkYlxuICAgICAgICAgIC50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnKVxuICAgICAgICAgIC5vYmplY3RTdG9yZSgncmVzdGF1cmFudHMnKVxuICAgICAgICAgIC5nZXRBbGwoKTtcbiAgICAgIH0pLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICByZXR1cm4gKChkYXRhLmxlbmd0aCAmJiBkYXRhKSB8fCBnZXRSZXN0YXVyYW50cyhldmVudClcbiAgICAgICAgICAudGhlbiggcmVzdGF1cmFudHMgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZldGNoZWQgbm93IHN0b3JpbmcnKTtcbiAgICAgICAgICAgIHJldHVybiBkYlByb21pc2UudGhlbihkYiA9PiB7XG4gICAgICAgICAgICAgIGxldCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgICAgICAgbGV0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICAgICAgICAgIHJlc3RhdXJhbnRzLmZvckVhY2goZnVuY3Rpb24ocmVzdGF1cmFudCl7XG4gICAgICAgICAgICAgICAgc3RvcmUucHV0KHJlc3RhdXJhbnQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHR4LmRvbmU7XG4gICAgICAgICAgICB9KS50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdG9yZWQgcmVzdGF1cmFudHMsIG5vdyByZXR1cm5pbmcnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oZmluYWxSZXNwb25zZSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZmluYWxSZXNwb25zZSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShmaW5hbFJlc3BvbnNlKSk7XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFwiRXJyb3IgZmV0Y2hpbmcgZGF0YVwiLCB7c3RhdHVzOiA1MDB9KTtcbiAgICB9KVxuICApXG59XG5cbmNvbnN0IGhhbmRsZVJldmlld3NFdmVudHMgPSAoZXZlbnQsIGlkKSA9PiB7XG4gIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgIHJldHVybiBkYlxuICAgICAgICAudHJhbnNhY3Rpb24oJ3Jldmlld3MnKVxuICAgICAgICAub2JqZWN0U3RvcmUoJ3Jldmlld3MnKVxuICAgICAgICAuaW5kZXgoXCJyZXN0YXVyYW50X2lkXCIpXG4gICAgICAgIC5nZXRBbGwoaWQpO1xuICAgIH0pLnRoZW4oIGRhdGEgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3NlcnZpY2V3b3JrZXIgaGFuZGxlIHJldmlld3MnKTtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgcmV0dXJuIChkYXRhLmxlbmd0aCAmJiBkYXRhKSB8fCBmZXRjaChldmVudC5yZXF1ZXN0KVxuICAgICAgICAudGhlbihmZXRjaFJlc3BvbnNlID0+IHtcbiAgICAgICAgICByZXR1cm4gZmV0Y2hSZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXZpZXdzID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygndXNpbmcgc2VydmljZXdvcmtlciBmZXRjaCcpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGFydGluZyB0byBzdG9yZSByZXZpZXdzJyk7XG4gICAgICAgICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgICAgICAgIGxldCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXdzJywgJ3JlYWR3cml0ZScpXG4gICAgICAgICAgICBsZXQgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmV2aWV3cycpO1xuICAgICAgICAgICAgcmV2aWV3cy5mb3JFYWNoKGZ1bmN0aW9uKHJldmlldykge1xuICAgICAgICAgICAgICBzdG9yZS5wdXQocmV2aWV3KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHR4LmRvbmU7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbiggKCkgPT4gcmV2aWV3cylcbiAgICAgICAgfSlcbiAgICB9KS50aGVuKGZpbmFsUmVzcG9uc2UgPT4ge1xuICAgICAgY29uc29sZS5sb2coZmluYWxSZXNwb25zZSk7XG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGZpbmFsUmVzcG9uc2UpKTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFwiRXJyb3IgZmV0Y2hpbmcgZGF0YVwiLCB7c3RhdHVzOiA1MDB9KTtcbiAgICB9KSlcbn1cblxuY29uc3QgaGFuZGxlTm9uQUpBWEV2ZW50ID0gKGV2ZW50KSA9PiB7XG4gIC8vIENoZWNrIGlmIHRoZSBIVE1MIHJlcXVlc3QgaGFzIHByZXZpb3VzbHkgYmVlbiBjYWNoZWQuIElmIHNvLCByZXR1cm4gdGhlXG4gIC8vIHJlc3BvbnNlIGZyb20gdGhlIGNhY2hlLiBJZiBub3QsIGZldGNoIHRoZSByZXF1ZXN0LCBjYWNoZSBpdCwgYW5kIHRoZW4gcmV0dXJuXG4gIC8vIGl0LlxuICBldmVudC5yZXNwb25kV2l0aChcbiAgICBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICByZXR1cm4gKHJlc3BvbnNlIHx8IGZldGNoKGV2ZW50LnJlcXVlc3QpLnRoZW4oZmV0Y2hSZXNwb25zZSA9PiB7XG4gICAgICAgIGxldCB1c2VDYWNoZSA9IGlzSW1hZ2VVUkwoZXZlbnQucmVxdWVzdC51cmwpID8gIElNQUdFU19DQUNIRSA6IFNUQVRJQ19DQUNIRTtcbiAgICAgICAgcmV0dXJuIGNhY2hlc1xuICAgICAgICAgIC5vcGVuKHVzZUNhY2hlKVxuICAgICAgICAgIC50aGVuKGNhY2hlID0+IHtcbiAgICAgICAgICAgIGNhY2hlLnB1dChldmVudC5yZXF1ZXN0LCBmZXRjaFJlc3BvbnNlLmNsb25lKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGZldGNoUmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFwiQXBwbGljYXRpb24gaXMgbm90IGNvbm5lY3RlZCB0byB0aGUgaW50ZXJuZXRcIiwge1xuICAgICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICAgIHN0YXR1c1RleHQ6IFwiQXBwbGljYXRpb24gaXMgbm90IGNvbm5lY3RlZCB0byB0aGUgaW50ZXJuZXRcIlxuICAgICAgICB9KTtcbiAgICAgIH0pKTtcbiAgICB9KVxuICApO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==