!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";const r=(e,t)=>t.some(t=>e instanceof t);let a,o;const s=new WeakMap,i=new WeakMap,c=new WeakMap,u=new WeakMap,l=new WeakMap;let d={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return i.get(e);if("objectStoreNames"===t)return e.objectStoreNames||c.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return f(e[t])},has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function m(e){return e===IDBDatabase.prototype.transaction&&"objectStoreNames"in IDBTransaction.prototype?function(t,...n){const r=e.call(h(this),t,...n);return c.set(r,t.sort?t.sort():[t]),f(r)}:(o||(o=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(h(this),t),f(s.get(this))}:function(...t){return f(e.apply(h(this),t))}}function p(e){return"function"==typeof e?m(e):(e instanceof IDBTransaction&&function(e){if(i.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",o),e.removeEventListener("abort",o)},a=()=>{t(),r()},o=()=>{n(e.error),r()};e.addEventListener("complete",a),e.addEventListener("error",o),e.addEventListener("abort",o)});i.set(e,t)}(e),r(e,a||(a=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function f(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",a),e.removeEventListener("error",o)},a=()=>{t(f(e.result)),r()},o=()=>{n(e.error),r()};e.addEventListener("success",a),e.addEventListener("error",o)});return t.then(t=>{t instanceof IDBCursor&&s.set(t,e)}),l.set(t,e),t}(e);if(u.has(e))return u.get(e);const t=p(e);return t!==e&&(u.set(e,t),l.set(t,e)),t}const h=e=>l.get(e);function g(e,t,{blocked:n,upgrade:r,blocking:a}={}){const o=indexedDB.open(e,t),s=f(o);return r&&o.addEventListener("upgradeneeded",e=>{r(f(o.result),e.oldVersion,e.newVersion,f(o.transaction))}),n&&o.addEventListener("blocked",()=>n()),a&&s.then(e=>e.addEventListener("versionchange",a)),s}n.d(t,"a",function(){return g});const v=["get","getKey","getAll","getAllKeys","count"],b=["put","add","delete","clear"],w=new Map;function y(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(w.get(t))return w.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n;if(!(n in(r?IDBIndex:IDBObjectStore).prototype))return;let a;return v.includes(n)&&(a=function(e,...t){let a=this.transaction(e).store;return r&&(a=a.index(t.shift())),a[n](...t)}),b.includes(n)&&(a=function(e,...t){const r=this.transaction(e,"readwrite");return r.store[n](...t),r.done}),a&&w.set(t,a),a}d=(e=>({get:(t,n,r)=>y(t,n)||e.get(t,n,r),has:(t,n)=>!!y(t,n)||e.has(t,n)}))(d)},function(e,t,n){"use strict";n.r(t);var r=n(0);const a=Object(r.a)("rr-db",3,{upgrade(e,t){switch(t){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id");case 1:e.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id");case 2:e.createObjectStore("pending",{keyPath:"id",autoIncrement:!0})}}});class o{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get DATABASE_REVIEWS_URL(){return"http://localhost:1337/reviews"}static fetchRestaurants(e){fetch(o.DATABASE_URL).then(function(t){t.json().then(function(t){e(null,t)})})}static fetchReviews(e,t){let n=o.DATABASE_REVIEWS_URL+"/?restaurant_id="+e;fetch(n).then(e=>e.json()).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantById(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){o.fetchRestaurants((r,a)=>{if(r)n(r,null);else{let r=a;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){o.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){o.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e.photograph?`/img/${e.photograph}.jpg`:`/img/${e.id}.jpg`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:o.urlForRestaurant(e)});return n.addTo(newMap),n}static updateCachedRestaurantReview(e){return console.log("updating cache for new review",e),a.then(t=>{const n=t.transaction("reviews","readwrite"),r=n.objectStore("reviews");return console.log("putting review in store"),r.put(e),console.log("successfully put review in store"),n.done})}static saveNewReview(e,t){const n=o.DATABASE_REVIEWS_URL;o.updateCachedRestaurantReview(e),o.addPendingRequestToQue(n,"POST",e).then(e=>{t(null,e)})}static addPendingRequestToQue(e,t,n){return new Promise((r,s)=>{a.then(r=>{r.transaction("pending","readwrite").objectStore("pending").put({data:{url:e,method:t,formData:n}})}).catch(e=>{console.log(e)}).then(o.nextPending((e,t)=>(console.log(t),r(t))))})}static nextPending(e){o.attemptCommitPending(o.nextPending).then(t=>{console.log(t),e(null,t)})}static attemptCommitPending(e){let t,n,r;return new Promise((o,s)=>{a.then(a=>{if(!a.objectStoreNames.length)return console.log("DB not available"),void a.close();a.transaction("pending","readwrite").objectStore("pending").openCursor().then(s=>{if(!s)return;s.value;if(t=s.value.data.url,n=s.value.data.method,r=s.value.data.formData,!t||!n||"POST"===n&&!r)return void s.delete().then(e());const i={body:JSON.stringify(r),method:n};fetch(t,i).then(e=>{if(e.ok||e.redirected)return e.json()}).then(t=>{a.transaction("pending","readwrite").objectStore("pending").openCursor().then(n=>{n.delete().then(()=>(e(),console.log(t),o(t)))}),console.log("deleted item from pending store")}).catch(e=>{console.log(e)})})})})}static syncRestaurant(e){try{let t=`http://localhost:1337/restaurants/${e.id}/?is_favorite=${e.is_favorite}`;return fetch(t,{method:"PUT"}).then(function(e){return e.json()})}catch(t){console.log("error updating restaurant backend data...",t,e)}}static updateRestaurantInDB(e){return a.then(function(t){let n=t.transaction("restaurants","readwrite");return n.objectStore("restaurants").put(e),n.complete}).then(function(){return Promise.resolve(e)})}static toggleFavBtn(e){return a.then(t=>{return t.transaction("restaurants").objectStore("restaurants").get(e)}).then(e=>{console.log(e);const t=Object.assign({},e);return t.is_favorite="true"===e.is_favorite||!0===e.is_favorite?"false":"true",o.syncRestaurant(t),o.updateRestaurantInDB(t)}).then(e=>{const t=document.getElementById(`fav-btn-${e.id}`);"true"===e.is_favorite||!0===e.is_favorite?(t.innerHTML="Favorited!",t.style.background="hotpink"):(t.innerHTML="Add to favorite",t.style.background="grey")})}}window.DBHelper=o},,,function(e,t,n){n(1),e.exports=n(5)},function(e,t){var n;document.addEventListener("DOMContentLoaded",e=>{initMap(),submitBtn=document.getElementById("submit-form-btn"),submitBtn.addEventListener("click",r)}),initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(n=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),self.newMap=n,L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1Ijoid2VudGluIiwiYSI6ImNqaXJ0N25iZjFwdjYza3A4MGt1aHU2bjEifQ.DnNFUoN5uzw01l_XK_c7nQ",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(n),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap))})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return e(null,self.restaurant),void console.log("self restaurant already fetched");const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=` ${e.name} <br> ${e.address}`;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),DBHelper.fetchReviews(e.id,(e,t)=>{fillReviewsHTML(t)})}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const o=document.createElement("td");o.innerHTML=e[n],r.appendChild(o),t.appendChild(r)}}),fillReviewsHTML=((e=self.restaurant.reviews)=>{const t=document.getElementById("reviews-container"),n=document.createElement("h2");if(n.innerHTML="Reviews",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach(e=>{r.appendChild(createReviewHTML(e))}),t.appendChild(r)}),createReviewHTML=(e=>{const t=document.createElement("li");t.setAttribute("id",`review-li-${e.id}`);const n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("p");r.innerHTML="<strong>Created:</strong> "+new Date(e.createdAt).toDateString(),t.appendChild(r);const a=document.createElement("p");a.innerHTML=`Rating: ${e.rating}`,t.appendChild(a);const o=document.createElement("p");return o.innerHTML=e.comments,t.appendChild(o),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null});const r=()=>{console.log("submit review function");let e=a();/[a-zA-Z]{2,}$/gi.test(e.name)?/[1-5]{1}$/gi.test(e.rating)?e.comments.length<3?alert("comments input must be minimum of 3 characters"):(e.restaurant_id=self.restaurant.id,DBHelper.saveNewReview(e,(e,t)=>{console.log(t);alert("Created Review");let n=createReviewHTML(t);document.getElementById("reviews-list").appendChild(n);var r=document.getElementById(`review-li-${t.id}`);r.scrollIntoView&&r.scrollIntoView.constructor===Function&&r.scrollIntoView(!0)})):alert("rating input must be a number, 1-5"):alert("name input must be letters only, minimum of 2 characters")},a=()=>({name:document.getElementById("name").value.trim(),rating:document.getElementById("rating").value.trim(),comments:document.getElementById("review-field").value.trim()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,