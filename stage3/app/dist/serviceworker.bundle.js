!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){var r=n(15)("wks"),o=n(17),i=n(1).Symbol,c="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=c&&i[t]||(c?i:o)("Symbol."+t))}).store=r},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){"use strict";n.r(e),n.d(e,"dbPromise",(function(){return i}));n(40),n(46);var r=n(20);const o="restaurant-cache-v".concat("3"),i=Object(r.a)("rr-db",3,{upgrade(t,e){switch(e){case 0:t.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id");case 1:t.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id");case 2:t.createObjectStore("pending",{keyPath:"id",autoIncrement:!0})}}});function c(t){let e=["png","jpg","jpeg","svg","gif"],n=!1;for(let r of e)if(t.endsWith(r)){n=!0;break}return n}self.addEventListener("install",t=>{t.waitUntil(caches.open(o).then(t=>t.addAll(["/","./app.bundle.js","./restaurant.bundle.js","./img/rr_icon.png","./css/styles.css"]).catch(t=>{console.log("error setting up install event for sw")})))}),self.addEventListener("activate",t=>{t.waitUntil(caches.keys().then(t=>Promise.all(t.filter(t=>t.startsWith("restaurant-")&&t!=o).map(t=>caches.delete(t)))))}),self.addEventListener("fetch",t=>{let e=new URL(t.request.url);if("1337"===e.port){let n=e.searchParams.get("restaurant_id")-0;return u(t,n)}f(t)});const u=(t,e)=>{"GET"!==t.request.method?(console.log(t.request),console.log(t),t.respondWith(fetch(t.request))):t.request.url.indexOf("restaurants")>-1?s(t):(console.log("starting handling from reviews event"),a(t,e))},s=t=>{t.respondWith(i.then(t=>t.transaction("restaurants").objectStore("restaurants").getAll()).then(e=>(console.log("responding from handlerestaurantevents from serviceworker"),e.length&&e||(t=>new Promise((function(e,n){fetch(t.request).then(t=>t.json()).then(t=>{e(t)}).catch(t=>{console.log(t),n(t)})})))(t).then(t=>(console.log("fetched now storing"),i.then(e=>{let n=e.transaction("restaurants","readwrite"),r=n.objectStore("restaurants");return t.forEach((function(t){r.put(t)})),n.done}).then(()=>(console.log("stored restaurants, now returning"),t)))))).then(t=>(console.log(t),new Response(JSON.stringify(t)))).catch(t=>new Response("Error fetching data",{status:500})))},a=(t,e)=>{t.respondWith(i.then(t=>t.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(e)).then(e=>(console.log("serviceworker handle reviews"),console.log(e),e.length&&e||fetch(t.request).then(t=>t.json()).then(t=>(console.log("using serviceworker fetch"),console.log("starting to store reviews"),i.then(e=>{let n=e.transaction("reviews","readwrite"),r=n.objectStore("reviews");return t.forEach((function(t){r.put(t)})),n.done}).then(()=>t))))).then(t=>new Response(JSON.stringify(t))).catch(t=>new Response("Error fetching data",{status:500})))},f=t=>{t.respondWith(caches.match(t.request).then(e=>e||fetch(t.request).then(e=>{let n=c(t.request.url)?"images_cache-v":o;return caches.open(n).then(n=>(n.put(t.request,e.clone()),e))}).catch(t=>new Response("Application is not connected to the internet",{status:404,statusText:"Application is not connected to the internet"})))),t.waitUntil(l(t.request))},l=t=>{let e=c(t.url)?"images_cache-v":o;return caches.open(e).then(e=>fetch(t).then(n=>e.put(t,n)))}},function(t,e,n){var r=n(11),o=n(23);t.exports=n(6)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(9);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},,function(t,e,n){t.exports=!n(13)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(1),o=n(3),i=n(8),c=n(17)("src"),u=n(44),s=(""+u).split("toString");n(16).inspectSource=function(t){return u.call(t)},(t.exports=function(t,e,n,u){var a="function"==typeof n;a&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(a&&(i(n,c)||o(n,c,t[e]?""+t[e]:s.join(String(e)))),t===r?t[e]=n:u?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[c]||u.call(this)}))},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(4),o=n(35),i=n(36),c=Object.defineProperty;e.f=n(6)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return c(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(50),o=n(10);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(16),o=n(1),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(25)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=n)},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports={}},function(t,e,n){var r=n(15)("keys"),o=n(17);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));let r,o;const i=new WeakMap,c=new WeakMap,u=new WeakMap,s=new WeakMap,a=new WeakMap;let f={get(t,e,n){if(t instanceof IDBTransaction){if("done"===e)return c.get(t);if("objectStoreNames"===e)return t.objectStoreNames||u.get(t);if("store"===e)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return d(t[e])},has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function l(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(o||(o=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(v(this),e),d(i.get(this))}:function(...e){return d(t.apply(v(this),e))}:function(e,...n){const r=t.call(v(this),e,...n);return u.set(r,e.sort?e.sort():[e]),d(r)}}function p(t){return"function"==typeof t?l(t):(t instanceof IDBTransaction&&function(t){if(c.has(t))return;const e=new Promise((e,n)=>{const r=()=>{t.removeEventListener("complete",o),t.removeEventListener("error",i),t.removeEventListener("abort",i)},o=()=>{e(),r()},i=()=>{n(t.error),r()};t.addEventListener("complete",o),t.addEventListener("error",i),t.addEventListener("abort",i)});c.set(t,e)}(t),e=t,(r||(r=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some(t=>e instanceof t)?new Proxy(t,f):t);var e}function d(t){if(t instanceof IDBRequest)return function(t){const e=new Promise((e,n)=>{const r=()=>{t.removeEventListener("success",o),t.removeEventListener("error",i)},o=()=>{e(d(t.result)),r()},i=()=>{n(t.error),r()};t.addEventListener("success",o),t.addEventListener("error",i)});return e.then(e=>{e instanceof IDBCursor&&i.set(e,t)}).catch(()=>{}),a.set(e,t),e}(t);if(s.has(t))return s.get(t);const e=p(t);return e!==t&&(s.set(t,e),a.set(e,t)),e}const v=t=>a.get(t);function h(t,e,{blocked:n,upgrade:r,blocking:o}={}){const i=indexedDB.open(t,e),c=d(i);return r&&i.addEventListener("upgradeneeded",t=>{r(d(i.result),t.oldVersion,t.newVersion,d(i.transaction))}),n&&i.addEventListener("blocked",()=>n()),o&&c.then(t=>t.addEventListener("versionchange",o)).catch(()=>{}),c}const g=["get","getKey","getAll","getAllKeys","count"],y=["put","add","delete","clear"],x=new Map;function b(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(x.get(e))return x.get(e);const n=e.replace(/FromIndex$/,""),r=e!==n,o=y.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!o&&!g.includes(n))return;const i=async function(t,...e){const i=this.transaction(t,o?"readwrite":"readonly");let c=i.store;r&&(c=c.index(e.shift()));const u=c[n](...e);return o&&await i.done,u};return x.set(e,i),i}f=(t=>({get:(e,n,r)=>b(e,n)||t.get(e,n,r),has:(e,n)=>!!b(e,n)||t.has(e,n)}))(f)},function(t,e,n){var r=n(12),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e){t.exports=!1},function(t,e,n){"use strict";var r,o,i=n(34),c=RegExp.prototype.exec,u=String.prototype.replace,s=c,a=(r=/a/,o=/b*/g,c.call(r,"a"),c.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(a||f)&&(s=function(t){var e,n,r,o,s=this;return f&&(n=new RegExp("^"+s.source+"$(?!\\s)",i.call(s))),a&&(e=s.lastIndex),r=c.call(s,t),a&&r&&(s.lastIndex=s.global?r.index+r[0].length:e),f&&r&&r.length>1&&u.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=s},function(t,e,n){var r=n(1),o=n(16),i=n(3),c=n(7),u=n(37),s=function(t,e,n){var a,f,l,p,d=t&s.F,v=t&s.G,h=t&s.S,g=t&s.P,y=t&s.B,x=v?r:h?r[e]||(r[e]={}):(r[e]||{}).prototype,b=v?o:o[e]||(o[e]={}),m=b.prototype||(b.prototype={});for(a in v&&(n=e),n)l=((f=!d&&x&&void 0!==x[a])?x:n)[a],p=y&&f?u(l,r):g&&"function"==typeof l?u(Function.call,l):l,x&&c(x,a,l,t&s.U),b[a]!=l&&i(b,a,p),g&&m[a]!=l&&(m[a]=l)};r.core=o,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e,n){var r=n(9),o=n(1).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){var r=n(38),o=n(24);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(11).f,o=n(8),i=n(0)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){"use strict";var r=n(41)(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){"use strict";var r=n(42),o=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var i=n.call(t,e);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},function(t,e,n){"use strict";n(43);var r=n(7),o=n(3),i=n(13),c=n(10),u=n(0),s=n(26),a=u("species"),f=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,e,n){var p=u(t),d=!i((function(){var e={};return e[p]=function(){return 7},7!=""[t](e)})),v=d?!i((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[a]=function(){return n}),n[p](""),!e})):void 0;if(!d||!v||"replace"===t&&!f||"split"===t&&!l){var h=/./[p],g=n(c,p,""[t],(function(t,e,n,r,o){return e.exec===s?d&&!o?{done:!0,value:h.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),y=g[0],x=g[1];r(String.prototype,t,y),o(RegExp.prototype,p,2==e?function(t,e){return x.call(t,this,e)}:function(t){return x.call(t,this)})}}},function(t,e,n){"use strict";var r=n(4);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){t.exports=!n(6)&&!n(13)((function(){return 7!=Object.defineProperty(n(28)("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(9);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(45);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(8),o=n(14),i=n(55)(!1),c=n(19)("IE_PROTO");t.exports=function(t,e){var n,u=o(t),s=0,a=[];for(n in u)n!=c&&r(u,n)&&a.push(n);for(;e.length>s;)r(u,n=e[s++])&&(~i(a,n)||a.push(n));return a}},function(t,e,n){var r=n(10);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";var r=n(4),o=n(21),i=n(31),c=n(32);n(33)("match",1,(function(t,e,n,u){return[function(n){var r=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=u(n,t,this);if(e.done)return e.value;var s=r(t),a=String(this);if(!s.global)return c(s,a);var f=s.unicode;s.lastIndex=0;for(var l,p=[],d=0;null!==(l=c(s,a));){var v=String(l[0]);p[d]=v,""===v&&(s.lastIndex=i(a,o(s.lastIndex),f)),d++}return 0===d?null:p}]}))},function(t,e,n){var r=n(12),o=n(10);t.exports=function(t){return function(e,n){var i,c,u=String(o(e)),s=r(n),a=u.length;return s<0||s>=a?t?"":void 0:(i=u.charCodeAt(s))<55296||i>56319||s+1===a||(c=u.charCodeAt(s+1))<56320||c>57343?t?u.charAt(s):i:t?u.slice(s,s+2):c-56320+(i-55296<<10)+65536}}},function(t,e,n){var r=n(22),o=n(0)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,c;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(c=r(e))&&"function"==typeof e.callee?"Arguments":c}},function(t,e,n){"use strict";var r=n(26);n(27)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,e,n){t.exports=n(15)("native-function-to-string",Function.toString)},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){for(var r=n(47),o=n(29),i=n(7),c=n(1),u=n(3),s=n(18),a=n(0),f=a("iterator"),l=a("toStringTag"),p=s.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=o(d),h=0;h<v.length;h++){var g,y=v[h],x=d[y],b=c[y],m=b&&b.prototype;if(m&&(m[f]||u(m,f,p),m[l]||u(m,l,y),s[y]=p,x))for(g in r)m[g]||i(m,g,r[g],!0)}},function(t,e,n){"use strict";var r=n(48),o=n(49),i=n(18),c=n(14);t.exports=n(51)(Array,"Array",(function(t,e){this._t=c(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e,n){var r=n(0)("unscopables"),o=Array.prototype;null==o[r]&&n(3)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){var r=n(22);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){"use strict";var r=n(25),o=n(27),i=n(7),c=n(3),u=n(18),s=n(52),a=n(30),f=n(58),l=n(0)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,e,n,v,h,g,y){s(n,e,v);var x,b,m,w=function(t){if(!p&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+" Iterator",j="values"==h,O=!1,E=t.prototype,L=E[l]||E["@@iterator"]||h&&E[h],_=L||w(h),I=h?j?w("entries"):_:void 0,P="Array"==e&&E.entries||L;if(P&&(m=f(P.call(new t)))!==Object.prototype&&m.next&&(a(m,S,!0),r||"function"==typeof m[l]||c(m,l,d)),j&&L&&"values"!==L.name&&(O=!0,_=function(){return L.call(this)}),r&&!y||!p&&!O&&E[l]||c(E,l,_),u[e]=_,u[S]=d,h)if(x={values:j?_:w("values"),keys:g?_:w("keys"),entries:I},y)for(b in x)b in E||i(E,b,x[b]);else o(o.P+o.F*(p||O),e,x);return x}},function(t,e,n){"use strict";var r=n(53),o=n(23),i=n(30),c={};n(3)(c,n(0)("iterator"),(function(){return this})),t.exports=function(t,e,n){t.prototype=r(c,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){var r=n(4),o=n(54),i=n(24),c=n(19)("IE_PROTO"),u=function(){},s=function(){var t,e=n(28)("iframe"),r=i.length;for(e.style.display="none",n(57).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;r--;)delete s.prototype[i[r]];return s()};t.exports=Object.create||function(t,e){var n;return null!==t?(u.prototype=r(t),n=new u,u.prototype=null,n[c]=t):n=s(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(11),o=n(4),i=n(29);t.exports=n(6)?Object.defineProperties:function(t,e){o(t);for(var n,c=i(e),u=c.length,s=0;u>s;)r.f(t,n=c[s++],e[n]);return t}},function(t,e,n){var r=n(14),o=n(21),i=n(56);t.exports=function(t){return function(e,n,c){var u,s=r(e),a=o(s.length),f=i(c,a);if(t&&n!=n){for(;a>f;)if((u=s[f++])!=u)return!0}else for(;a>f;f++)if((t||f in s)&&s[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){var r=n(12),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(1).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(8),o=n(39),i=n(19)("IE_PROTO"),c=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,