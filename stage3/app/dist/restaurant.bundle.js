!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=61)}([function(e,t,n){var r=n(15)("wks"),o=n(17),i=n(1).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){"use strict";n.r(t),n.d(t,"dbPromise",(function(){return i}));n(40),n(46);var r=n(20);const o="restaurant-cache-v".concat("3"),i=Object(r.a)("rr-db",3,{upgrade(e,t){switch(t){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id");case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id");case 2:e.createObjectStore("pending",{keyPath:"id",autoIncrement:!0})}}});function a(e){let t=["png","jpg","jpeg","svg","gif"],n=!1;for(let r of t)if(e.endsWith(r)){n=!0;break}return n}self.addEventListener("install",e=>{e.waitUntil(caches.open(o).then(e=>e.addAll(["/","./app.bundle.js","./restaurant.bundle.js","./img/rr_icon.png","./css/styles.css"]).catch(e=>{console.log("error setting up install event for sw")})))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.filter(e=>e.startsWith("restaurant-")&&e!=o).map(e=>caches.delete(e)))))}),self.addEventListener("fetch",e=>{let t=new URL(e.request.url);if("1337"===t.port){let n=t.searchParams.get("restaurant_id")-0;return c(e,n)}l(e)});const c=(e,t)=>{"GET"!==e.request.method?(console.log(e.request),console.log(e),e.respondWith(fetch(e.request))):e.request.url.indexOf("restaurants")>-1?s(e):(console.log("starting handling from reviews event"),u(e,t))},s=e=>{e.respondWith(i.then(e=>e.transaction("restaurants").objectStore("restaurants").getAll()).then(t=>(console.log("responding from handlerestaurantevents from serviceworker"),t.length&&t||(e=>new Promise((function(t,n){fetch(e.request).then(e=>e.json()).then(e=>{t(e)}).catch(e=>{console.log(e),n(e)})})))(e).then(e=>(console.log("fetched now storing"),i.then(t=>{let n=t.transaction("restaurants","readwrite"),r=n.objectStore("restaurants");return e.forEach((function(e){r.put(e)})),n.done}).then(()=>(console.log("stored restaurants, now returning"),e)))))).then(e=>(console.log(e),new Response(JSON.stringify(e)))).catch(e=>new Response("Error fetching data",{status:500})))},u=(e,t)=>{e.respondWith(i.then(e=>e.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(t)).then(t=>(console.log("serviceworker handle reviews"),console.log(t),t.length&&t||fetch(e.request).then(e=>e.json()).then(e=>(console.log("using serviceworker fetch"),console.log("starting to store reviews"),i.then(t=>{let n=t.transaction("reviews","readwrite"),r=n.objectStore("reviews");return e.forEach((function(e){r.put(e)})),n.done}).then(()=>e))))).then(e=>new Response(JSON.stringify(e))).catch(e=>new Response("Error fetching data",{status:500})))},l=e=>{e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).then(t=>{let n=a(e.request.url)?"images_cache-v":o;return caches.open(n).then(n=>(n.put(e.request,t.clone()),t))}).catch(e=>new Response("Application is not connected to the internet",{status:404,statusText:"Application is not connected to the internet"})))),e.waitUntil(d(e.request))},d=e=>{let t=a(e.url)?"images_cache-v":o;return caches.open(t).then(t=>fetch(e).then(n=>t.put(e,n)))}},function(e,t,n){var r=n(11),o=n(23);e.exports=n(6)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(9);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));n(20);var r=n(2);class o{static get DATABASE_URL(){return"http://localhost:".concat(1337,"/restaurants")}static get DATABASE_REVIEWS_URL(){return"http://localhost:".concat(1337,"/reviews")}static fetchRestaurants(e){fetch(o.DATABASE_URL).then((function(t){t.json().then((function(t){e(null,t)}))}))}static fetchReviews(e,t){let n=o.DATABASE_REVIEWS_URL+"/?restaurant_id="+e;fetch(n).then(e=>e.json()).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantById(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){o.fetchRestaurants((r,o)=>{if(r)n(r,null);else{let r=o;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){o.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){o.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return"/restaurant.html?id=".concat(e.id)}static imageUrlForRestaurant(e){return e.photograph?"/img/".concat(e.photograph,".jpg"):"/img/".concat(e.id,".jpg")}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:o.urlForRestaurant(e)});return n.addTo(newMap),n}static updateCachedRestaurantReview(e){return console.log("updating cache for new review",e),r.dbPromise.then(t=>{const n=t.transaction("reviews","readwrite");return n.objectStore("reviews").put(e),console.log("successfully put review in store"),n.done})}static editReview(e,t){return r.dbPromise.then(e=>e.transaction("reviews").objectStore("reviews").get(t.id)).then(t=>r.dbPromise.then(n=>{let r=n.transaction("reviews","readwrite"),o=r.objectStore("reviews"),i=Object.assign({},t,e);return o.put(i),r.complete}))}static submitReview(e,t){console.log(t);const n=t?"PUT":"POST",r=t?"".concat(o.DATABASE_REVIEWS_URL,"/").concat(t.id):o.DATABASE_REVIEWS_URL;return t?o.editReview(e,t):o.updateCachedRestaurantReview(e),o.addPendingRequestToQue(r,n,e)}static addPendingRequestToQue(e,t,n){return new Promise((i,a)=>{r.dbPromise.then(r=>r.transaction("pending","readwrite").objectStore("pending").put({data:{url:e,method:t,formData:n}})).catch(e=>{console.log("Error putting data in pending db: ".concat(e))}).then(o.nextPending((e,t)=>e?(console.log(e),a(e)):i(t)))})}static nextPending(e){o.attemptCommitPending(o.nextPending).then(t=>{console.log(t),e(null,t)}).catch(t=>{console.log(t),e&&e(t)})}static attemptCommitPending(e){let t,n,o;return new Promise((i,a)=>{r.dbPromise.then(r=>{if(!r.objectStoreNames.length)return console.log("DB not available"),void r.close();r.transaction("pending","readwrite").objectStore("pending").openCursor().then(c=>{if(!c)return void console.log("no more cursors");const s=c.value;if(t=s.data.url,n=s.data.method,o=s.data.formData,!t||!n||"POST"===n&&!o)return c.delete().then(e),void console.log("deleted a bad cursor");const u={body:JSON.stringify(o),method:n};fetch(t,u).then(t=>(console.log(t),t.ok||t.redirected?t.json().then(t=>r.transaction("pending","readwrite").objectStore("pending").openCursor().then(n=>n.delete().then(()=>(console.log(n.value),console.log("deleted item from pending store"),e(),console.log(t),i(t))))):(console.log("this is the response and we are offline"),void console.log(t)))).catch(e=>(console.log(e),a("no network")))})})})}static syncRestaurant(e){let t="http://localhost:1337/restaurants/".concat(e.id,"/?is_favorite=").concat(e.is_favorite);o.addPendingRequestToQue(t,"PUT").catch(t=>{console.log("error updating restaurant backend data...",t,e)})}static updateRestaurantInDB(e){return r.dbPromise.then((function(t){let n=t.transaction("restaurants","readwrite");return n.objectStore("restaurants").put(e),n.complete})).then((function(){return Promise.resolve(e)}))}static toggleFavBtn(e){return r.dbPromise.then(t=>t.transaction("restaurants").objectStore("restaurants").get(e)).then(e=>{console.log(e);const t=Object.assign({},e);return t.is_favorite="true"===e.is_favorite||!0===e.is_favorite?"false":"true",o.syncRestaurant(t),o.updateRestaurantInDB(t)}).then(e=>{const t=document.getElementById("fav-btn-".concat(e.id));"true"===e.is_favorite||!0===e.is_favorite?(t.innerHTML="Favorited!",t.style.background="hotpink"):(t.innerHTML="Add to favorite",t.style.background="grey")})}static deleteCachedReview(e){return r.dbPromise.then(t=>{let n=t.transaction("reviews","readwrite");return n.objectStore("reviews").delete(e),console.log("deleted review from idb"),n.complete}).catch(e=>{console.log("error deleting review: ",e)})}static deleteReview(e){const t="".concat(o.DATABASE_REVIEWS_URL,"/").concat(e);console.log(t);return o.deleteCachedReview(e),o.addPendingRequestToQue(t,"DELETE")}static deleteTempReview(e){r.dbPromise.then(t=>{let n=t.transaction("reviews","readwrite");return n.objectStore("reviews").delete(e),console.log("deleted oldversion of review with old id"),n.complete}).catch(e=>{console.log("error deleting temp review: ",e)})}}},function(e,t,n){e.exports=!n(13)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(1),o=n(3),i=n(8),a=n(17)("src"),c=n(44),s=(""+c).split("toString");n(16).inspectSource=function(e){return c.call(e)},(e.exports=function(e,t,n,c){var u="function"==typeof n;u&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(u&&(i(n,a)||o(n,a,e[t]?""+e[t]:s.join(String(t)))),e===r?e[t]=n:c?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||c.call(this)}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(4),o=n(35),i=n(36),a=Object.defineProperty;t.f=n(6)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(50),o=n(10);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(16),o=n(1),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(25)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=e.exports={version:"2.6.5"};"number"==typeof __e&&(__e=n)},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports={}},function(e,t,n){var r=n(15)("keys"),o=n(17);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return g}));let r,o;const i=new WeakMap,a=new WeakMap,c=new WeakMap,s=new WeakMap,u=new WeakMap;let l={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return a.get(e);if("objectStoreNames"===t)return e.objectStoreNames||c.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return p(e[t])},has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function d(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(o||(o=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(h(this),t),p(i.get(this))}:function(...t){return p(e.apply(h(this),t))}:function(t,...n){const r=e.call(h(this),t,...n);return c.set(r,t.sort?t.sort():[t]),p(r)}}function f(e){return"function"==typeof e?d(e):(e instanceof IDBTransaction&&function(e){if(a.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",i),e.removeEventListener("abort",i)},o=()=>{t(),r()},i=()=>{n(e.error),r()};e.addEventListener("complete",o),e.addEventListener("error",i),e.addEventListener("abort",i)});a.set(e,t)}(e),t=e,(r||(r=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some(e=>t instanceof e)?new Proxy(e,l):e);var t}function p(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",i)},o=()=>{t(p(e.result)),r()},i=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",i)});return t.then(t=>{t instanceof IDBCursor&&i.set(t,e)}).catch(()=>{}),u.set(t,e),t}(e);if(s.has(e))return s.get(e);const t=f(e);return t!==e&&(s.set(e,t),u.set(t,e)),t}const h=e=>u.get(e);function g(e,t,{blocked:n,upgrade:r,blocking:o}={}){const i=indexedDB.open(e,t),a=p(i);return r&&i.addEventListener("upgradeneeded",e=>{r(p(i.result),e.oldVersion,e.newVersion,p(i.transaction))}),n&&i.addEventListener("blocked",()=>n()),o&&a.then(e=>e.addEventListener("versionchange",o)).catch(()=>{}),a}const v=["get","getKey","getAll","getAllKeys","count"],m=["put","add","delete","clear"],y=new Map;function b(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(y.get(t))return y.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,o=m.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!o&&!v.includes(n))return;const i=async function(e,...t){const i=this.transaction(e,o?"readwrite":"readonly");let a=i.store;r&&(a=a.index(t.shift()));const c=a[n](...t);return o&&await i.done,c};return y.set(t,i),i}l=(e=>({get:(t,n,r)=>b(t,n)||e.get(t,n,r),has:(t,n)=>!!b(t,n)||e.has(t,n)}))(l)},function(e,t,n){var r=n(12),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){e.exports=!1},function(e,t,n){"use strict";var r,o,i=n(34),a=RegExp.prototype.exec,c=String.prototype.replace,s=a,u=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),l=void 0!==/()??/.exec("")[1];(u||l)&&(s=function(e){var t,n,r,o,s=this;return l&&(n=new RegExp("^"+s.source+"$(?!\\s)",i.call(s))),u&&(t=s.lastIndex),r=a.call(s,e),u&&r&&(s.lastIndex=s.global?r.index+r[0].length:t),l&&r&&r.length>1&&c.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=s},function(e,t,n){var r=n(1),o=n(16),i=n(3),a=n(7),c=n(37),s=function(e,t,n){var u,l,d,f,p=e&s.F,h=e&s.G,g=e&s.S,v=e&s.P,m=e&s.B,y=h?r:g?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(u in h&&(n=t),n)d=((l=!p&&y&&void 0!==y[u])?y:n)[u],f=m&&l?c(d,r):v&&"function"==typeof d?c(Function.call,d):d,y&&a(y,u,d,e&s.U),b[u]!=d&&i(b,u,f),v&&w[u]!=d&&(w[u]=d)};r.core=o,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},function(e,t,n){var r=n(9),o=n(1).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(38),o=n(24);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(11).f,o=n(8),i=n(0)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){"use strict";var r=n(41)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){"use strict";var r=n(42),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(43);var r=n(7),o=n(3),i=n(13),a=n(10),c=n(0),s=n(26),u=c("species"),l=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),d=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var f=c(e),p=!i((function(){var t={};return t[f]=function(){return 7},7!=""[e](t)})),h=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[u]=function(){return n}),n[f](""),!t})):void 0;if(!p||!h||"replace"===e&&!l||"split"===e&&!d){var g=/./[f],v=n(a,f,""[e],(function(e,t,n,r,o){return t.exec===s?p&&!o?{done:!0,value:g.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),m=v[0],y=v[1];r(String.prototype,e,m),o(RegExp.prototype,f,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},function(e,t,n){"use strict";var r=n(4);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){e.exports=!n(6)&&!n(13)((function(){return 7!=Object.defineProperty(n(28)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(9);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(45);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(8),o=n(14),i=n(55)(!1),a=n(19)("IE_PROTO");e.exports=function(e,t){var n,c=o(e),s=0,u=[];for(n in c)n!=a&&r(c,n)&&u.push(n);for(;t.length>s;)r(c,n=t[s++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(10);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";var r=n(4),o=n(21),i=n(31),a=n(32);n(33)("match",1,(function(e,t,n,c){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=c(n,e,this);if(t.done)return t.value;var s=r(e),u=String(this);if(!s.global)return a(s,u);var l=s.unicode;s.lastIndex=0;for(var d,f=[],p=0;null!==(d=a(s,u));){var h=String(d[0]);f[p]=h,""===h&&(s.lastIndex=i(u,o(s.lastIndex),l)),p++}return 0===p?null:f}]}))},function(e,t,n){var r=n(12),o=n(10);e.exports=function(e){return function(t,n){var i,a,c=String(o(t)),s=r(n),u=c.length;return s<0||s>=u?e?"":void 0:(i=c.charCodeAt(s))<55296||i>56319||s+1===u||(a=c.charCodeAt(s+1))<56320||a>57343?e?c.charAt(s):i:e?c.slice(s,s+2):a-56320+(i-55296<<10)+65536}}},function(e,t,n){var r=n(22),o=n(0)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){"use strict";var r=n(26);n(27)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){e.exports=n(15)("native-function-to-string",Function.toString)},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){for(var r=n(47),o=n(29),i=n(7),a=n(1),c=n(3),s=n(18),u=n(0),l=u("iterator"),d=u("toStringTag"),f=s.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),g=0;g<h.length;g++){var v,m=h[g],y=p[m],b=a[m],w=b&&b.prototype;if(w&&(w[l]||c(w,l,f),w[d]||c(w,d,m),s[m]=f,y))for(v in r)w[v]||i(w,v,r[v],!0)}},function(e,t,n){"use strict";var r=n(48),o=n(49),i=n(18),a=n(14);e.exports=n(51)(Array,"Array",(function(e,t){this._t=a(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){var r=n(0)("unscopables"),o=Array.prototype;null==o[r]&&n(3)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){var r=n(22);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){"use strict";var r=n(25),o=n(27),i=n(7),a=n(3),c=n(18),s=n(52),u=n(30),l=n(58),d=n(0)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,g,v,m){s(n,t,h);var y,b,w,x=function(e){if(!f&&e in L)return L[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},E=t+" Iterator",S="values"==g,R=!1,L=e.prototype,_=L[d]||L["@@iterator"]||g&&L[g],j=_||x(g),I=g?S?x("entries"):j:void 0,T="Array"==t&&L.entries||_;if(T&&(w=l(T.call(new e)))!==Object.prototype&&w.next&&(u(w,E,!0),r||"function"==typeof w[d]||a(w,d,p)),S&&_&&"values"!==_.name&&(R=!0,j=function(){return _.call(this)}),r&&!m||!f&&!R&&L[d]||a(L,d,j),c[t]=j,c[E]=p,g)if(y={values:S?j:x("values"),keys:v?j:x("keys"),entries:I},m)for(b in y)b in L||i(L,b,y[b]);else o(o.P+o.F*(f||R),t,y);return y}},function(e,t,n){"use strict";var r=n(53),o=n(23),i=n(30),a={};n(3)(a,n(0)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(4),o=n(54),i=n(24),a=n(19)("IE_PROTO"),c=function(){},s=function(){var e,t=n(28)("iframe"),r=i.length;for(t.style.display="none",n(57).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),s=e.F;r--;)delete s.prototype[i[r]];return s()};e.exports=Object.create||function(e,t){var n;return null!==e?(c.prototype=r(e),n=new c,c.prototype=null,n[a]=e):n=s(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(11),o=n(4),i=n(29);e.exports=n(6)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),c=a.length,s=0;c>s;)r.f(e,n=a[s++],t[n]);return e}},function(e,t,n){var r=n(14),o=n(21),i=n(56);e.exports=function(e){return function(t,n,a){var c,s=r(t),u=o(s.length),l=i(a,u);if(e&&n!=n){for(;u>l;)if((c=s[l++])!=c)return!0}else for(;u>l;l++)if((e||l in s)&&s[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var r=n(12),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(1).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(8),o=n(39),i=n(19)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){"use strict";"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/serviceworker.bundle.js").then(e=>{console.log("SW registered: ",e)}).catch(e=>{console.log("SW registration failed: ",e)})})},,function(e,t,n){"use strict";n.r(t);n(62),n(70),n(59);var r=n(5),o=n(2);let i;var a;let c=!1;document.addEventListener("DOMContentLoaded",e=>{s(),i=document.getElementById("submit-form-btn"),i.addEventListener("click",v),r.a.nextPending()});const s=()=>{u((e,t)=>{e?console.error(e):(a=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),self.newMap=a,L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1Ijoid2VudGluIiwiYSI6ImNqaXJ0N25iZjFwdjYza3A4MGt1aHU2bjEifQ.DnNFUoN5uzw01l_XK_c7nQ",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(a),h(),r.a.mapMarkerForRestaurant(self.restaurant,self.newMap))})},u=e=>{if(self.restaurant)return e(null,self.restaurant),void console.log("self restaurant already fetched");const t=g("id");t?r.a.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(l(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))},l=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurant;const t=document.getElementById("restaurant-name");t.innerHTML=e.name;const n=document.getElementById("restaurant-address");n.innerHTML=" ".concat(e.name," <br> ").concat(e.address);const o=document.getElementById("restaurant-img");o.className="restaurant-img",o.src=r.a.imageUrlForRestaurant(e);const i=document.getElementById("restaurant-cuisine");i.innerHTML=e.cuisine_type,e.operating_hours&&d(),r.a.fetchReviews(e.id,(e,t)=>{f(t)})},d=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours;const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),o=document.createElement("td");o.innerHTML=n,r.appendChild(o);const i=document.createElement("td");i.innerHTML=e[n],r.appendChild(i),t.appendChild(r)}},f=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurant.reviews;console.log(e);const t=document.getElementById("reviews-container");t.innerHTML="";const n=document.createElement("h2");if(n.innerHTML="Reviews",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.createElement("ul");r.id="reviews-list",e.forEach(e=>{r.appendChild(p(e))}),t.appendChild(r)},p=e=>{const t=document.createElement("li");t.setAttribute("id","review-li-".concat(e.id));const n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("p");if(r.innerHTML="<strong>Created:</strong> "+new Date(e.createdAt).toDateString(),t.appendChild(r),e.createdAt!==e.updatedAt){const n=document.createElement("p");n.innerHTML="<strong>Updated:</strong> "+new Date(e.updatedAt).toDateString(),t.appendChild(n)}const o=document.createElement("p");o.innerHTML="Rating: ".concat(e.rating),t.appendChild(o);const i=document.createElement("p");i.innerHTML=e.comments,t.appendChild(i);const a=document.createElement("button"),c=document.createElement("i");a.setAttribute("aria-labelledby","edit review ".concat(e.id)),a.setAttribute("title","edit review button"),a.classList.add("review-btn"),a.title="start editing button",c.classList.add("fas","fa-edit","fa-2x"),a.addEventListener("click",()=>b(e)),a.append(c),t.appendChild(a);const s=document.createElement("button"),u=document.createElement("i");return s.setAttribute("aria-labelledby","delete review ".concat(e.id)),s.setAttribute("title","delete review button"),s.classList.add("review-btn"),u.classList.add("fas","fa-trash-alt","fa-2x"),s.addEventListener("click",()=>w(e)),s.append(u),t.appendChild(s),t},h=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurant;const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)},g=(e,t)=>{new URL(window.location.href);t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&"),console.log(t);const n=new RegExp("[?&]".concat(e,"(=([^&#]*)|&|#|$)")).exec(t);return console.log(n),n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):""},v=()=>{console.log(c);let e=m();/[a-zA-Z]{2,}$/gi.test(e.name)?/[1-5]{1}$/gi.test(e.rating)?e.comments.length<3?alert("comments input must be minimum of 3 characters"):(c?e.updatedAt=Date.now():(e.id=Date.now(),e.restaurant_id=Number(g("id"))),r.a.submitReview(e,c).then(e=>{alert(c?"Edited Review":"Created Review");let t=p(e);if(c){let n=document.getElementById("review-li-".concat(e.id));n.parentElement.replaceChild(t,n)}else{document.getElementById("reviews-list").appendChild(t)}document.getElementById("review-li-".concat(e.id)).scrollIntoView(!0),y()}).catch(t=>{alert(c?"Edited Review":"Created Review"),console.log("".concat(t,": reloading reviews from db"));document.getElementById("reviews-container");o.dbPromise.then(t=>t.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(e.restaurant_id)).then(e=>{console.log(e),f(e),y()})})):alert("rating input must be a number, 1-5"):alert("name input must be letters only, minimum of 2 characters")},m=()=>({name:document.getElementById("name").value.trim(),rating:document.getElementById("rating").value.trim(),comments:document.getElementById("review-field").value.trim()}),y=()=>{c=!1,document.getElementById("name").value="",document.getElementById("rating").value="",document.getElementById("review-field").value=""},b=e=>{c=e;let t=document.getElementById("cancel-form-btn");t.style.display="block",t.addEventListener("click",()=>(document.getElementById("cancel-form-btn").style.display="none",y(),void(c=!1))),document.getElementById("name").value=e.name,document.getElementById("rating").value=e.rating,document.getElementById("review-field").value=e.comments;e.id;x()},w=e=>{!1!==window.confirm("delete ".concat(e.name,"'s review?"))&&r.a.deleteReview(e.id).then(()=>{document.getElementById("review-li-".concat(e.id)).remove()}).catch(t=>{console.log("request put into que"),document.getElementById("review-li-".concat(e.id)).remove()})},x=()=>{window.scrollTo(0,document.body.scrollHeight)}},function(e,t,n){var r=n(1),o=n(63),i=n(11).f,a=n(67).f,c=n(68),s=n(34),u=r.RegExp,l=u,d=u.prototype,f=/a/g,p=/a/g,h=new u(f)!==f;if(n(6)&&(!h||n(13)((function(){return p[n(0)("match")]=!1,u(f)!=f||u(p)==p||"/a/i"!=u(f,"i")})))){u=function(e,t){var n=this instanceof u,r=c(e),i=void 0===t;return!n&&r&&e.constructor===u&&i?e:o(h?new l(r&&!i?e.source:e,t):l((r=e instanceof u)?e.source:e,r&&i?s.call(e):t),n?this:d,u)};for(var g=function(e){e in u||i(u,e,{configurable:!0,get:function(){return l[e]},set:function(t){l[e]=t}})},v=a(l),m=0;v.length>m;)g(v[m++]);d.constructor=u,u.prototype=d,n(7)(r,"RegExp",u)}n(69)("RegExp")},function(e,t,n){var r=n(9),o=n(64).set;e.exports=function(e,t,n){var i,a=t.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},function(e,t,n){var r=n(9),o=n(4),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(37)(Function.call,n(65).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){var r=n(66),o=n(23),i=n(14),a=n(36),c=n(8),s=n(35),u=Object.getOwnPropertyDescriptor;t.f=n(6)?u:function(e,t){if(e=i(e),t=a(t,!0),s)try{return u(e,t)}catch(e){}if(c(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(38),o=n(24).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(9),o=n(22),i=n(0)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){"use strict";var r=n(1),o=n(11),i=n(6),a=n(0)("species");e.exports=function(e){var t=r[e];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t,n){"use strict";var r=n(4),o=n(39),i=n(21),a=n(12),c=n(31),s=n(32),u=Math.max,l=Math.min,d=Math.floor,f=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(33)("replace",2,(function(e,t,n,h){return[function(r,o){var i=e(this),a=null==r?void 0:r[t];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},function(e,t){var o=h(n,e,this,t);if(o.done)return o.value;var d=r(e),f=String(this),p="function"==typeof t;p||(t=String(t));var v=d.global;if(v){var m=d.unicode;d.lastIndex=0}for(var y=[];;){var b=s(d,f);if(null===b)break;if(y.push(b),!v)break;""===String(b[0])&&(d.lastIndex=c(f,i(d.lastIndex),m))}for(var w,x="",E=0,S=0;S<y.length;S++){b=y[S];for(var R=String(b[0]),L=u(l(a(b.index),f.length),0),_=[],j=1;j<b.length;j++)_.push(void 0===(w=b[j])?w:String(w));var I=b.groups;if(p){var T=[R].concat(_,L,f);void 0!==I&&T.push(I);var P=String(t.apply(void 0,T))}else P=g(R,f,L,_,I,t);L>=E&&(x+=f.slice(E,L)+P,E=L+R.length)}return x+f.slice(E)}];function g(e,t,r,i,a,c){var s=r+e.length,u=i.length,l=p;return void 0!==a&&(a=o(a),l=f),n.call(c,l,(function(n,o){var c;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(s);case"<":c=a[o.slice(1,-1)];break;default:var l=+o;if(0===l)return n;if(l>u){var f=d(l/10);return 0===f?n:f<=u?void 0===i[f-1]?o.charAt(1):i[f-1]+o.charAt(1):n}c=i[l-1]}return void 0===c?"":c}))}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L2pzL2RiaGVscGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2VzbS9jaHVuay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvanMvcmVnaXN0cmF0aW9uLmpzIiwid2VicGFjazovLy8uL2NsaWVudC9qcy9yZXN0YXVyYW50X2luZm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiZ2xvYmFsIiwid2luZG93IiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsIlNUQVRJQ19DQUNIRSIsImRiUHJvbWlzZSIsIm9wZW5EQiIsInVwZ3JhZGUiLCJkYiIsIm9sZFZlcnNpb24iLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJjcmVhdGVJbmRleCIsImF1dG9JbmNyZW1lbnQiLCJpc0ltYWdlVVJMIiwidXJsIiwiaW1nVHlwZXMiLCJpc0ltYWdlIiwidHlwZSIsImVuZHNXaXRoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwid2FpdFVudGlsIiwiY2FjaGVzIiwib3BlbiIsInRoZW4iLCJjYWNoZSIsImFkZEFsbCIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwia2V5cyIsImNhY2hlTmFtZXMiLCJQcm9taXNlIiwiYWxsIiwiZmlsdGVyIiwiY2FjaGVOYW1lIiwic3RhcnRzV2l0aCIsIm1hcCIsImRlbGV0ZSIsImNoZWNrVXJsIiwiVVJMIiwicmVxdWVzdCIsInBvcnQiLCJpZCIsInNlYXJjaFBhcmFtcyIsImhhbmRsZUFKQVhFdmVudCIsImhhbmRsZU5vbkFKQVhFdmVudCIsIm1ldGhvZCIsInJlc3BvbmRXaXRoIiwiZmV0Y2giLCJpbmRleE9mIiwiaGFuZGxlUmVzdGF1cmFudEV2ZW50cyIsImhhbmRsZVJldmlld3NFdmVudHMiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiZ2V0QWxsIiwiZGF0YSIsImxlbmd0aCIsInJlc29sdmUiLCJyZWplY3QiLCJyZXNwIiwianNvbiIsImdldFJlc3RhdXJhbnRzIiwicmVzdGF1cmFudHMiLCJ0eCIsImZvckVhY2giLCJyZXN0YXVyYW50IiwicHV0IiwiZG9uZSIsImZpbmFsUmVzcG9uc2UiLCJSZXNwb25zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGF0dXMiLCJpbmRleCIsImZldGNoUmVzcG9uc2UiLCJyZXZpZXdzIiwicmV2aWV3IiwibWF0Y2giLCJyZXNwb25zZSIsInVzZUNhY2hlIiwiY2xvbmUiLCJzdGF0dXNUZXh0IiwidXBkYXRlIiwiZFAiLCJjcmVhdGVEZXNjIiwiZiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJEQkhlbHBlciIsImNhbGxiYWNrIiwiREFUQUJBU0VfVVJMIiwicmVzdGF1cmFudF9pZCIsImZldGNoVVJMIiwiREFUQUJBU0VfUkVWSUVXU19VUkwiLCJmZXRjaFJlc3RhdXJhbnRzIiwiZmluZCIsImN1aXNpbmUiLCJyZXN1bHRzIiwiY3Vpc2luZV90eXBlIiwibmVpZ2hib3Job29kIiwibmVpZ2hib3Job29kcyIsInYiLCJ1bmlxdWVOZWlnaGJvcmhvb2RzIiwiY3Vpc2luZXMiLCJ1bmlxdWVDdWlzaW5lcyIsInBob3RvZ3JhcGgiLCJtYXJrZXIiLCJMIiwibGF0bG5nIiwibGF0IiwibG5nIiwidGl0bGUiLCJhbHQiLCJ1cmxGb3JSZXN0YXVyYW50IiwiYWRkVG8iLCJuZXdNYXAiLCJmb3JtRGF0YSIsImVkaXRpbmciLCJuZXdSZXZpZXciLCJhc3NpZ24iLCJjb21wbGV0ZSIsImVkaXRSZXZpZXciLCJ1cGRhdGVDYWNoZWRSZXN0YXVyYW50UmV2aWV3IiwiYWRkUGVuZGluZ1JlcXVlc3RUb1F1ZSIsIm5leHRQZW5kaW5nIiwiYXR0ZW1wdENvbW1pdFBlbmRpbmciLCJqIiwiYm9keSIsIm9iamVjdFN0b3JlTmFtZXMiLCJjbG9zZSIsIm9wZW5DdXJzb3IiLCJjdXJzb3IiLCJwcm9wZXJ0aWVzIiwib2siLCJyZWRpcmVjdGVkIiwiaXNfZmF2b3JpdGUiLCJuZXdfcmVzdGF1cmFudCIsInN5bmNSZXN0YXVyYW50IiwidXBkYXRlUmVzdGF1cmFudEluREIiLCJmYXZCdG4iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwicmV2aWV3X2lkIiwiZGVsZXRlQ2FjaGVkUmV2aWV3IiwidGVtcF9pZCIsImEiLCJoaWRlIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwiTyIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsInRoaXMiLCJ1bmRlZmluZWQiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJQIiwiQXR0cmlidXRlcyIsImUiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsImV4ZWMiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImNvcmUiLCJwdXNoIiwidmVyc2lvbiIsImNvcHlyaWdodCIsIl9fZSIsInB4IiwicmFuZG9tIiwiY29uY2F0IiwidG9TdHJpbmciLCJzaGFyZWQiLCJpZGJQcm94eWFibGVUeXBlcyIsImN1cnNvckFkdmFuY2VNZXRob2RzIiwiY3Vyc29yUmVxdWVzdE1hcCIsIldlYWtNYXAiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJ0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAiLCJ0cmFuc2Zvcm1DYWNoZSIsInJldmVyc2VUcmFuc2Zvcm1DYWNoZSIsImlkYlByb3h5VHJhcHMiLCJ0YXJnZXQiLCJwcm9wIiwicmVjZWl2ZXIiLCJJREJUcmFuc2FjdGlvbiIsIndyYXAiLCJ3cmFwRnVuY3Rpb24iLCJmdW5jIiwiSURCRGF0YWJhc2UiLCJJREJDdXJzb3IiLCJhZHZhbmNlIiwiY29udGludWUiLCJjb250aW51ZVByaW1hcnlLZXkiLCJpbmNsdWRlcyIsImFyZ3MiLCJhcHBseSIsInVud3JhcCIsInN0b3JlTmFtZXMiLCJzZXQiLCJzb3J0IiwidHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSIsInVubGlzdGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbiIsIklEQk9iamVjdFN0b3JlIiwiSURCSW5kZXgiLCJzb21lIiwiUHJveHkiLCJJREJSZXF1ZXN0IiwicHJvbWlzZSIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJwcm9taXNpZnlSZXF1ZXN0IiwibmV3VmFsdWUiLCJibG9ja2VkIiwiYmxvY2tpbmciLCJpbmRleGVkREIiLCJvcGVuUHJvbWlzZSIsIm5ld1ZlcnNpb24iLCJyZWFkTWV0aG9kcyIsIndyaXRlTWV0aG9kcyIsImNhY2hlZE1ldGhvZHMiLCJNYXAiLCJnZXRNZXRob2QiLCJ0YXJnZXRGdW5jTmFtZSIsInJlcGxhY2UiLCJ1c2VJbmRleCIsImlzV3JpdGUiLCJhc3luYyIsInN0b3JlTmFtZSIsInNoaWZ0IiwicmV0dXJuVmFsIiwib2xkVHJhcHMiLCJ0b0ludGVnZXIiLCJtaW4iLCJzbGljZSIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwiUmVnRXhwIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsInN0ciIsImxhc3RJbmRleCIsInJlQ29weSIsInJlIiwic291cmNlIiwiYXJndW1lbnRzIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0Iiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiQiIsImV4cFByb3RvIiwiVSIsIlciLCJSIiwiaXMiLCJjcmVhdGVFbGVtZW50IiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsImRlZiIsIlRBRyIsInRhZyIsInN0YXQiLCJhdCIsInVuaWNvZGUiLCJjbGFzc29mIiwiYnVpbHRpbkV4ZWMiLCJmYWlscyIsIndrcyIsInJlZ2V4cEV4ZWMiLCJTUEVDSUVTIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJLRVkiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwiY29uc3RydWN0b3IiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJmbiIsInJ4Zm4iLCJzdHJpbmciLCJhcmciLCJ0aGF0IiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsImZuIiwidmFsdWVPZiIsImFGdW5jdGlvbiIsImIiLCJ0b0lPYmplY3QiLCJhcnJheUluZGV4T2YiLCJJRV9QUk9UTyIsIm5hbWVzIiwidG9MZW5ndGgiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiTUFUQ0giLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyZXMiLCJyeCIsImZ1bGxVbmljb2RlIiwiQSIsIm1hdGNoU3RyIiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJwcm90byIsImZvcmNlZCIsIiRpdGVyYXRvcnMiLCJnZXRLZXlzIiwiSXRlcmF0b3JzIiwiSVRFUkFUT1IiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJBcnJheSIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJOQU1FIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiYWRkVG9VbnNjb3BhYmxlcyIsInN0ZXAiLCJpdGVyYXRlZCIsImtpbmQiLCJfdCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkxJQlJBUlkiLCIkaXRlckNyZWF0ZSIsInNldFRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJCVUdHWSIsInJldHVyblRoaXMiLCJCYXNlIiwiQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsImRlc2NyaXB0b3IiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJ3cml0ZSIsImx0IiwiUHJvcGVydGllcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJtYXgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b09iamVjdCIsIk9iamVjdFByb3RvIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwicmVnaXN0cmF0aW9uIiwicmVnaXN0cmF0aW9uRXJyb3IiLCJzdWJtaXRCdG4iLCJpbml0TWFwIiwic3VibWl0UmV2aWV3IiwiZmV0Y2hSZXN0YXVyYW50RnJvbVVSTCIsImNlbnRlciIsInpvb20iLCJzY3JvbGxXaGVlbFpvb20iLCJ0aWxlTGF5ZXIiLCJtYXBib3hUb2tlbiIsIm1heFpvb20iLCJhdHRyaWJ1dGlvbiIsImZpbGxCcmVhZGNydW1iIiwibWFwTWFya2VyRm9yUmVzdGF1cmFudCIsImdldFBhcmFtZXRlckJ5TmFtZSIsImZldGNoUmVzdGF1cmFudEJ5SWQiLCJmaWxsUmVzdGF1cmFudEhUTUwiLCJhZGRyZXNzIiwiaW1hZ2UiLCJjbGFzc05hbWUiLCJpbWFnZVVybEZvclJlc3RhdXJhbnQiLCJvcGVyYXRpbmdfaG91cnMiLCJmaWxsUmVzdGF1cmFudEhvdXJzSFRNTCIsImZldGNoUmV2aWV3cyIsImZpbGxSZXZpZXdzSFRNTCIsIm9wZXJhdGluZ0hvdXJzIiwiaG91cnMiLCJyb3ciLCJkYXkiLCJ0aW1lIiwiY29udGFpbmVyIiwibm9SZXZpZXdzIiwidWwiLCJjcmVhdGVSZXZpZXdIVE1MIiwibGkiLCJzZXRBdHRyaWJ1dGUiLCJkYXRlIiwiRGF0ZSIsImNyZWF0ZWRBdCIsInRvRGF0ZVN0cmluZyIsInVwZGF0ZWRBdCIsInVwZGF0ZURhdGUiLCJyYXRpbmciLCJjb21tZW50cyIsImVkaXRCdG4iLCJlZGl0SWNvbiIsImNsYXNzTGlzdCIsImFkZCIsInNldEVkaXRpbmciLCJhcHBlbmQiLCJkZWxldGVCdG4iLCJkZWxldGVJY29uIiwiZGVsZXRlUmV2aWV3IiwiYnJlYWRjcnVtYiIsImxvY2F0aW9uIiwiaHJlZiIsImRlY29kZVVSSUNvbXBvbmVudCIsImdldEZvcm1WYWx1ZXMiLCJ0ZXN0IiwiYWxlcnQiLCJub3ciLCJOdW1iZXIiLCJuZXdSZXZpZXdFbGVtIiwib2xkUmV2aWV3RWxlbSIsInBhcmVudEVsZW1lbnQiLCJyZXBsYWNlQ2hpbGQiLCJzY3JvbGxJbnRvVmlldyIsInJlc2V0Rm9ybVZhbHVlcyIsInRyaW0iLCJjYW5jZWxFZGl0aW5nQnRuIiwiZ29Ub0JvdHRvbSIsImNvbmZpcm0iLCJyZW1vdmUiLCJzY3JvbGxUbyIsInNjcm9sbEhlaWdodCIsImluaGVyaXRJZlJlcXVpcmVkIiwiZ09QTiIsImlzUmVnRXhwIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsInNldFByb3RvdHlwZU9mIiwiQyIsImNoZWNrIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJwSUUiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJERVNDUklQVE9SUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJtYXRjaGVkIiwicG9zaXRpb24iLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJyZXBsYWNlbWVudCIsImdldFN1YnN0aXR1dGlvbiIsInRhaWxQb3MiLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNB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SyxJQUFLLE9BQU8vUyxFQUFJYixNQUFNLEVBQUc2VCxHQUM5QixJQUFLLElBQUssT0FBT2hULEVBQUliLE1BQU1tVSxHQUMzQixJQUFLLElBQ0hHLEVBQVVQLEVBQWNNLEVBQUdyVSxNQUFNLEdBQUksSUFDckMsTUFDRixRQUNFLElBQUl6USxHQUFLOGtCLEVBQ1QsR0FBVSxJQUFOOWtCLEVBQVMsT0FBTzRGLEVBQ3BCLEdBQUk1RixFQUFJckIsRUFBRyxDQUNULElBQUl5SCxFQUFJdUYsRUFBTTNMLEVBQUksSUFDbEIsT0FBVSxJQUFOb0csRUFBZ0JSLEVBQ2hCUSxHQUFLekgsT0FBOEJ3TSxJQUFwQm9aLEVBQVNuZSxFQUFJLEdBQW1CMGUsRUFBR2pPLE9BQU8sR0FBSzBOLEVBQVNuZSxFQUFJLEdBQUswZSxFQUFHak8sT0FBTyxHQUN2RmpSLEVBRVRtZixFQUFVUixFQUFTdmtCLEVBQUksR0FFM0IsWUFBbUJtTCxJQUFaNFosRUFBd0IsR0FBS0EiLCJmaWxlIjoicmVzdGF1cmFudC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNjEpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiY29uc3QgY2FjaGVWZXJzaW9uID0gJzMnO1xuY29uc3QgU1RBVElDX0NBQ0hFID0gYHJlc3RhdXJhbnQtY2FjaGUtdiR7Y2FjaGVWZXJzaW9ufWA7XG5jb25zdCBJTUFHRVNfQ0FDSEUgPSBgaW1hZ2VzX2NhY2hlLXZgO1xuY29uc3QgYWxsQ2FjaGVzID0gW1xuICBTVEFUSUNfQ0FDSEUsXG4gIElNQUdFU19DQUNIRVxuXTtcbmltcG9ydCB7IG9wZW5EQiwgZGVsZXRlREIsIHdyYXAsIHVud3JhcCB9IGZyb20gJ2lkYic7XG5leHBvcnQge2RiUHJvbWlzZX1cblxuY29uc3QgZGJQcm9taXNlID0gb3BlbkRCKCdyci1kYicsIDMsIHtcbiAgdXBncmFkZShkYiwgb2xkVmVyc2lvbikge1xuICAgIHN3aXRjaCAob2xkVmVyc2lvbikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBjb25zdCBzdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycsIHsga2V5UGF0aDogJ2lkJyB9KTtcbiAgICAgICAgc3RvcmUuY3JlYXRlSW5kZXgoJ2lkJywgJ2lkJyk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGNvbnN0IHJldmlld3NTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXZpZXdzJywge1xuICAgICAgICAgIGtleVBhdGg6ICdpZCcsXG4gICAgICAgICAgLy8gYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV2aWV3c1N0b3JlLmNyZWF0ZUluZGV4KFwicmVzdGF1cmFudF9pZFwiLCBcInJlc3RhdXJhbnRfaWRcIik7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGNvbnN0IHBlbmRpbmdTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwZW5kaW5nJywge1xuICAgICAgICAgIGtleVBhdGg6ICdpZCcsXG4gICAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuXG4gY29uc3QgZ2V0UmVzdGF1cmFudHMgPSAoZXZlbnQpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmZXRjaChldmVudC5yZXF1ZXN0KVxuICAgICAgLnRoZW4ocmVzcCA9PiByZXNwLmpzb24oKSlcbiAgICAgIC50aGVuKGpzb24gPT4geyByZXNvbHZlKGpzb24pOyB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuZnVuY3Rpb24gaXNJbWFnZVVSTCh1cmwpIHtcbiAgbGV0IGltZ1R5cGVzID0gW1wicG5nXCIsIFwianBnXCIsIFwianBlZ1wiLCBcInN2Z1wiLCBcImdpZlwiXTtcbiAgbGV0IGlzSW1hZ2UgPSBmYWxzZTtcbiAgZm9yIChsZXQgdHlwZSBvZiBpbWdUeXBlcykge1xuICAgIGlmICh1cmwuZW5kc1dpdGgodHlwZSkpIHsgaXNJbWFnZSA9IHRydWU7IGJyZWFrfTtcbiAgfVxuICByZXR1cm4gaXNJbWFnZTtcbn1cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdpbnN0YWxsJywgZXZlbnQgPT4ge1xuICBldmVudC53YWl0VW50aWwoXG4gICAgY2FjaGVzLm9wZW4oU1RBVElDX0NBQ0hFKS50aGVuKGNhY2hlID0+IHtcbiAgICAgIHJldHVybiBjYWNoZS5hZGRBbGwoW1xuICAgICAgICAnLycsXG4gICAgICAgICcuL2FwcC5idW5kbGUuanMnLFxuICAgICAgICAnLi9yZXN0YXVyYW50LmJ1bmRsZS5qcycsXG4gICAgICAgICcuL2ltZy9ycl9pY29uLnBuZycsXG4gICAgICAgICcuL2Nzcy9zdHlsZXMuY3NzJ1xuICAgICAgXSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igc2V0dGluZyB1cCBpbnN0YWxsIGV2ZW50IGZvciBzdycpO1xuICAgICAgfSk7XG4gICAgfSlcbiAgKTtcbn0pO1xuXG4vLyBDbGVhbiB1bnVzZWQgY2FjaGVzIHdpdGggbmFtZXMgc3RhcnRpbmcgd2l0aCByZXN0YXVyYW50XG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2FjdGl2YXRlJywgZXZlbnQgPT4ge1xuICBldmVudC53YWl0VW50aWwoXG4gICAgY2FjaGVzLmtleXMoKS50aGVuKGNhY2hlTmFtZXMgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICBjYWNoZU5hbWVzLmZpbHRlcihjYWNoZU5hbWUgPT4ge1xuICAgICAgICAgIHJldHVybiBjYWNoZU5hbWUuc3RhcnRzV2l0aCgncmVzdGF1cmFudC0nKSAmJlxuICAgICAgICAgICAgICAgICBjYWNoZU5hbWUgIT0gU1RBVElDX0NBQ0hFO1xuICAgICAgICB9KS5tYXAoY2FjaGVOYW1lID0+IHtcbiAgICAgICAgICByZXR1cm4gY2FjaGVzLmRlbGV0ZShjYWNoZU5hbWUpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KVxuICApO1xufSk7XG5cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIGV2ZW50ID0+IHtcbiAgbGV0IGNoZWNrVXJsID0gbmV3IFVSTChldmVudC5yZXF1ZXN0LnVybCk7XG4gIGlmIChjaGVja1VybC5wb3J0ID09PSBcIjEzMzdcIikge1xuICAgIGxldCBpZCA9IGNoZWNrVXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3Jlc3RhdXJhbnRfaWQnKSAtIDA7XG4gICAgcmV0dXJuIGhhbmRsZUFKQVhFdmVudChldmVudCwgaWQpO1xuICB9IGVsc2Uge1xuICAgIGhhbmRsZU5vbkFKQVhFdmVudChldmVudCk7XG4gIH1cbn0pO1xuXG5jb25zdCBoYW5kbGVBSkFYRXZlbnQgPSAoZXZlbnQsIGlkKSA9PiB7XG4gIC8vIE9ubHkgdXNlIGZvciBjYWNoaW5nIGZvciBHZXQgZXZlbnRzXG4gIGlmKGV2ZW50LnJlcXVlc3QubWV0aG9kICE9PSBcIkdFVFwiKSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQucmVxdWVzdCk7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuICAgIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgICAgZmV0Y2goZXZlbnQucmVxdWVzdClcbiAgICApXG4gIH0gZWxzZSBpZihldmVudC5yZXF1ZXN0LnVybC5pbmRleE9mKFwicmVzdGF1cmFudHNcIikgPiAtMSkge1xuICAgIGhhbmRsZVJlc3RhdXJhbnRFdmVudHMoZXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdzdGFydGluZyBoYW5kbGluZyBmcm9tIHJldmlld3MgZXZlbnQnKVxuICAgIGhhbmRsZVJldmlld3NFdmVudHMoZXZlbnQsIGlkKTtcbiAgfVxufVxuXG5jb25zdCBoYW5kbGVSZXN0YXVyYW50RXZlbnRzID0gKGV2ZW50KSA9PiB7XG4gIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgICAgZGJQcm9taXNlLnRoZW4oIGRiID0+IHtcbiAgICAgICAgcmV0dXJuIGRiXG4gICAgICAgICAgLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycpXG4gICAgICAgICAgLm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpXG4gICAgICAgICAgLmdldEFsbCgpO1xuICAgICAgfSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Jlc3BvbmRpbmcgZnJvbSBoYW5kbGVyZXN0YXVyYW50ZXZlbnRzIGZyb20gc2VydmljZXdvcmtlcicpO1xuICAgICAgICByZXR1cm4gKChkYXRhLmxlbmd0aCAmJiBkYXRhKSB8fCBnZXRSZXN0YXVyYW50cyhldmVudClcbiAgICAgICAgICAudGhlbiggcmVzdGF1cmFudHMgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZldGNoZWQgbm93IHN0b3JpbmcnKTtcbiAgICAgICAgICAgIHJldHVybiBkYlByb21pc2UudGhlbihkYiA9PiB7XG4gICAgICAgICAgICAgIGxldCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgICAgICAgbGV0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICAgICAgICAgIHJlc3RhdXJhbnRzLmZvckVhY2goZnVuY3Rpb24ocmVzdGF1cmFudCl7XG4gICAgICAgICAgICAgICAgc3RvcmUucHV0KHJlc3RhdXJhbnQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHR4LmRvbmU7XG4gICAgICAgICAgICB9KS50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdG9yZWQgcmVzdGF1cmFudHMsIG5vdyByZXR1cm5pbmcnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oZmluYWxSZXNwb25zZSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZmluYWxSZXNwb25zZSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShmaW5hbFJlc3BvbnNlKSk7XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFwiRXJyb3IgZmV0Y2hpbmcgZGF0YVwiLCB7c3RhdHVzOiA1MDB9KTtcbiAgICB9KVxuICApXG59XG5cbmNvbnN0IGhhbmRsZVJldmlld3NFdmVudHMgPSAoZXZlbnQsIGlkKSA9PiB7XG4gIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgIHJldHVybiBkYlxuICAgICAgICAudHJhbnNhY3Rpb24oJ3Jldmlld3MnKVxuICAgICAgICAub2JqZWN0U3RvcmUoJ3Jldmlld3MnKVxuICAgICAgICAuaW5kZXgoXCJyZXN0YXVyYW50X2lkXCIpXG4gICAgICAgIC5nZXRBbGwoaWQpO1xuICAgIH0pLnRoZW4oIGRhdGEgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3NlcnZpY2V3b3JrZXIgaGFuZGxlIHJldmlld3MnKTtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgcmV0dXJuIChkYXRhLmxlbmd0aCAmJiBkYXRhKSB8fCBmZXRjaChldmVudC5yZXF1ZXN0KVxuICAgICAgICAudGhlbihmZXRjaFJlc3BvbnNlID0+IHtcbiAgICAgICAgICByZXR1cm4gZmV0Y2hSZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXZpZXdzID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygndXNpbmcgc2VydmljZXdvcmtlciBmZXRjaCcpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGFydGluZyB0byBzdG9yZSByZXZpZXdzJyk7XG4gICAgICAgICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgICAgICAgIGxldCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXdzJywgJ3JlYWR3cml0ZScpXG4gICAgICAgICAgICBsZXQgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmV2aWV3cycpO1xuICAgICAgICAgICAgcmV2aWV3cy5mb3JFYWNoKGZ1bmN0aW9uKHJldmlldykge1xuICAgICAgICAgICAgICBzdG9yZS5wdXQocmV2aWV3KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHR4LmRvbmU7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbiggKCkgPT4gcmV2aWV3cylcbiAgICAgICAgfSlcbiAgICB9KS50aGVuKGZpbmFsUmVzcG9uc2UgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShmaW5hbFJlc3BvbnNlKSk7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShcIkVycm9yIGZldGNoaW5nIGRhdGFcIiwge3N0YXR1czogNTAwfSk7XG4gICAgfSkpXG59XG5cbmNvbnN0IGhhbmRsZU5vbkFKQVhFdmVudCA9IChldmVudCkgPT4ge1xuICAvLyBDaGVjayBpZiB0aGUgSFRNTCByZXF1ZXN0IGhhcyBwcmV2aW91c2x5IGJlZW4gY2FjaGVkLiBJZiBzbywgcmV0dXJuIHRoZVxuICAvLyByZXNwb25zZSBmcm9tIHRoZSBjYWNoZS4gSWYgbm90LCBmZXRjaCB0aGUgcmVxdWVzdCwgY2FjaGUgaXQsIGFuZCB0aGVuIHJldHVyblxuICAvLyBpdC5cbiAgZXZlbnQucmVzcG9uZFdpdGgoXG4gICAgY2FjaGVzLm1hdGNoKGV2ZW50LnJlcXVlc3QpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8IGZldGNoKGV2ZW50LnJlcXVlc3QpLnRoZW4oZmV0Y2hSZXNwb25zZSA9PiB7XG4gICAgICAgIGxldCB1c2VDYWNoZSA9IGlzSW1hZ2VVUkwoZXZlbnQucmVxdWVzdC51cmwpID8gIElNQUdFU19DQUNIRSA6IFNUQVRJQ19DQUNIRTtcbiAgICAgICAgcmV0dXJuIGNhY2hlc1xuICAgICAgICAgIC5vcGVuKHVzZUNhY2hlKVxuICAgICAgICAgIC50aGVuKGNhY2hlID0+IHtcbiAgICAgICAgICAgIGNhY2hlLnB1dChldmVudC5yZXF1ZXN0LCBmZXRjaFJlc3BvbnNlLmNsb25lKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGZldGNoUmVzcG9uc2U7XG4gICAgICAgICAgfSk7XG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoXCJBcHBsaWNhdGlvbiBpcyBub3QgY29ubmVjdGVkIHRvIHRoZSBpbnRlcm5ldFwiLCB7XG4gICAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgICAgc3RhdHVzVGV4dDogXCJBcHBsaWNhdGlvbiBpcyBub3QgY29ubmVjdGVkIHRvIHRoZSBpbnRlcm5ldFwiXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSlcbiAgKTtcblxuICAvLyBVcGRhdGVzIHRoZSBkYXRhIGZyb20gdGhlIG5ldHdvcmsgdG8gdXNlIG9uIG5leHQgcmVxdWVzdC5cbiAgZXZlbnQud2FpdFVudGlsKHVwZGF0ZShldmVudC5yZXF1ZXN0KSk7XG59XG5cbmNvbnN0IHVwZGF0ZSA9IChyZXF1ZXN0KSA9PiB7XG4gIGxldCB1c2VDYWNoZSA9IGlzSW1hZ2VVUkwocmVxdWVzdC51cmwpID8gIElNQUdFU19DQUNIRSA6IFNUQVRJQ19DQUNIRTtcbiAgcmV0dXJuIGNhY2hlcy5vcGVuKHVzZUNhY2hlKS50aGVuKGNhY2hlID0+IHtcbiAgICByZXR1cm4gZmV0Y2gocmVxdWVzdCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICByZXR1cm4gY2FjaGUucHV0KHJlcXVlc3QsIHJlc3BvbnNlKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvKipcbiAqIENvbW1vbiBkYXRhYmFzZSBoZWxwZXIgZnVuY3Rpb25zLlxuICovXG5pbXBvcnQgeyBvcGVuREIsIGRlbGV0ZURCLCB3cmFwLCB1bndyYXAgfSBmcm9tICdpZGInO1xuaW1wb3J0IHtkYlByb21pc2V9IGZyb20gJy4uL3N3LmpzJztcblxuLy8gY29uc3QgZGJQcm9taXNlID0gb3BlbkRCKCdyci1kYicsIDMsIHtcbi8vICAgdXBncmFkZShkYiwgb2xkVmVyc2lvbikge1xuLy8gICAgIHN3aXRjaCAob2xkVmVyc2lvbikge1xuLy8gICAgICAgY2FzZSAwOlxuLy8gICAgICAgICBjb25zdCBzdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycsIHsga2V5UGF0aDogJ2lkJywgfSk7XG4vLyAgICAgICAgIHN0b3JlLmNyZWF0ZUluZGV4KCdpZCcsICdpZCcpO1xuLy8gICAgICAgY2FzZSAxOlxuLy8gICAgICAgICBjb25zdCByZXZpZXdzU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgncmV2aWV3cycsIHtcbi8vICAgICAgICAgICBrZXlQYXRoOiAnaWQnLFxuLy8gICAgICAgICB9KTtcbi8vICAgICAgICAgcmV2aWV3c1N0b3JlLmNyZWF0ZUluZGV4KFwicmVzdGF1cmFudF9pZFwiLCBcInJlc3RhdXJhbnRfaWRcIik7XG4vLyAgICAgICBjYXNlIDI6XG4vLyAgICAgICAgIGNvbnN0IHBlbmRpbmdTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwZW5kaW5nJywge1xuLy8gICAgICAgICAgIGtleVBhdGg6ICdpZCcsXG4vLyAgICAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuLy8gICAgICAgICB9KVxuLy8gICAgIH1cbi8vICAgfVxuLy8gfSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERCSGVscGVyIHtcblxuICAvKipcbiAgICogRGF0YWJhc2UgVVJMLlxuICAgKiBDaGFuZ2UgdGhpcyB0byByZXN0YXVyYW50cy5qc29uIGZpbGUgbG9jYXRpb24gb24geW91ciBzZXJ2ZXIuXG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEFCQVNFX1VSTCgpIHtcbiAgICBjb25zdCBwb3J0ID0gMTMzNy8vIENoYW5nZSB0aGlzIHRvIHlvdXIgc2VydmVyIHBvcnRcbiAgICByZXR1cm4gYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fS9yZXN0YXVyYW50c2A7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERBVEFCQVNFX1JFVklFV1NfVVJMKCkge1xuICAgIGNvbnN0IHBvcnQgPSAxMzM3IC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgc2VydmVyIHBvcnRcbiAgICByZXR1cm4gYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fS9yZXZpZXdzYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbGwgcmVzdGF1cmFudHMuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50cyhjYWxsYmFjaykge1xuICAgIGZldGNoKERCSGVscGVyLkRBVEFCQVNFX1VSTCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24ocmVzdGF1cmFudHMpIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdGF1cmFudHMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZmV0Y2hSZXZpZXdzKCByZXN0YXVyYW50X2lkLCBjYWxsYmFjaykge1xuICAgIGxldCBmZXRjaFVSTCA9IERCSGVscGVyLkRBVEFCQVNFX1JFVklFV1NfVVJMICsgXCIvP3Jlc3RhdXJhbnRfaWQ9XCIgKyByZXN0YXVyYW50X2lkO1xuICAgIGZldGNoKGZldGNoVVJMKS50aGVuKCByZXNwb25zZSA9PiB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pLnRoZW4ocmV2aWV3cyA9PiB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJldmlld3MpO1xuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUlkKGlkLCBjYWxsYmFjaykge1xuICAgIC8vIGZldGNoIGFsbCByZXN0YXVyYW50cyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZXN0YXVyYW50ID0gcmVzdGF1cmFudHMuZmluZChyID0+IHIuaWQgPT0gaWQpO1xuICAgICAgICBpZiAocmVzdGF1cmFudCkgeyAvLyBHb3QgdGhlIHJlc3RhdXJhbnRcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50KTtcbiAgICAgICAgfSBlbHNlIHsgLy8gUmVzdGF1cmFudCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZGF0YWJhc2VcbiAgICAgICAgICBjYWxsYmFjaygnUmVzdGF1cmFudCBkb2VzIG5vdCBleGlzdCcsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIHR5cGUgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lKGN1aXNpbmUsIGNhbGxiYWNrKSB7XG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzICB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gY3Vpc2luZSB0eXBlXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBuZWlnaGJvcmhvb2Qgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlOZWlnaGJvcmhvb2QobmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gbmVpZ2hib3Job29kXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgYW5kIGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxuICAgKi9cbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZChjdWlzaW5lLCBuZWlnaGJvcmhvb2QsIGNhbGxiYWNrKSB7XG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHJlc3VsdHMgPSByZXN0YXVyYW50c1xuICAgICAgICBpZiAoY3Vpc2luZSAhPSAnYWxsJykgeyAvLyBmaWx0ZXIgYnkgY3Vpc2luZVxuICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZWlnaGJvcmhvb2QgIT0gJ2FsbCcpIHsgLy8gZmlsdGVyIGJ5IG5laWdoYm9yaG9vZFxuICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIG5laWdoYm9yaG9vZHMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hOZWlnaGJvcmhvb2RzKGNhbGxiYWNrKSB7XG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gR2V0IGFsbCBuZWlnaGJvcmhvb2RzIGZyb20gYWxsIHJlc3RhdXJhbnRzXG4gICAgICAgIGNvbnN0IG5laWdoYm9yaG9vZHMgPSByZXN0YXVyYW50cy5tYXAoKHYsIGkpID0+IHJlc3RhdXJhbnRzW2ldLm5laWdoYm9yaG9vZClcbiAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXMgZnJvbSBuZWlnaGJvcmhvb2RzXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzLmZpbHRlcigodiwgaSkgPT4gbmVpZ2hib3Job29kcy5pbmRleE9mKHYpID09IGkpXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZU5laWdoYm9yaG9vZHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGFsbCBjdWlzaW5lcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cbiAgICovXG4gIHN0YXRpYyBmZXRjaEN1aXNpbmVzKGNhbGxiYWNrKSB7XG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gR2V0IGFsbCBjdWlzaW5lcyBmcm9tIGFsbCByZXN0YXVyYW50c1xuICAgICAgICBjb25zdCBjdWlzaW5lcyA9IHJlc3RhdXJhbnRzLm1hcCgodiwgaSkgPT4gcmVzdGF1cmFudHNbaV0uY3Vpc2luZV90eXBlKVxuICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIGN1aXNpbmVzXG4gICAgICAgIGNvbnN0IHVuaXF1ZUN1aXNpbmVzID0gY3Vpc2luZXMuZmlsdGVyKCh2LCBpKSA9PiBjdWlzaW5lcy5pbmRleE9mKHYpID09IGkpXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZUN1aXNpbmVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0YXVyYW50IHBhZ2UgVVJMLlxuICAgKi9cbiAgc3RhdGljIHVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgIHJldHVybiAoYC9yZXN0YXVyYW50Lmh0bWw/aWQ9JHtyZXN0YXVyYW50LmlkfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RhdXJhbnQgaW1hZ2UgVVJMLlxuICAgKi9cbiAgc3RhdGljIGltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XG4gICAgaWYoIXJlc3RhdXJhbnQucGhvdG9ncmFwaCkge1xuICAgICAgcmV0dXJuIChgL2ltZy8ke3Jlc3RhdXJhbnQuaWR9LmpwZ2ApXG4gICAgfVxuICAgIHJldHVybiAoYC9pbWcvJHtyZXN0YXVyYW50LnBob3RvZ3JhcGh9LmpwZ2ApO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcCBtYXJrZXIgZm9yIGEgcmVzdGF1cmFudC5cbiAgICovXG4gIHN0YXRpYyBtYXBNYXJrZXJGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIG1hcCkge1xuICAgIC8vIGh0dHBzOi8vbGVhZmxldGpzLmNvbS9yZWZlcmVuY2UtMS4zLjAuaHRtbCNtYXJrZXJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgTC5tYXJrZXIoW3Jlc3RhdXJhbnQubGF0bG5nLmxhdCwgcmVzdGF1cmFudC5sYXRsbmcubG5nXSxcbiAgICAgIHt0aXRsZTogcmVzdGF1cmFudC5uYW1lLFxuICAgICAgYWx0OiByZXN0YXVyYW50Lm5hbWUsXG4gICAgICB1cmw6IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudClcbiAgICAgIH0pXG4gICAgICBtYXJrZXIuYWRkVG8obmV3TWFwKTtcbiAgICByZXR1cm4gbWFya2VyO1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUNhY2hlZFJlc3RhdXJhbnRSZXZpZXcoZm9ybURhdGEpIHtcbiAgICBjb25zb2xlLmxvZygndXBkYXRpbmcgY2FjaGUgZm9yIG5ldyByZXZpZXcnLCBmb3JtRGF0YSk7XG4gICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKCBkYiA9PiB7XG4gICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXdzJywgJ3JlYWR3cml0ZScpO1xuICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmV2aWV3cycpO1xuICAgICAgc3RvcmUucHV0KGZvcm1EYXRhKTtcbiAgICAgIGNvbnNvbGUubG9nKCdzdWNjZXNzZnVsbHkgcHV0IHJldmlldyBpbiBzdG9yZScpO1xuICAgICAgcmV0dXJuIHR4LmRvbmU7XG4gICAgfSlcbiAgfVxuXG4vKipcbiogR3JhYiB0aGUgb3JpZ2luYWwgcmV2aWV3IGZyb20gdGhlIGRiIGFuZCByZXBsYWNlIHdpdGggZWRpdGVkIHJldmlld1xuKi9cbiAgc3RhdGljIGVkaXRSZXZpZXcoZm9ybURhdGEsIGVkaXRpbmcpIHtcbiAgICByZXR1cm4gZGJQcm9taXNlLnRoZW4oZGIgPT4ge1xuICAgICAgbGV0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jldmlld3MnKTtcbiAgICAgIGxldCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXZpZXdzJyk7XG4gICAgICByZXR1cm4gc3RvcmUuZ2V0KGVkaXRpbmcuaWQpO1xuICAgIH0pLnRoZW4oIHJldmlldyA9PiB7XG4gICAgICByZXR1cm4gZGJQcm9taXNlLnRoZW4oZGIgPT4ge1xuICAgICAgICBsZXQgdHggPSBkYi50cmFuc2FjdGlvbigncmV2aWV3cycsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgbGV0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jldmlld3MnKTtcbiAgICAgICAgbGV0IG5ld1JldmlldyA9IE9iamVjdC5hc3NpZ24oe30sIHJldmlldywgZm9ybURhdGEpO1xuICAgICAgICBzdG9yZS5wdXQobmV3UmV2aWV3KTtcbiAgICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlO1xuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBzdWJtaXRSZXZpZXcoZm9ybURhdGEsIGVkaXRpbmcpIHtcbiAgICBjb25zb2xlLmxvZyhlZGl0aW5nKTtcbiAgICBjb25zdCBtZXRob2QgPSBlZGl0aW5nID8gXCJQVVRcIiA6IFwiUE9TVFwiO1xuICAgIGNvbnN0IHVybCA9IGVkaXRpbmcgPyBgJHtEQkhlbHBlci5EQVRBQkFTRV9SRVZJRVdTX1VSTH0vJHtlZGl0aW5nLmlkfWAgOiBEQkhlbHBlci5EQVRBQkFTRV9SRVZJRVdTX1VSTDtcbiAgICBpZiAoZWRpdGluZykge1xuICAgICAgREJIZWxwZXIuZWRpdFJldmlldyhmb3JtRGF0YSwgZWRpdGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERCSGVscGVyLnVwZGF0ZUNhY2hlZFJlc3RhdXJhbnRSZXZpZXcoZm9ybURhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gREJIZWxwZXIuYWRkUGVuZGluZ1JlcXVlc3RUb1F1ZSh1cmwsIG1ldGhvZCwgZm9ybURhdGEpO1xuICB9XG5cbiAgc3RhdGljIGFkZFBlbmRpbmdSZXF1ZXN0VG9RdWUodXJsLCBtZXRob2QsIGZvcm1EYXRhKSB7XG4gICAgLy9vcGVuIGRhdGFiYXNlIGFuZCBhZGQgcmVxdWVzdCBkZXRhaWxzIHRvIHRoZSBwZW5kaW5nIHN0b3JlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3BlbmRpbmcnLCAncmVhZHdyaXRlJyk7XG4gICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdwZW5kaW5nJyk7XG4gICAgICByZXR1cm4gc3RvcmUucHV0KHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVybCxcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgRXJyb3IgcHV0dGluZyBkYXRhIGluIHBlbmRpbmcgZGI6ICR7ZXJyb3J9YCk7XG4gICAgfSkudGhlbihEQkhlbHBlci5uZXh0UGVuZGluZygoZXJyb3IsIGpzb24pID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmUoanNvbik7XG4gICAgfSkpO1xuICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBuZXh0UGVuZGluZyhjYWxsYmFjaykge1xuICAgIERCSGVscGVyLmF0dGVtcHRDb21taXRQZW5kaW5nKERCSGVscGVyLm5leHRQZW5kaW5nKS50aGVuKGogPT4ge1xuICAgICAgY29uc29sZS5sb2coaik7XG4gICAgICBjYWxsYmFjayhudWxsLCBqKTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGF0dGVtcHRDb21taXRQZW5kaW5nKGNhbGxiYWNrKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBwZW5kaW5nIGl0ZW1zIHVudGlsIHRoZXJlIGlzIGEgbmV0d29yayBmYWlsdXJlXG4gICAgbGV0IHVybDtcbiAgICBsZXQgbWV0aG9kO1xuICAgIGxldCBib2R5O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBkYlByb21pc2UudGhlbihkYiA9PiB7XG4gICAgICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkRCIG5vdCBhdmFpbGFibGVcIik7XG4gICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbigncGVuZGluZycsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncGVuZGluZycpO1xuICAgICAgICBzdG9yZS5vcGVuQ3Vyc29yKCkudGhlbiggY3Vyc29yID0+IHtcbiAgICAgICAgICBpZiAoIWN1cnNvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ25vIG1vcmUgY3Vyc29ycycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN1cnNvci52YWx1ZTtcbiAgICAgICAgICB1cmwgPSB2YWx1ZS5kYXRhLnVybDtcbiAgICAgICAgICBtZXRob2QgPSB2YWx1ZS5kYXRhLm1ldGhvZDtcbiAgICAgICAgICBib2R5ID0gdmFsdWUuZGF0YS5mb3JtRGF0YTtcblxuICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBwYXJhbWV0ZXIgdGhlbiB3ZSdyZSBvbiBhIGJhZCByZWNvcmQgdGhhdCBzaG91bGQgYmUgdG9zc2VkXG4gICAgICAgICAgLy8gYW5kIHRoZW4gbW92ZSBvblxuICAgICAgICAgIGlmICgoIXVybCB8fCAhbWV0aG9kKSB8fCAobWV0aG9kID09PSBcIlBPU1RcIiAmJiAhYm9keSkpIHtcbiAgICAgICAgICAgIGN1cnNvclxuICAgICAgICAgICAgICAuZGVsZXRlKClcbiAgICAgICAgICAgICAgLnRoZW4oY2FsbGJhY2spO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsZXRlZCBhIGJhZCBjdXJzb3InKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2RcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmZXRjaCh1cmwsIHByb3BlcnRpZXMpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rICYmICFyZXNwb25zZS5yZWRpcmVjdGVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIHRoZSByZXNwb25zZSBhbmQgd2UgYXJlIG9mZmxpbmUnKTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oanNvbiA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGRlbHR4ID0gZGIudHJhbnNhY3Rpb24oJ3BlbmRpbmcnLCAncmVhZHdyaXRlJyk7XG4gICAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gZGVsdHgub2JqZWN0U3RvcmUoJ3BlbmRpbmcnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlLm9wZW5DdXJzb3IoKVxuICAgICAgICAgICAgICAudGhlbiggY3Vyc29yID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3Vyc29yLmRlbGV0ZSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coY3Vyc29yLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWxldGVkIGl0ZW0gZnJvbSBwZW5kaW5nIHN0b3JlJyk7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coanNvbik7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShqc29uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBuZXR3b3JrJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgc3luY1Jlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgICAgIGxldCB1cmwgPSBgaHR0cDovL2xvY2FsaG9zdDoxMzM3L3Jlc3RhdXJhbnRzLyR7cmVzdGF1cmFudC5pZH0vP2lzX2Zhdm9yaXRlPSR7cmVzdGF1cmFudC5pc19mYXZvcml0ZX1gO1xuICAgICAgIGxldCBtZXRob2QgPSAnUFVUJztcbiAgICAgICBEQkhlbHBlci5hZGRQZW5kaW5nUmVxdWVzdFRvUXVlKHVybCwgbWV0aG9kKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgdXBkYXRpbmcgcmVzdGF1cmFudCBiYWNrZW5kIGRhdGEuLi4nLCBlcnJvciwgcmVzdGF1cmFudCk7XG4gICAgICAgfSk7XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlUmVzdGF1cmFudEluREIobmV3X3Jlc3RhdXJhbnQpIHtcbiAgICByZXR1cm4gZGJQcm9taXNlLnRoZW4oZnVuY3Rpb24oZGIpe1xuICAgICAgbGV0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnRzJywgJ3JlYWR3cml0ZScpO1xuICAgICAgbGV0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICBzdG9yZS5wdXQobmV3X3Jlc3RhdXJhbnQpO1xuICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlXG4gICAgfSkudGhlbihmdW5jdGlvbigpe1xuICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3X3Jlc3RhdXJhbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIHRvZ2dsZUZhdkJ0bihyZXN0YXVyYW50X2lkKSB7XG4gICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKCBkYiA9PiB7XG4gICAgICBsZXQgdHggPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnKTtcbiAgICAgIGxldCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpO1xuICAgICAgcmV0dXJuIHN0b3JlLmdldChyZXN0YXVyYW50X2lkKTtcbiAgICB9KS50aGVuKCByZXN0YXVyYW50ID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHJlc3RhdXJhbnQpO1xuICAgICAgY29uc3QgbmV3X3Jlc3RhdXJhbnQgPSBPYmplY3QuYXNzaWduKHt9LCByZXN0YXVyYW50KTtcbiAgICAgIG5ld19yZXN0YXVyYW50LmlzX2Zhdm9yaXRlID0gKHJlc3RhdXJhbnQuaXNfZmF2b3JpdGUgPT09ICd0cnVlJyB8fCByZXN0YXVyYW50LmlzX2Zhdm9yaXRlID09PSB0cnVlKSA/XG4gICAgICAnZmFsc2UnIDogJ3RydWUnO1xuICAgICAgREJIZWxwZXIuc3luY1Jlc3RhdXJhbnQobmV3X3Jlc3RhdXJhbnQpO1xuICAgICAgcmV0dXJuIERCSGVscGVyLnVwZGF0ZVJlc3RhdXJhbnRJbkRCKG5ld19yZXN0YXVyYW50KTtcbiAgICB9KS50aGVuKCBuZXdfcmVzdGF1cmFudCA9PiB7XG4gICAgICBjb25zdCBmYXZCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZmF2LWJ0bi0ke25ld19yZXN0YXVyYW50LmlkfWApO1xuICAgICAgaWYobmV3X3Jlc3RhdXJhbnQuaXNfZmF2b3JpdGUgPT09ICd0cnVlJyB8fCBuZXdfcmVzdGF1cmFudC5pc19mYXZvcml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBmYXZCdG4uaW5uZXJIVE1MID0gJ0Zhdm9yaXRlZCEnO1xuICAgICAgICBmYXZCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICdob3RwaW5rJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZhdkJ0bi5pbm5lckhUTUwgPSAnQWRkIHRvIGZhdm9yaXRlJztcbiAgICAgICAgZmF2QnRuLnN0eWxlLmJhY2tncm91bmQgPSAnZ3JleSc7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVDYWNoZWRSZXZpZXcocmV2aWV3X2lkKSB7XG4gICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgIGxldCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXdzJywgJ3JlYWR3cml0ZScpXG4gICAgICBsZXQgc3RvcmUgPSAgdHgub2JqZWN0U3RvcmUoJ3Jldmlld3MnKTtcbiAgICAgIHN0b3JlLmRlbGV0ZShyZXZpZXdfaWQpO1xuICAgICAgY29uc29sZS5sb2coJ2RlbGV0ZWQgcmV2aWV3IGZyb20gaWRiJyk7XG4gICAgICByZXR1cm4gdHguY29tcGxldGU7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2Vycm9yIGRlbGV0aW5nIHJldmlldzogJywgZXJyb3IpO1xuICAgIH0pO1xuICB9XG5cblxuICBzdGF0aWMgZGVsZXRlUmV2aWV3KHJldmlld19pZCkge1xuICAgIGNvbnN0IHVybCA9IGAke0RCSGVscGVyLkRBVEFCQVNFX1JFVklFV1NfVVJMfS8ke3Jldmlld19pZH1gO1xuICAgIGNvbnNvbGUubG9nKHVybCk7XG4gICAgY29uc3QgbWV0aG9kID0gXCJERUxFVEVcIjtcbiAgICBEQkhlbHBlci5kZWxldGVDYWNoZWRSZXZpZXcocmV2aWV3X2lkKTtcbiAgICByZXR1cm4gREJIZWxwZXIuYWRkUGVuZGluZ1JlcXVlc3RUb1F1ZSh1cmwsIG1ldGhvZCk7XG4gIH1cblxuICBzdGF0aWMgZGVsZXRlVGVtcFJldmlldyh0ZW1wX2lkKSB7XG4gICAgZGJQcm9taXNlLnRoZW4oZGIgPT4ge1xuICAgICAgbGV0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jldmlld3MnLCAncmVhZHdyaXRlJylcbiAgICAgIGxldCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXZpZXdzJyk7XG4gICAgICBzdG9yZS5kZWxldGUodGVtcF9pZCk7XG4gICAgICBjb25zb2xlLmxvZygnZGVsZXRlZCBvbGR2ZXJzaW9uIG9mIHJldmlldyB3aXRoIG9sZCBpZCcpO1xuICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlO1xuICAgIH0pLmNhdGNoKCBlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnZXJyb3IgZGVsZXRpbmcgdGVtcCByZXZpZXc6ICcsIGVycm9yKTtcbiAgICB9KVxuICB9XG59XG5cblxuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuNScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKGMgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcclxubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xyXG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cclxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XHJcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XHJcbiAgICAgICAgKGlkYlByb3h5YWJsZVR5cGVzID0gW1xyXG4gICAgICAgICAgICBJREJEYXRhYmFzZSxcclxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXHJcbiAgICAgICAgICAgIElEQkluZGV4LFxyXG4gICAgICAgICAgICBJREJDdXJzb3IsXHJcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxyXG4gICAgICAgIF0pKTtcclxufVxyXG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cclxuZnVuY3Rpb24gZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKSB7XHJcbiAgICByZXR1cm4gKGN1cnNvckFkdmFuY2VNZXRob2RzIHx8XHJcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xyXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmFkdmFuY2UsXHJcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXHJcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxyXG4gICAgICAgIF0pKTtcclxufVxyXG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xyXG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcclxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xyXG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XHJcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xyXG4gICAgICAgICAgICB1bmxpc3RlbigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcclxuICAgIH0pO1xyXG4gICAgcHJvbWlzZVxyXG4gICAgICAgIC50aGVuKHZhbHVlID0+IHtcclxuICAgICAgICAvLyBTaW5jZSBjdXJzb3JpbmcgcmV1c2VzIHRoZSBJREJSZXF1ZXN0ICgqc2lnaCopLCB3ZSBjYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsXHJcbiAgICAgICAgLy8gKHNlZSB3cmFwRnVuY3Rpb24pLlxyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQkN1cnNvcikge1xyXG4gICAgICAgICAgICBjdXJzb3JSZXF1ZXN0TWFwLnNldCh2YWx1ZSwgcmVxdWVzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENhdGNoaW5nIHRvIGF2b2lkIFwiVW5jYXVnaHQgUHJvbWlzZSBleGNlcHRpb25zXCJcclxuICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICAvLyBUaGlzIG1hcHBpbmcgZXhpc3RzIGluIHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBidXQgZG9lc24ndCBkb2Vzbid0IGV4aXN0IGluIHRyYW5zZm9ybUNhY2hlLiBUaGlzXHJcbiAgICAvLyBpcyBiZWNhdXNlIHdlIGNyZWF0ZSBtYW55IHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdC5cclxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XHJcbiAgICByZXR1cm4gcHJvbWlzZTtcclxufVxyXG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcclxuICAgIC8vIEVhcmx5IGJhaWwgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIGEgZG9uZSBwcm9taXNlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxyXG4gICAgaWYgKHRyYW5zYWN0aW9uRG9uZU1hcC5oYXModHgpKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xyXG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcclxuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB1bmxpc3RlbigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvcik7XHJcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcclxuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcclxuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcclxuICAgIH0pO1xyXG4gICAgLy8gQ2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cclxuICAgIHRyYW5zYWN0aW9uRG9uZU1hcC5zZXQodHgsIGRvbmUpO1xyXG59XHJcbmxldCBpZGJQcm94eVRyYXBzID0ge1xyXG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcclxuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgdHJhbnNhY3Rpb24uZG9uZS5cclxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdkb25lJylcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XHJcbiAgICAgICAgICAgIC8vIFBvbHlmaWxsIGZvciBvYmplY3RTdG9yZU5hbWVzIGJlY2F1c2Ugb2YgRWRnZS5cclxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvYmplY3RTdG9yZU5hbWVzJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5vYmplY3RTdG9yZU5hbWVzIHx8IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5nZXQodGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBNYWtlIHR4LnN0b3JlIHJldHVybiB0aGUgb25seSBzdG9yZSBpbiB0aGUgdHJhbnNhY3Rpb24sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgbWFueS5cclxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxyXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldFtwcm9wXSk7XHJcbiAgICB9LFxyXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xyXG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbiAmJlxyXG4gICAgICAgICAgICAocHJvcCA9PT0gJ2RvbmUnIHx8IHByb3AgPT09ICdzdG9yZScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQ7XHJcbiAgICB9LFxyXG59O1xyXG5mdW5jdGlvbiBhZGRUcmFwcyhjYWxsYmFjaykge1xyXG4gICAgaWRiUHJveHlUcmFwcyA9IGNhbGxiYWNrKGlkYlByb3h5VHJhcHMpO1xyXG59XHJcbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XHJcbiAgICAvLyBEdWUgdG8gZXhwZWN0ZWQgb2JqZWN0IGVxdWFsaXR5ICh3aGljaCBpcyBlbmZvcmNlZCBieSB0aGUgY2FjaGluZyBpbiBgd3JhcGApLCB3ZVxyXG4gICAgLy8gb25seSBjcmVhdGUgb25lIG5ldyBmdW5jIHBlciBmdW5jLlxyXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXHJcbiAgICBpZiAoZnVuYyA9PT0gSURCRGF0YWJhc2UucHJvdG90eXBlLnRyYW5zYWN0aW9uICYmXHJcbiAgICAgICAgISgnb2JqZWN0U3RvcmVOYW1lcycgaW4gSURCVHJhbnNhY3Rpb24ucHJvdG90eXBlKSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xyXG4gICAgICAgICAgICBjb25zdCB0eCA9IGZ1bmMuY2FsbCh1bndyYXAodGhpcyksIHN0b3JlTmFtZXMsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuc2V0KHR4LCBzdG9yZU5hbWVzLnNvcnQgPyBzdG9yZU5hbWVzLnNvcnQoKSA6IFtzdG9yZU5hbWVzXSk7XHJcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxyXG4gICAgLy8gSURCLCB5b3UgYWR2YW5jZSB0aGUgY3Vyc29yIGFuZCB3YWl0IGZvciBhIG5ldyAnc3VjY2Vzcycgb24gdGhlIElEQlJlcXVlc3QgdGhhdCBnYXZlIHlvdSB0aGVcclxuICAgIC8vIGN1cnNvci4gSXQncyBraW5kYSBsaWtlIGEgcHJvbWlzZSB0aGF0IGNhbiByZXNvbHZlIHdpdGggbWFueSB2YWx1ZXMuIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlXHJcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXHJcbiAgICAvLyB1bmRlZmluZWQgaWYgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIGhhcyBiZWVuIHJlYWNoZWQuXHJcbiAgICBpZiAoZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKS5pbmNsdWRlcyhmdW5jKSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXHJcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXHJcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHdyYXAoY3Vyc29yUmVxdWVzdE1hcC5nZXQodGhpcykpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXHJcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cclxuICAgICAgICByZXR1cm4gd3JhcChmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncykpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xyXG4gICAgLy8gVGhpcyBkb2Vzbid0IHJldHVybiwgaXQganVzdCBjcmVhdGVzIGEgJ2RvbmUnIHByb21pc2UgZm9yIHRoZSB0cmFuc2FjdGlvbixcclxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXHJcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcclxuICAgICAgICBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odmFsdWUpO1xyXG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xyXG4gICAgLy8gUmV0dXJuIHRoZSBzYW1lIHZhbHVlIGJhY2sgaWYgd2UncmUgbm90IGdvaW5nIHRvIHRyYW5zZm9ybSBpdC5cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XHJcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcclxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlJlcXVlc3QpXHJcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xyXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxyXG4gICAgLy8gVGhpcyBpcyBmYXN0ZXIsIGJ1dCBpdCBhbHNvIHByb3ZpZGVzIG9iamVjdCBlcXVhbGl0eS5cclxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxyXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xyXG4gICAgY29uc3QgbmV3VmFsdWUgPSB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKTtcclxuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxyXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXHJcbiAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XHJcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xyXG59XHJcbmNvbnN0IHVud3JhcCA9ICh2YWx1ZSkgPT4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG5cbmV4cG9ydCB7IHdyYXAgYXMgYSwgYWRkVHJhcHMgYXMgYiwgaW5zdGFuY2VPZkFueSBhcyBjLCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgZCwgdW53cmFwIGFzIGUgfTtcbiIsImltcG9ydCB7IGEgYXMgd3JhcCwgYiBhcyBhZGRUcmFwcyB9IGZyb20gJy4vY2h1bmsuanMnO1xuZXhwb3J0IHsgZSBhcyB1bndyYXAsIGEgYXMgd3JhcCB9IGZyb20gJy4vY2h1bmsuanMnO1xuXG4vKipcclxuICogT3BlbiBhIGRhdGFiYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cclxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXHJcbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXHJcbiAqL1xyXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZyB9ID0ge30pIHtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcclxuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcclxuICAgIGlmICh1cGdyYWRlKSB7XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChibG9ja2VkKVxyXG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsICgpID0+IGJsb2NrZWQoKSk7XHJcbiAgICBpZiAoYmxvY2tpbmcpIHtcclxuICAgICAgICBvcGVuUHJvbWlzZS50aGVuKGRiID0+IGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCBibG9ja2luZykpLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3BlblByb21pc2U7XHJcbn1cclxuLyoqXHJcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cclxuICovXHJcbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UobmFtZSk7XHJcbiAgICBpZiAoYmxvY2tlZClcclxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoKSA9PiBibG9ja2VkKCkpO1xyXG4gICAgcmV0dXJuIHdyYXAocmVxdWVzdCkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xyXG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XHJcbmNvbnN0IHdyaXRlTWV0aG9kcyA9IFsncHV0JywgJ2FkZCcsICdkZWxldGUnLCAnY2xlYXInXTtcclxuY29uc3QgY2FjaGVkTWV0aG9kcyA9IG5ldyBNYXAoKTtcclxuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xyXG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSURCRGF0YWJhc2UgJiZcclxuICAgICAgICAhKHByb3AgaW4gdGFyZ2V0KSAmJlxyXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApO1xyXG4gICAgY29uc3QgdGFyZ2V0RnVuY05hbWUgPSBwcm9wLnJlcGxhY2UoL0Zyb21JbmRleCQvLCAnJyk7XHJcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xyXG4gICAgY29uc3QgaXNXcml0ZSA9IHdyaXRlTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSk7XHJcbiAgICBpZiAoXHJcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXHJcbiAgICAhKHRhcmdldEZ1bmNOYW1lIGluICh1c2VJbmRleCA/IElEQkluZGV4IDogSURCT2JqZWN0U3RvcmUpLnByb3RvdHlwZSkgfHxcclxuICAgICAgICAhKGlzV3JpdGUgfHwgcmVhZE1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jIGZ1bmN0aW9uIChzdG9yZU5hbWUsIC4uLmFyZ3MpIHtcclxuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcclxuICAgICAgICBjb25zdCB0eCA9IHRoaXMudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiAncmVhZG9ubHknKTtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0gdHguc3RvcmU7XHJcbiAgICAgICAgaWYgKHVzZUluZGV4KVxyXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuaW5kZXgoYXJncy5zaGlmdCgpKTtcclxuICAgICAgICBjb25zdCByZXR1cm5WYWwgPSB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpO1xyXG4gICAgICAgIGlmIChpc1dyaXRlKVxyXG4gICAgICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgICAgIHJldHVybiByZXR1cm5WYWw7XHJcbiAgICB9O1xyXG4gICAgY2FjaGVkTWV0aG9kcy5zZXQocHJvcCwgbWV0aG9kKTtcclxuICAgIHJldHVybiBtZXRob2Q7XHJcbn1cclxuYWRkVHJhcHMob2xkVHJhcHMgPT4gKHtcclxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcclxuICAgIGhhczogKHRhcmdldCwgcHJvcCkgPT4gISFnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKSxcclxufSkpO1xuXG5leHBvcnQgeyBvcGVuREIsIGRlbGV0ZURCIH07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoKSB7XG5cbiAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignL3NlcnZpY2V3b3JrZXIuYnVuZGxlLmpzJykudGhlbihyZWdpc3RyYXRpb24gPT4ge1xuICAgICAgIGNvbnNvbGUubG9nKCdTVyByZWdpc3RlcmVkOiAnLCByZWdpc3RyYXRpb24pO1xuICAgICB9KS5jYXRjaChyZWdpc3RyYXRpb25FcnJvciA9PiB7XG4gICAgICAgY29uc29sZS5sb2coJ1NXIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6ICcsIHJlZ2lzdHJhdGlvbkVycm9yKTtcbiAgICAgfSk7XG4gICB9KTtcbiAgfVxuXG59KSgpO1xuXG5cbiIsImltcG9ydCByZWdpc3RyYXRpb24gZnJvbSAnLi9yZWdpc3RyYXRpb24nO1xuaW1wb3J0IERCSGVscGVyIGZyb20gJy4vZGJoZWxwZXInO1xubGV0IHJlc3RhdXJhbnQ7XG5sZXQgc3VibWl0QnRuO1xudmFyIG5ld01hcDtcbmxldCBlZGl0aW5nID0gZmFsc2U7XG5pbXBvcnQge2RiUHJvbWlzZX0gZnJvbSAnLi4vc3cuanMnO1xuXG4vKipcbiAqIEluaXRpYWxpemUgbWFwIGFzIHNvb24gYXMgdGhlIHBhZ2UgaXMgbG9hZGVkLlxuICovXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKGV2ZW50KSA9PiB7XG4gIGluaXRNYXAoKTtcblxuICBzdWJtaXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VibWl0LWZvcm0tYnRuJyk7XG4gIHN1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN1Ym1pdFJldmlldyk7XG5cbiAgLy9jaGVjayBmb3IgcGVuZGluZyByZXZpZXdzIG9uIHBhZ2UgbG9hZCBhbmQgcG9wXG4gIERCSGVscGVyLm5leHRQZW5kaW5nKCk7XG4gfSk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBsZWFmbGV0IG1hcFxuICovXG5jb25zdCBpbml0TWFwID0gKCkgPT4ge1xuICBmZXRjaFJlc3RhdXJhbnRGcm9tVVJMKChlcnJvciwgcmVzdGF1cmFudCkgPT4ge1xuICAgIGlmIChlcnJvcikgeyAvLyBHb3QgYW4gZXJyb3IhXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3TWFwID0gTC5tYXAoJ21hcCcsIHtcbiAgICAgICAgY2VudGVyOiBbcmVzdGF1cmFudC5sYXRsbmcubGF0LCByZXN0YXVyYW50LmxhdGxuZy5sbmddLFxuICAgICAgICB6b29tOiAxNixcbiAgICAgICAgc2Nyb2xsV2hlZWxab29tOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBzZWxmLm5ld01hcCA9IG5ld01hcDtcbiAgICAgIEwudGlsZUxheWVyKCdodHRwczovL2FwaS50aWxlcy5tYXBib3guY29tL3Y0L3tpZH0ve3p9L3t4fS97eX0uanBnNzA/YWNjZXNzX3Rva2VuPXttYXBib3hUb2tlbn0nLCB7XG4gICAgICAgIG1hcGJveFRva2VuOiAncGsuZXlKMUlqb2lkMlZ1ZEdsdUlpd2lZU0k2SW1OcWFYSjBOMjVpWmpGd2RqWXphM0E0TUd0MWFIVTJiakVpZlEuRG5ORlVvTjV1encwMWxfWEtfYzduUScsXG4gICAgICAgIG1heFpvb206IDE4LFxuICAgICAgICBhdHRyaWJ1dGlvbjogJ01hcCBkYXRhICZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvXCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzLCAnICtcbiAgICAgICAgICAnPGEgaHJlZj1cImh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS1zYS8yLjAvXCI+Q0MtQlktU0E8L2E+LCAnICtcbiAgICAgICAgICAnSW1hZ2VyeSDCqSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubWFwYm94LmNvbS9cIj5NYXBib3g8L2E+JyxcbiAgICAgICAgaWQ6ICdtYXBib3guc3RyZWV0cydcbiAgICAgIH0pLmFkZFRvKG5ld01hcCk7XG4gICAgICBmaWxsQnJlYWRjcnVtYigpO1xuICAgICAgREJIZWxwZXIubWFwTWFya2VyRm9yUmVzdGF1cmFudChzZWxmLnJlc3RhdXJhbnQsIHNlbGYubmV3TWFwKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBjdXJyZW50IHJlc3RhdXJhbnQgZnJvbSBwYWdlIFVSTC5cbiAqL1xuY29uc3QgZmV0Y2hSZXN0YXVyYW50RnJvbVVSTCA9IChjYWxsYmFjaykgPT4ge1xuICBpZiAoc2VsZi5yZXN0YXVyYW50KSB7IC8vIHJlc3RhdXJhbnQgYWxyZWFkeSBmZXRjaGVkIVxuICAgIGNhbGxiYWNrKG51bGwsIHNlbGYucmVzdGF1cmFudClcbiAgICBjb25zb2xlLmxvZygnc2VsZiByZXN0YXVyYW50IGFscmVhZHkgZmV0Y2hlZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGlkID0gZ2V0UGFyYW1ldGVyQnlOYW1lKCdpZCcpO1xuICBpZiAoIWlkKSB7IC8vIG5vIGlkIGZvdW5kIGluIFVSTFxuICAgIGVycm9yID0gJ05vIHJlc3RhdXJhbnQgaWQgaW4gVVJMJ1xuICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRCeUlkKGlkLCAoZXJyb3IsIHJlc3RhdXJhbnQpID0+IHtcbiAgICAgIHNlbGYucmVzdGF1cmFudCA9IHJlc3RhdXJhbnQ7XG4gICAgICBpZiAoIXJlc3RhdXJhbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZpbGxSZXN0YXVyYW50SFRNTCgpO1xuICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdGF1cmFudCk7XG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlIHJlc3RhdXJhbnQgSFRNTCBhbmQgYWRkIGl0IHRvIHRoZSB3ZWJwYWdlXG4gKi9cbmNvbnN0IGZpbGxSZXN0YXVyYW50SFRNTCA9IChyZXN0YXVyYW50ID0gc2VsZi5yZXN0YXVyYW50KSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudC1uYW1lJyk7XG4gIG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xuXG4gIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudC1hZGRyZXNzJyk7XG4gIGFkZHJlc3MuaW5uZXJIVE1MID0gYCAke3Jlc3RhdXJhbnQubmFtZX0gPGJyPiAke3Jlc3RhdXJhbnQuYWRkcmVzc31gO1xuXG4gIGNvbnN0IGltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtaW1nJyk7XG4gIGltYWdlLmNsYXNzTmFtZSA9ICdyZXN0YXVyYW50LWltZydcbiAgaW1hZ2Uuc3JjID0gREJIZWxwZXIuaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xuXG4gIGNvbnN0IGN1aXNpbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudC1jdWlzaW5lJyk7XG4gIGN1aXNpbmUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5jdWlzaW5lX3R5cGU7XG5cbiAgLy8gZmlsbCBvcGVyYXRpbmcgaG91cnNcbiAgaWYgKHJlc3RhdXJhbnQub3BlcmF0aW5nX2hvdXJzKSB7XG4gICAgZmlsbFJlc3RhdXJhbnRIb3Vyc0hUTUwoKTtcbiAgfVxuICAvLyBmaWxsIHJldmlld3NcbiAgREJIZWxwZXIuZmV0Y2hSZXZpZXdzKHJlc3RhdXJhbnQuaWQsIChlcnJvciwgcmV2aWV3cykgPT4ge1xuICAgIGZpbGxSZXZpZXdzSFRNTChyZXZpZXdzKTtcblxuICB9KTtcbn1cblxuXG4vKipcbiAqIENyZWF0ZSByZXN0YXVyYW50IG9wZXJhdGluZyBob3VycyBIVE1MIHRhYmxlIGFuZCBhZGQgaXQgdG8gdGhlIHdlYnBhZ2UuXG4gKi9cbmNvbnN0IGZpbGxSZXN0YXVyYW50SG91cnNIVE1MID0gKG9wZXJhdGluZ0hvdXJzID0gc2VsZi5yZXN0YXVyYW50Lm9wZXJhdGluZ19ob3VycykgPT4ge1xuICBjb25zdCBob3VycyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50LWhvdXJzJyk7XG4gIGZvciAobGV0IGtleSBpbiBvcGVyYXRpbmdIb3Vycykge1xuICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cbiAgICBjb25zdCBkYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIGRheS5pbm5lckhUTUwgPSBrZXk7XG4gICAgcm93LmFwcGVuZENoaWxkKGRheSk7XG5cbiAgICBjb25zdCB0aW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICB0aW1lLmlubmVySFRNTCA9IG9wZXJhdGluZ0hvdXJzW2tleV07XG4gICAgcm93LmFwcGVuZENoaWxkKHRpbWUpO1xuXG4gICAgaG91cnMuYXBwZW5kQ2hpbGQocm93KTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbGwgcmV2aWV3cyBIVE1MIGFuZCBhZGQgdGhlbSB0byB0aGUgd2VicGFnZS5cbiAqL1xuY29uc3QgZmlsbFJldmlld3NIVE1MID0gKHJldmlld3MgPSBzZWxmLnJlc3RhdXJhbnQucmV2aWV3cykgPT4ge1xuICBjb25zb2xlLmxvZyhyZXZpZXdzKTtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jldmlld3MtY29udGFpbmVyJyk7XG5cbiAgLy8gUmVzZXQgdGhlIGNvbnRhaW5lciBvbiBldmVyeSBjYWxsIHRvIHByZXZlbnQgZHVwbGljYXRpb25cbiAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gIHRpdGxlLmlubmVySFRNTCA9ICdSZXZpZXdzJztcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlKTtcblxuICBpZiAoIXJldmlld3MpIHtcbiAgICBjb25zdCBub1Jldmlld3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgbm9SZXZpZXdzLmlubmVySFRNTCA9ICdObyByZXZpZXdzIHlldCEnO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChub1Jldmlld3MpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gIHVsLmlkID0gJ3Jldmlld3MtbGlzdCc7XG4gIHJldmlld3MuZm9yRWFjaChyZXZpZXcgPT4ge1xuICAgIHVsLmFwcGVuZENoaWxkKGNyZWF0ZVJldmlld0hUTUwocmV2aWV3KSk7XG4gIH0pO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQodWwpO1xufVxuXG4vKipcbiAqIENyZWF0ZSByZXZpZXcgSFRNTCBhbmQgYWRkIGl0IHRvIHRoZSB3ZWJwYWdlLlxuICovXG5jb25zdCBjcmVhdGVSZXZpZXdIVE1MID0gKHJldmlldykgPT4ge1xuICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gIGxpLnNldEF0dHJpYnV0ZSgnaWQnLCBgcmV2aWV3LWxpLSR7cmV2aWV3LmlkfWApXG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIG5hbWUuaW5uZXJIVE1MID0gcmV2aWV3Lm5hbWU7XG4gIGxpLmFwcGVuZENoaWxkKG5hbWUpO1xuXG4gIGNvbnN0IGRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGRhdGUuaW5uZXJIVE1MID0gJzxzdHJvbmc+Q3JlYXRlZDo8L3N0cm9uZz4gJyArIChuZXcgRGF0ZShyZXZpZXcuY3JlYXRlZEF0KSkudG9EYXRlU3RyaW5nKCk7XG4gIGxpLmFwcGVuZENoaWxkKGRhdGUpO1xuXG4gIGlmIChyZXZpZXcuY3JlYXRlZEF0ICE9PSByZXZpZXcudXBkYXRlZEF0KSB7XG4gICAgY29uc3QgdXBkYXRlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICB1cGRhdGVEYXRlLmlubmVySFRNTCA9ICc8c3Ryb25nPlVwZGF0ZWQ6PC9zdHJvbmc+ICcgKyAobmV3IERhdGUocmV2aWV3LnVwZGF0ZWRBdCkpLnRvRGF0ZVN0cmluZygpO1xuICAgIGxpLmFwcGVuZENoaWxkKHVwZGF0ZURhdGUpO1xuICB9XG5cbiAgY29uc3QgcmF0aW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICByYXRpbmcuaW5uZXJIVE1MID0gYFJhdGluZzogJHtyZXZpZXcucmF0aW5nfWA7XG4gIGxpLmFwcGVuZENoaWxkKHJhdGluZyk7XG5cbiAgY29uc3QgY29tbWVudHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGNvbW1lbnRzLmlubmVySFRNTCA9IHJldmlldy5jb21tZW50cztcbiAgbGkuYXBwZW5kQ2hpbGQoY29tbWVudHMpO1xuXG4gIC8vIFNldCB1cCBhbmQgdXNlIGZvbnRhd2Vzb21lIGljb25zIGZvciBlZGl0IGFuZCBkZWxldGVcbiAgY29uc3QgZWRpdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBjb25zdCBlZGl0SWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgZWRpdEJ0bi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScsIGBlZGl0IHJldmlldyAke3Jldmlldy5pZH1gKTtcbiAgZWRpdEJ0bi5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgYGVkaXQgcmV2aWV3IGJ1dHRvbmApO1xuICBlZGl0QnRuLmNsYXNzTGlzdC5hZGQoJ3Jldmlldy1idG4nKTtcbiAgZWRpdEJ0bi50aXRsZSA9ICdzdGFydCBlZGl0aW5nIGJ1dHRvbic7XG4gIGVkaXRJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhcycsICdmYS1lZGl0JywgJ2ZhLTJ4Jyk7XG4gIGVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzZXRFZGl0aW5nKHJldmlldykpO1xuICBlZGl0QnRuLmFwcGVuZChlZGl0SWNvbik7XG4gIGxpLmFwcGVuZENoaWxkKGVkaXRCdG4pO1xuXG4gIGNvbnN0IGRlbGV0ZUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBjb25zdCBkZWxldGVJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICBkZWxldGVCdG4uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCBgZGVsZXRlIHJldmlldyAke3Jldmlldy5pZH1gKTtcbiAgZGVsZXRlQnRuLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBgZGVsZXRlIHJldmlldyBidXR0b25gKTtcbiAgZGVsZXRlQnRuLmNsYXNzTGlzdC5hZGQoJ3Jldmlldy1idG4nKTtcbiAgZGVsZXRlSWNvbi5jbGFzc0xpc3QuYWRkKCdmYXMnLCAnZmEtdHJhc2gtYWx0JywgJ2ZhLTJ4Jyk7XG4gIGRlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGRlbGV0ZVJldmlldyhyZXZpZXcpKTtcbiAgZGVsZXRlQnRuLmFwcGVuZChkZWxldGVJY29uKTtcbiAgbGkuYXBwZW5kQ2hpbGQoZGVsZXRlQnRuKTtcblxuICByZXR1cm4gbGk7XG59XG5cbi8qKlxuICogQWRkIHJlc3RhdXJhbnQgbmFtZSB0byB0aGUgYnJlYWRjcnVtYiBuYXZpZ2F0aW9uIG1lbnVcbiAqL1xuY29uc3QgZmlsbEJyZWFkY3J1bWIgPSAocmVzdGF1cmFudD1zZWxmLnJlc3RhdXJhbnQpID0+IHtcbiAgY29uc3QgYnJlYWRjcnVtYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdicmVhZGNydW1iJyk7XG4gIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgbGkuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xuICBicmVhZGNydW1iLmFwcGVuZENoaWxkKGxpKTtcbn1cblxuLyoqXG4gKiBHZXQgYSBwYXJhbWV0ZXIgYnkgbmFtZSBmcm9tIHBhZ2UgVVJMLlxuICovXG5jb25zdCBnZXRQYXJhbWV0ZXJCeU5hbWUgPSAobmFtZSwgdXJsKSA9PiB7XG4gIGxldCB4ID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gIGlmICghdXJsKSB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW1xcXV0vZywgJ1xcXFwkJicpO1xuICBjb25zb2xlLmxvZyh1cmwpO1xuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYFs/Jl0ke25hbWV9KD0oW14mI10qKXwmfCN8JClgKSxcbiAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgY29uc29sZS5sb2cocmVzdWx0cyk7XG4gIGlmICghcmVzdWx0c1syXSkgcmV0dXJuICcnO1xuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMl0ucmVwbGFjZSgvXFwrL2csICcgJykpO1xufVxuXG5jb25zdCBzdWJtaXRSZXZpZXcgPSAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKGVkaXRpbmcpO1xuICBsZXQgZm9ybURhdGEgPSBnZXRGb3JtVmFsdWVzKCk7XG4gIGlmKCEvW2EtekEtWl17Mix9JC9naS50ZXN0KGZvcm1EYXRhLm5hbWUpKSB7XG4gICAgYWxlcnQoJ25hbWUgaW5wdXQgbXVzdCBiZSBsZXR0ZXJzIG9ubHksIG1pbmltdW0gb2YgMiBjaGFyYWN0ZXJzJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmKCEvWzEtNV17MX0kL2dpLnRlc3QoZm9ybURhdGEucmF0aW5nKSkge1xuICAgIGFsZXJ0KCdyYXRpbmcgaW5wdXQgbXVzdCBiZSBhIG51bWJlciwgMS01Jyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmKGZvcm1EYXRhLmNvbW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICBhbGVydCgnY29tbWVudHMgaW5wdXQgbXVzdCBiZSBtaW5pbXVtIG9mIDMgY2hhcmFjdGVycycpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlZGl0aW5nKSB7XG4gICAgZm9ybURhdGEudXBkYXRlZEF0ID0gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICBmb3JtRGF0YS5pZCA9IERhdGUubm93KCk7XG4gICAgZm9ybURhdGEucmVzdGF1cmFudF9pZCA9IE51bWJlcihnZXRQYXJhbWV0ZXJCeU5hbWUoJ2lkJykpO1xuICB9XG5cbiAgREJIZWxwZXIuc3VibWl0UmV2aWV3KGZvcm1EYXRhLCBlZGl0aW5nKS50aGVuKCByZXN1bHQgPT4ge1xuICAgIGxldCBhbGVydE1zZyA9IGVkaXRpbmcgPyAnRWRpdGVkIFJldmlldycgOiAnQ3JlYXRlZCBSZXZpZXcnO1xuICAgIGFsZXJ0KGFsZXJ0TXNnKTtcbiAgICBsZXQgbmV3UmV2aWV3RWxlbSA9IGNyZWF0ZVJldmlld0hUTUwocmVzdWx0KTtcbiAgICBpZiAoZWRpdGluZykge1xuICAgICAgbGV0IG9sZFJldmlld0VsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgcmV2aWV3LWxpLSR7cmVzdWx0LmlkfWApO1xuICAgICAgbGV0IHBhcmVudEVsZW0gPSBvbGRSZXZpZXdFbGVtLnBhcmVudEVsZW1lbnQ7XG4gICAgICBwYXJlbnRFbGVtLnJlcGxhY2VDaGlsZChuZXdSZXZpZXdFbGVtLCBvbGRSZXZpZXdFbGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmV2aWV3cy1saXN0Jyk7XG4gICAgICB1bC5hcHBlbmRDaGlsZChuZXdSZXZpZXdFbGVtKTtcbiAgICB9XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgcmV2aWV3LWxpLSR7cmVzdWx0LmlkfWApO1xuICAgIGVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcodHJ1ZSk7XG4gICAgcmVzZXRGb3JtVmFsdWVzKCk7XG4gIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAvLyBJZiBubyBuZXR3b3JrLCBmYWxsYmFjayB0byBnZXQgcmV2aWV3cyBmcm9tIGRiXG4gICAgbGV0IGFsZXJ0TXNnID0gZWRpdGluZyA/ICdFZGl0ZWQgUmV2aWV3JyA6ICdDcmVhdGVkIFJldmlldyc7XG4gICAgYWxlcnQoYWxlcnRNc2cpO1xuICAgIGNvbnNvbGUubG9nKGAke2Vycm9yfTogcmVsb2FkaW5nIHJldmlld3MgZnJvbSBkYmApO1xuICAgIGNvbnN0IHNlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmV2aWV3cy1jb250YWluZXInKTtcbiAgICBkYlByb21pc2UudGhlbihkYiA9PiB7XG4gICAgICByZXR1cm4gZGJcbiAgICAgICAgLnRyYW5zYWN0aW9uKCdyZXZpZXdzJylcbiAgICAgICAgLm9iamVjdFN0b3JlKCdyZXZpZXdzJylcbiAgICAgICAgLmluZGV4KCdyZXN0YXVyYW50X2lkJylcbiAgICAgICAgLmdldEFsbChmb3JtRGF0YS5yZXN0YXVyYW50X2lkKTtcbiAgICB9KS50aGVuKHJldmlld3MgPT4ge1xuICAgICAgY29uc29sZS5sb2cocmV2aWV3cyk7XG4gICAgICBmaWxsUmV2aWV3c0hUTUwocmV2aWV3cyk7XG4gICAgICByZXNldEZvcm1WYWx1ZXMoKTtcbiAgICB9KVxuXG4gIH0pO1xufVxuXG5jb25zdCBnZXRGb3JtVmFsdWVzID0gKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lJykudmFsdWUudHJpbSgpLFxuICAgIHJhdGluZzogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JhdGluZycpLnZhbHVlLnRyaW0oKSxcbiAgICBjb21tZW50czogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jldmlldy1maWVsZCcpLnZhbHVlLnRyaW0oKVxuICB9XG59XG5cbmNvbnN0IHJlc2V0Rm9ybVZhbHVlcyA9ICgpID0+IHtcbiAgZWRpdGluZyA9IGZhbHNlO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpLnZhbHVlID0gJyc7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYXRpbmcnKS52YWx1ZSA9ICcnO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmV2aWV3LWZpZWxkJykudmFsdWUgPSAnJztcbn1cblxuY29uc3QgY2FuY2VsRWRpdGluZyA9ICgpID0+IHtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbmNlbC1mb3JtLWJ0bicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlc2V0Rm9ybVZhbHVlcygpO1xuICBlZGl0aW5nID0gZmFsc2U7XG59XG5cbmNvbnN0IHNldEVkaXRpbmcgPSAocmV2aWV3KSA9PiB7XG4gIGVkaXRpbmcgPSByZXZpZXc7XG4gIGxldCBjYW5jZWxFZGl0aW5nQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbmNlbC1mb3JtLWJ0bicpO1xuICBjYW5jZWxFZGl0aW5nQnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICBjYW5jZWxFZGl0aW5nQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gY2FuY2VsRWRpdGluZygpICk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lJykudmFsdWUgPSByZXZpZXcubmFtZTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JhdGluZycpLnZhbHVlID0gcmV2aWV3LnJhdGluZztcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jldmlldy1maWVsZCcpLnZhbHVlID0gcmV2aWV3LmNvbW1lbnRzO1xuICBsZXQgcmV2aWV3X2lkID0gcmV2aWV3LmlkO1xuICBnb1RvQm90dG9tKCk7XG59XG5cblxuY29uc3QgZGVsZXRlUmV2aWV3ID0gKHJldmlldykgPT4ge1xuICBsZXQgYXNrID0gd2luZG93LmNvbmZpcm0oYGRlbGV0ZSAke3Jldmlldy5uYW1lfSdzIHJldmlldz9gKTtcbiAgaWYgKGFzayA9PT0gZmFsc2UpIHsgcmV0dXJuIH1cbiAgREJIZWxwZXIuZGVsZXRlUmV2aWV3KHJldmlldy5pZCkudGhlbigoKSA9PiB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHJldmlldy1saS0ke3Jldmlldy5pZH1gKS5yZW1vdmUoKTtcbiAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0IHB1dCBpbnRvIHF1ZScpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGByZXZpZXctbGktJHtyZXZpZXcuaWR9YCkucmVtb3ZlKCk7XG4gIH0pO1xufVxuXG5jb25zdCBnb1RvQm90dG9tID0gKCkgPT4ge1xuICB3aW5kb3cuc2Nyb2xsVG8oMCwgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpO1xufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9