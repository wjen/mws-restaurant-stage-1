!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}({6:function(e,t,n){"use strict";n.r(t);const r=(e,t)=>t.some(t=>e instanceof t);let o,s;const c=new WeakMap,i=new WeakMap,a=new WeakMap,u=new WeakMap,d=new WeakMap;let l={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return i.get(e);if("objectStoreNames"===t)return e.objectStoreNames||a.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return h(e[t])},has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function f(e){return e===IDBDatabase.prototype.transaction&&"objectStoreNames"in IDBTransaction.prototype?function(t,...n){const r=e.call(g(this),t,...n);return a.set(r,t.sort?t.sort():[t]),h(r)}:(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(g(this),t),h(c.get(this))}:function(...t){return h(e.apply(g(this),t))}}function p(e){return"function"==typeof e?f(e):(e instanceof IDBTransaction&&function(e){if(i.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",s),e.removeEventListener("abort",s)},o=()=>{t(),r()},s=()=>{n(e.error),r()};e.addEventListener("complete",o),e.addEventListener("error",s),e.addEventListener("abort",s)});i.set(e,t)}(e),r(e,o||(o=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,l):e)}function h(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",s)},o=()=>{t(h(e.result)),r()},s=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",s)});return t.then(t=>{t instanceof IDBCursor&&c.set(t,e)}),d.set(t,e),t}(e);if(u.has(e))return u.get(e);const t=p(e);return t!==e&&(u.set(e,t),d.set(t,e)),t}const g=e=>d.get(e);function v(e,t,{blocked:n,upgrade:r,blocking:o}={}){const s=indexedDB.open(e,t),c=h(s);return r&&s.addEventListener("upgradeneeded",e=>{r(h(s.result),e.oldVersion,e.newVersion,h(s.transaction))}),n&&s.addEventListener("blocked",()=>n()),o&&c.then(e=>e.addEventListener("versionchange",o)),c}const b=["get","getKey","getAll","getAllKeys","count"],m=["put","add","delete","clear"],y=new Map;function D(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(y.get(t))return y.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n;if(!(n in(r?IDBIndex:IDBObjectStore).prototype))return;let o;return b.includes(n)&&(o=function(e,...t){let o=this.transaction(e).store;return r&&(o=o.index(t.shift())),o[n](...t)}),m.includes(n)&&(o=function(e,...t){const r=this.transaction(e,"readwrite");return r.store[n](...t),r.done}),o&&y.set(t,o),o}l=(e=>({get:(t,n,r)=>D(t,n)||e.get(t,n,r),has:(t,n)=>!!D(t,n)||e.has(t,n)}))(l);console.log(v);v("rr-db",1,{upgrade(e){e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id")}});self.addEventListener("install",e=>{e.waitUntil(caches.open("static_cache-v2").then(e=>e.addAll(["/","/src/main.js","/src/dbhelper.js","/restaurant.html","/index.html","/src/restaurant_info.js","/src/styles.css","/src/rr-icon512.png"]).catch(e=>{console.log("error opening cache"+e)})))}),self.addEventListener("fetch",e=>{"GET"===e.request.method?e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).then(t=>{let n=function(e){let t=["png","jpg","jpeg","svg","gif"],n=!1;for(let r of t)if(e.endsWith(r)){n=!0;break}return n}(e.request.url)?"images_cache-v":"static_cache-v2";return caches.open(n).then(n=>(n.put(e.request,t.clone()),t))})).catch(e=>{console.log(e)})):e.respondWith(fetch(e.request))})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,