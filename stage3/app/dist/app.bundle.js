!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=60)}([function(e,t,n){var r=n(15)("wks"),o=n(17),i=n(1).Symbol,s="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=s&&i[e]||(s?i:o)("Symbol."+e))}).store=r},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){"use strict";n.r(t),n.d(t,"dbPromise",(function(){return i}));n(40),n(46);var r=n(20);const o="restaurant-cache-v".concat("3"),i=Object(r.a)("rr-db",3,{upgrade(e,t){switch(t){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id");case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id");case 2:e.createObjectStore("pending",{keyPath:"id",autoIncrement:!0})}}});function s(e){let t=["png","jpg","jpeg","svg","gif"],n=!1;for(let r of t)if(e.endsWith(r)){n=!0;break}return n}self.addEventListener("install",e=>{e.waitUntil(caches.open(o).then(e=>e.addAll(["/","./app.bundle.js","./restaurant.bundle.js","./img/rr_icon.png","./css/styles.css"]).catch(e=>{console.log("error setting up install event for sw")})))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.filter(e=>e.startsWith("restaurant-")&&e!=o).map(e=>caches.delete(e)))))}),self.addEventListener("fetch",e=>{let t=new URL(e.request.url);if("1337"===t.port){let n=t.searchParams.get("restaurant_id")-0;return a(e,n)}l(e)});const a=(e,t)=>{"GET"!==e.request.method?(console.log(e.request),console.log(e),e.respondWith(fetch(e.request))):e.request.url.indexOf("restaurants")>-1?c(e):(console.log("starting handling from reviews event"),u(e,t))},c=e=>{e.respondWith(i.then(e=>e.transaction("restaurants").objectStore("restaurants").getAll()).then(t=>(console.log("responding from handlerestaurantevents from serviceworker"),t.length&&t||(e=>new Promise((function(t,n){fetch(e.request).then(e=>e.json()).then(e=>{t(e)}).catch(e=>{console.log(e),n(e)})})))(e).then(e=>(console.log("fetched now storing"),i.then(t=>{let n=t.transaction("restaurants","readwrite"),r=n.objectStore("restaurants");return e.forEach((function(e){r.put(e)})),n.done}).then(()=>(console.log("stored restaurants, now returning"),e)))))).then(e=>(console.log(e),new Response(JSON.stringify(e)))).catch(e=>new Response("Error fetching data",{status:500})))},u=(e,t)=>{e.respondWith(i.then(e=>e.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(t)).then(t=>(console.log("serviceworker handle reviews"),console.log(t),t.length&&t||fetch(e.request).then(e=>e.json()).then(e=>(console.log("using serviceworker fetch"),console.log("starting to store reviews"),i.then(t=>{let n=t.transaction("reviews","readwrite"),r=n.objectStore("reviews");return e.forEach((function(e){r.put(e)})),n.done}).then(()=>e))))).then(e=>new Response(JSON.stringify(e))).catch(e=>new Response("Error fetching data",{status:500})))},l=e=>{e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).then(t=>{let n=s(e.request.url)?"images_cache-v":o;return caches.open(n).then(n=>(n.put(e.request,t.clone()),t))}).catch(e=>new Response("Application is not connected to the internet",{status:404,statusText:"Application is not connected to the internet"})))),e.waitUntil(f(e.request))},f=e=>{let t=s(e.url)?"images_cache-v":o;return caches.open(t).then(t=>fetch(e).then(n=>t.put(e,n)))}},function(e,t,n){var r=n(11),o=n(23);e.exports=n(6)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(9);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));n(20);var r=n(2);class o{static get DATABASE_URL(){return"http://localhost:".concat(1337,"/restaurants")}static get DATABASE_REVIEWS_URL(){return"http://localhost:".concat(1337,"/reviews")}static fetchRestaurants(e){fetch(o.DATABASE_URL).then((function(t){t.json().then((function(t){e(null,t)}))}))}static fetchReviews(e,t){let n=o.DATABASE_REVIEWS_URL+"/?restaurant_id="+e;fetch(n).then(e=>e.json()).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantById(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){o.fetchRestaurants((r,o)=>{if(r)n(r,null);else{let r=o;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){o.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){o.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return"/restaurant.html?id=".concat(e.id)}static imageUrlForRestaurant(e){return e.photograph?"/img/".concat(e.photograph,".jpg"):"/img/".concat(e.id,".jpg")}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:o.urlForRestaurant(e)});return n.addTo(newMap),n}static updateCachedRestaurantReview(e){return console.log("updating cache for new review",e),r.dbPromise.then(t=>{const n=t.transaction("reviews","readwrite");return n.objectStore("reviews").put(e),console.log("successfully put review in store"),n.done})}static editReview(e,t){return r.dbPromise.then(e=>e.transaction("reviews").objectStore("reviews").get(t.id)).then(t=>r.dbPromise.then(n=>{let r=n.transaction("reviews","readwrite"),o=r.objectStore("reviews"),i=Object.assign({},t,e);return o.put(i),r.complete}))}static submitReview(e,t){console.log(t);const n=t?"PUT":"POST",r=t?"".concat(o.DATABASE_REVIEWS_URL,"/").concat(t.id):o.DATABASE_REVIEWS_URL;return t?o.editReview(e,t):o.updateCachedRestaurantReview(e),o.addPendingRequestToQue(r,n,e)}static addPendingRequestToQue(e,t,n){return new Promise((i,s)=>{r.dbPromise.then(r=>r.transaction("pending","readwrite").objectStore("pending").put({data:{url:e,method:t,formData:n}})).catch(e=>{console.log("Error putting data in pending db: ".concat(e))}).then(o.nextPending((e,t)=>e?(console.log(e),s(e)):i(t)))})}static nextPending(e){o.attemptCommitPending(o.nextPending).then(t=>{console.log(t),e(null,t)}).catch(t=>{console.log(t),e&&e(t)})}static attemptCommitPending(e){let t,n,o;return new Promise((i,s)=>{r.dbPromise.then(r=>{if(!r.objectStoreNames.length)return console.log("DB not available"),void r.close();r.transaction("pending","readwrite").objectStore("pending").openCursor().then(a=>{if(!a)return void console.log("no more cursors");const c=a.value;if(t=c.data.url,n=c.data.method,o=c.data.formData,!t||!n||"POST"===n&&!o)return a.delete().then(e),void console.log("deleted a bad cursor");const u={body:JSON.stringify(o),method:n};fetch(t,u).then(t=>(console.log(t),t.ok||t.redirected?t.json().then(t=>r.transaction("pending","readwrite").objectStore("pending").openCursor().then(n=>n.delete().then(()=>(console.log(n.value),console.log("deleted item from pending store"),e(),console.log(t),i(t))))):(console.log("this is the response and we are offline"),void console.log(t)))).catch(e=>(console.log(e),s("no network")))})})})}static syncRestaurant(e){let t="http://localhost:1337/restaurants/".concat(e.id,"/?is_favorite=").concat(e.is_favorite);o.addPendingRequestToQue(t,"PUT").catch(t=>{console.log("error updating restaurant backend data...",t,e)})}static updateRestaurantInDB(e){return r.dbPromise.then((function(t){let n=t.transaction("restaurants","readwrite");return n.objectStore("restaurants").put(e),n.complete})).then((function(){return Promise.resolve(e)}))}static toggleFavBtn(e){return r.dbPromise.then(t=>t.transaction("restaurants").objectStore("restaurants").get(e)).then(e=>{console.log(e);const t=Object.assign({},e);return t.is_favorite="true"===e.is_favorite||!0===e.is_favorite?"false":"true",o.syncRestaurant(t),o.updateRestaurantInDB(t)}).then(e=>{const t=document.getElementById("fav-btn-".concat(e.id));"true"===e.is_favorite||!0===e.is_favorite?(t.innerHTML="Favorited!",t.style.background="hotpink"):(t.innerHTML="Add to favorite",t.style.background="grey")})}static deleteCachedReview(e){return r.dbPromise.then(t=>{let n=t.transaction("reviews","readwrite");return n.objectStore("reviews").delete(e),console.log("deleted review from idb"),n.complete}).catch(e=>{console.log("error deleting review: ",e)})}static deleteReview(e){const t="".concat(o.DATABASE_REVIEWS_URL,"/").concat(e);console.log(t);return o.deleteCachedReview(e),o.addPendingRequestToQue(t,"DELETE")}static deleteTempReview(e){r.dbPromise.then(t=>{let n=t.transaction("reviews","readwrite");return n.objectStore("reviews").delete(e),console.log("deleted oldversion of review with old id"),n.complete}).catch(e=>{console.log("error deleting temp review: ",e)})}}},function(e,t,n){e.exports=!n(13)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(1),o=n(3),i=n(8),s=n(17)("src"),a=n(44),c=(""+a).split("toString");n(16).inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var u="function"==typeof n;u&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(u&&(i(n,s)||o(n,s,e[t]?""+e[t]:c.join(String(t)))),e===r?e[t]=n:a?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[s]||a.call(this)}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(4),o=n(35),i=n(36),s=Object.defineProperty;t.f=n(6)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(50),o=n(10);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(16),o=n(1),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(25)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=e.exports={version:"2.6.5"};"number"==typeof __e&&(__e=n)},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports={}},function(e,t,n){var r=n(15)("keys"),o=n(17);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return g}));let r,o;const i=new WeakMap,s=new WeakMap,a=new WeakMap,c=new WeakMap,u=new WeakMap;let l={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return s.get(e);if("objectStoreNames"===t)return e.objectStoreNames||a.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return p(e[t])},has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function f(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(o||(o=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(h(this),t),p(i.get(this))}:function(...t){return p(e.apply(h(this),t))}:function(t,...n){const r=e.call(h(this),t,...n);return a.set(r,t.sort?t.sort():[t]),p(r)}}function d(e){return"function"==typeof e?f(e):(e instanceof IDBTransaction&&function(e){if(s.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",i),e.removeEventListener("abort",i)},o=()=>{t(),r()},i=()=>{n(e.error),r()};e.addEventListener("complete",o),e.addEventListener("error",i),e.addEventListener("abort",i)});s.set(e,t)}(e),t=e,(r||(r=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some(e=>t instanceof e)?new Proxy(e,l):e);var t}function p(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",i)},o=()=>{t(p(e.result)),r()},i=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",i)});return t.then(t=>{t instanceof IDBCursor&&i.set(t,e)}).catch(()=>{}),u.set(t,e),t}(e);if(c.has(e))return c.get(e);const t=d(e);return t!==e&&(c.set(e,t),u.set(t,e)),t}const h=e=>u.get(e);function g(e,t,{blocked:n,upgrade:r,blocking:o}={}){const i=indexedDB.open(e,t),s=p(i);return r&&i.addEventListener("upgradeneeded",e=>{r(p(i.result),e.oldVersion,e.newVersion,p(i.transaction))}),n&&i.addEventListener("blocked",()=>n()),o&&s.then(e=>e.addEventListener("versionchange",o)).catch(()=>{}),s}const v=["get","getKey","getAll","getAllKeys","count"],m=["put","add","delete","clear"],y=new Map;function b(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(y.get(t))return y.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,o=m.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!o&&!v.includes(n))return;const i=async function(e,...t){const i=this.transaction(e,o?"readwrite":"readonly");let s=i.store;r&&(s=s.index(t.shift()));const a=s[n](...t);return o&&await i.done,a};return y.set(t,i),i}l=(e=>({get:(t,n,r)=>b(t,n)||e.get(t,n,r),has:(t,n)=>!!b(t,n)||e.has(t,n)}))(l)},function(e,t,n){var r=n(12),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){e.exports=!1},function(e,t,n){"use strict";var r,o,i=n(34),s=RegExp.prototype.exec,a=String.prototype.replace,c=s,u=(r=/a/,o=/b*/g,s.call(r,"a"),s.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),l=void 0!==/()??/.exec("")[1];(u||l)&&(c=function(e){var t,n,r,o,c=this;return l&&(n=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),u&&(t=c.lastIndex),r=s.call(c,e),u&&r&&(c.lastIndex=c.global?r.index+r[0].length:t),l&&r&&r.length>1&&a.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=c},function(e,t,n){var r=n(1),o=n(16),i=n(3),s=n(7),a=n(37),c=function(e,t,n){var u,l,f,d,p=e&c.F,h=e&c.G,g=e&c.S,v=e&c.P,m=e&c.B,y=h?r:g?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(u in h&&(n=t),n)f=((l=!p&&y&&void 0!==y[u])?y:n)[u],d=m&&l?a(f,r):v&&"function"==typeof f?a(Function.call,f):f,y&&s(y,u,f,e&c.U),b[u]!=f&&i(b,u,d),v&&w[u]!=f&&(w[u]=f)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,n){var r=n(9),o=n(1).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(38),o=n(24);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(11).f,o=n(8),i=n(0)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){"use strict";var r=n(41)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){"use strict";var r=n(42),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(43);var r=n(7),o=n(3),i=n(13),s=n(10),a=n(0),c=n(26),u=a("species"),l=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=a(e),p=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[u]=function(){return n}),n[d](""),!t})):void 0;if(!p||!h||"replace"===e&&!l||"split"===e&&!f){var g=/./[d],v=n(s,d,""[e],(function(e,t,n,r,o){return t.exec===c?p&&!o?{done:!0,value:g.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),m=v[0],y=v[1];r(String.prototype,e,m),o(RegExp.prototype,d,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},function(e,t,n){"use strict";var r=n(4);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){e.exports=!n(6)&&!n(13)((function(){return 7!=Object.defineProperty(n(28)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(9);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(45);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(8),o=n(14),i=n(55)(!1),s=n(19)("IE_PROTO");e.exports=function(e,t){var n,a=o(e),c=0,u=[];for(n in a)n!=s&&r(a,n)&&u.push(n);for(;t.length>c;)r(a,n=t[c++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(10);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";var r=n(4),o=n(21),i=n(31),s=n(32);n(33)("match",1,(function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var c=r(e),u=String(this);if(!c.global)return s(c,u);var l=c.unicode;c.lastIndex=0;for(var f,d=[],p=0;null!==(f=s(c,u));){var h=String(f[0]);d[p]=h,""===h&&(c.lastIndex=i(u,o(c.lastIndex),l)),p++}return 0===p?null:d}]}))},function(e,t,n){var r=n(12),o=n(10);e.exports=function(e){return function(t,n){var i,s,a=String(o(t)),c=r(n),u=a.length;return c<0||c>=u?e?"":void 0:(i=a.charCodeAt(c))<55296||i>56319||c+1===u||(s=a.charCodeAt(c+1))<56320||s>57343?e?a.charAt(c):i:e?a.slice(c,c+2):s-56320+(i-55296<<10)+65536}}},function(e,t,n){var r=n(22),o=n(0)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,s;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(s=r(t))&&"function"==typeof t.callee?"Arguments":s}},function(e,t,n){"use strict";var r=n(26);n(27)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){e.exports=n(15)("native-function-to-string",Function.toString)},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){for(var r=n(47),o=n(29),i=n(7),s=n(1),a=n(3),c=n(18),u=n(0),l=u("iterator"),f=u("toStringTag"),d=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),g=0;g<h.length;g++){var v,m=h[g],y=p[m],b=s[m],w=b&&b.prototype;if(w&&(w[l]||a(w,l,d),w[f]||a(w,f,m),c[m]=d,y))for(v in r)w[v]||i(w,v,r[v],!0)}},function(e,t,n){"use strict";var r=n(48),o=n(49),i=n(18),s=n(14);e.exports=n(51)(Array,"Array",(function(e,t){this._t=s(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){var r=n(0)("unscopables"),o=Array.prototype;null==o[r]&&n(3)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){var r=n(22);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){"use strict";var r=n(25),o=n(27),i=n(7),s=n(3),a=n(18),c=n(52),u=n(30),l=n(58),f=n(0)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,g,v,m){c(n,t,h);var y,b,w,x=function(e){if(!d&&e in R)return R[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},S=t+" Iterator",E="values"==g,j=!1,R=e.prototype,L=R[f]||R["@@iterator"]||g&&R[g],_=L||x(g),T=g?E?x("entries"):_:void 0,P="Array"==t&&R.entries||L;if(P&&(w=l(P.call(new e)))!==Object.prototype&&w.next&&(u(w,S,!0),r||"function"==typeof w[f]||s(w,f,p)),E&&L&&"values"!==L.name&&(j=!0,_=function(){return L.call(this)}),r&&!m||!d&&!j&&R[f]||s(R,f,_),a[t]=_,a[S]=p,g)if(y={values:E?_:x("values"),keys:v?_:x("keys"),entries:T},m)for(b in y)b in R||i(R,b,y[b]);else o(o.P+o.F*(d||j),t,y);return y}},function(e,t,n){"use strict";var r=n(53),o=n(23),i=n(30),s={};n(3)(s,n(0)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(s,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(4),o=n(54),i=n(24),s=n(19)("IE_PROTO"),a=function(){},c=function(){var e,t=n(28)("iframe"),r=i.length;for(t.style.display="none",n(57).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;r--;)delete c.prototype[i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(a.prototype=r(e),n=new a,a.prototype=null,n[s]=e):n=c(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(11),o=n(4),i=n(29);e.exports=n(6)?Object.defineProperties:function(e,t){o(e);for(var n,s=i(t),a=s.length,c=0;a>c;)r.f(e,n=s[c++],t[n]);return e}},function(e,t,n){var r=n(14),o=n(21),i=n(56);e.exports=function(e){return function(t,n,s){var a,c=r(t),u=o(c.length),l=i(s,u);if(e&&n!=n){for(;u>l;)if((a=c[l++])!=a)return!0}else for(;u>l;l++)if((e||l in c)&&c[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var r=n(12),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(1).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(8),o=n(39),i=n(19)("IE_PROTO"),s=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?s:null}},function(e,t,n){"use strict";"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/serviceworker.bundle.js").then(e=>{console.log("SW registered: ",e)}).catch(e=>{console.log("SW registration failed: ",e)})})},function(e,t,n){"use strict";n.r(t);n(59);var r=n(5);var o;document.addEventListener("DOMContentLoaded",e=>{u(),l(),i(),a(),r.a.nextPending()});const i=()=>{r.a.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,s())})},s=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.neighborhoods;const t=document.getElementById("neighborhoods-select");t.addEventListener("change",l),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},a=()=>{r.a.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,c())})},c=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.cuisines;const t=document.getElementById("cuisines-select");t.addEventListener("change",l),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},u=()=>{o=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),self.newMap=o,L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1Ijoid2VudGluIiwiYSI6ImNqaXJ0N25iZjFwdjYza3A4MGt1aHU2bjEifQ.DnNFUoN5uzw01l_XK_c7nQ",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(o)},l=()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,o=t.selectedIndex,i=e[n].value,s=t[o].value;r.a.fetchRestaurantByCuisineAndNeighborhood(i,s,(e,t)=>{e?console.error(e):(f(t),d())})},f=e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e},d=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurants;const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(p(e))}),h()},p=e=>{const t=document.createElement("li"),n=document.createElement("img"),o=document.createElement("div");n.className="restaurant-img",n.setAttribute("alt",e.name),n.src=r.a.imageUrlForRestaurant(e),o.append(n),t.append(o);const i=document.createElement("h1");i.innerHTML=e.name,t.append(i);const s=document.createElement("p");s.innerHTML=e.neighborhood,t.append(s);const a=document.createElement("p");a.innerHTML=e.address,t.append(a);const c=document.createElement("button");"true"===e.is_favorite||!0===e.is_favorite?(c.innerHTML="Favorited!",c.style.background="hotpink"):(c.innerHTML="Add to favorite",c.style.background="grey"),c.setAttribute("title","toggle favorites for: ".concat(e.name)),c.setAttribute("id","fav-btn-".concat(e.id)),c.setAttribute("data-restaurant-id",e.id),c.addEventListener("click",()=>{r.a.toggleFavBtn(e.id)}),t.append(c);const u=document.createElement("button");return u.classList="button button--success",u.innerHTML="View Details",u.setAttribute("aria-label",e.name+e.neighborhood+e.address+"View Details"),u.onclick=()=>{const t=r.a.urlForRestaurant(e);window.location=t},t.append(u),t},h=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurants;e.forEach(e=>{const t=r.a.mapMarkerForRestaurant(e,o);t.on("click",(function(){window.location.href=t.options.url})),self.markers.push(t)})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L2pzL2RiaGVscGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2VzbS9jaHVuay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvanMvcmVnaXN0cmF0aW9uLmpzIiwid2VicGFjazovLy8uL2NsaWVudC9qcy9tYWluLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiZ2xvYmFsIiwid2luZG93IiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsIlNUQVRJQ19DQUNIRSIsImRiUHJvbWlzZSIsIm9wZW5EQiIsInVwZ3JhZGUiLCJkYiIsIm9sZFZlcnNpb24iLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJjcmVhdGVJbmRleCIsImF1dG9JbmNyZW1lbnQiLCJpc0ltYWdlVVJMIiwidXJsIiwiaW1nVHlwZXMiLCJpc0ltYWdlIiwidHlwZSIsImVuZHNXaXRoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwid2FpdFVudGlsIiwiY2FjaGVzIiwib3BlbiIsInRoZW4iLCJjYWNoZSIsImFkZEFsbCIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwia2V5cyIsImNhY2hlTmFtZXMiLCJQcm9taXNlIiwiYWxsIiwiZmlsdGVyIiwiY2FjaGVOYW1lIiwic3RhcnRzV2l0aCIsIm1hcCIsImRlbGV0ZSIsImNoZWNrVXJsIiwiVVJMIiwicmVxdWVzdCIsInBvcnQiLCJpZCIsInNlYXJjaFBhcmFtcyIsImhhbmRsZUFKQVhFdmVudCIsImhhbmRsZU5vbkFKQVhFdmVudCIsIm1ldGhvZCIsInJlc3BvbmRXaXRoIiwiZmV0Y2giLCJpbmRleE9mIiwiaGFuZGxlUmVzdGF1cmFudEV2ZW50cyIsImhhbmRsZVJldmlld3NFdmVudHMiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiZ2V0QWxsIiwiZGF0YSIsImxlbmd0aCIsInJlc29sdmUiLCJyZWplY3QiLCJyZXNwIiwianNvbiIsImdldFJlc3RhdXJhbnRzIiwicmVzdGF1cmFudHMiLCJ0eCIsImZvckVhY2giLCJyZXN0YXVyYW50IiwicHV0IiwiZG9uZSIsImZpbmFsUmVzcG9uc2UiLCJSZXNwb25zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGF0dXMiLCJpbmRleCIsImZldGNoUmVzcG9uc2UiLCJyZXZpZXdzIiwicmV2aWV3IiwibWF0Y2giLCJyZXNwb25zZSIsInVzZUNhY2hlIiwiY2xvbmUiLCJzdGF0dXNUZXh0IiwidXBkYXRlIiwiZFAiLCJjcmVhdGVEZXNjIiwiZiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJEQkhlbHBlciIsImNhbGxiYWNrIiwiREFUQUJBU0VfVVJMIiwicmVzdGF1cmFudF9pZCIsImZldGNoVVJMIiwiREFUQUJBU0VfUkVWSUVXU19VUkwiLCJmZXRjaFJlc3RhdXJhbnRzIiwiZmluZCIsImN1aXNpbmUiLCJyZXN1bHRzIiwiY3Vpc2luZV90eXBlIiwibmVpZ2hib3Job29kIiwibmVpZ2hib3Job29kcyIsInYiLCJ1bmlxdWVOZWlnaGJvcmhvb2RzIiwiY3Vpc2luZXMiLCJ1bmlxdWVDdWlzaW5lcyIsInBob3RvZ3JhcGgiLCJtYXJrZXIiLCJMIiwibGF0bG5nIiwibGF0IiwibG5nIiwidGl0bGUiLCJhbHQiLCJ1cmxGb3JSZXN0YXVyYW50IiwiYWRkVG8iLCJuZXdNYXAiLCJmb3JtRGF0YSIsImVkaXRpbmciLCJuZXdSZXZpZXciLCJhc3NpZ24iLCJjb21wbGV0ZSIsImVkaXRSZXZpZXciLCJ1cGRhdGVDYWNoZWRSZXN0YXVyYW50UmV2aWV3IiwiYWRkUGVuZGluZ1JlcXVlc3RUb1F1ZSIsIm5leHRQZW5kaW5nIiwiYXR0ZW1wdENvbW1pdFBlbmRpbmciLCJqIiwiYm9keSIsIm9iamVjdFN0b3JlTmFtZXMiLCJjbG9zZSIsIm9wZW5DdXJzb3IiLCJjdXJzb3IiLCJwcm9wZXJ0aWVzIiwib2siLCJyZWRpcmVjdGVkIiwiaXNfZmF2b3JpdGUiLCJuZXdfcmVzdGF1cmFudCIsInN5bmNSZXN0YXVyYW50IiwidXBkYXRlUmVzdGF1cmFudEluREIiLCJmYXZCdG4iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwicmV2aWV3X2lkIiwiZGVsZXRlQ2FjaGVkUmV2aWV3IiwidGVtcF9pZCIsImEiLCJoaWRlIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwiTyIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsInRoaXMiLCJ1bmRlZmluZWQiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJQIiwiQXR0cmlidXRlcyIsImUiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsImV4ZWMiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImNvcmUiLCJwdXNoIiwidmVyc2lvbiIsImNvcHlyaWdodCIsIl9fZSIsInB4IiwicmFuZG9tIiwiY29uY2F0IiwidG9TdHJpbmciLCJzaGFyZWQiLCJpZGJQcm94eWFibGVUeXBlcyIsImN1cnNvckFkdmFuY2VNZXRob2RzIiwiY3Vyc29yUmVxdWVzdE1hcCIsIldlYWtNYXAiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJ0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAiLCJ0cmFuc2Zvcm1DYWNoZSIsInJldmVyc2VUcmFuc2Zvcm1DYWNoZSIsImlkYlByb3h5VHJhcHMiLCJ0YXJnZXQiLCJwcm9wIiwicmVjZWl2ZXIiLCJJREJUcmFuc2FjdGlvbiIsIndyYXAiLCJ3cmFwRnVuY3Rpb24iLCJmdW5jIiwiSURCRGF0YWJhc2UiLCJJREJDdXJzb3IiLCJhZHZhbmNlIiwiY29udGludWUiLCJjb250aW51ZVByaW1hcnlLZXkiLCJpbmNsdWRlcyIsImFyZ3MiLCJhcHBseSIsInVud3JhcCIsInN0b3JlTmFtZXMiLCJzZXQiLCJzb3J0IiwidHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSIsInVubGlzdGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbiIsIklEQk9iamVjdFN0b3JlIiwiSURCSW5kZXgiLCJzb21lIiwiUHJveHkiLCJJREJSZXF1ZXN0IiwicHJvbWlzZSIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJwcm9taXNpZnlSZXF1ZXN0IiwibmV3VmFsdWUiLCJibG9ja2VkIiwiYmxvY2tpbmciLCJpbmRleGVkREIiLCJvcGVuUHJvbWlzZSIsIm5ld1ZlcnNpb24iLCJyZWFkTWV0aG9kcyIsIndyaXRlTWV0aG9kcyIsImNhY2hlZE1ldGhvZHMiLCJNYXAiLCJnZXRNZXRob2QiLCJ0YXJnZXRGdW5jTmFtZSIsInJlcGxhY2UiLCJ1c2VJbmRleCIsImlzV3JpdGUiLCJhc3luYyIsInN0b3JlTmFtZSIsInNoaWZ0IiwicmV0dXJuVmFsIiwib2xkVHJhcHMiLCJ0b0ludGVnZXIiLCJtaW4iLCJzbGljZSIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwiUmVnRXhwIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsInN0ciIsImxhc3RJbmRleCIsInJlQ29weSIsInJlIiwic291cmNlIiwiYXJndW1lbnRzIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0Iiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiQiIsImV4cFByb3RvIiwiVSIsIlciLCJSIiwiaXMiLCJjcmVhdGVFbGVtZW50IiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsImRlZiIsIlRBRyIsInRhZyIsInN0YXQiLCJhdCIsInVuaWNvZGUiLCJjbGFzc29mIiwiYnVpbHRpbkV4ZWMiLCJmYWlscyIsIndrcyIsInJlZ2V4cEV4ZWMiLCJTUEVDSUVTIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJLRVkiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwiY29uc3RydWN0b3IiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJmbiIsInJ4Zm4iLCJzdHJpbmciLCJhcmciLCJ0aGF0IiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsImZuIiwidmFsdWVPZiIsImFGdW5jdGlvbiIsImIiLCJ0b0lPYmplY3QiLCJhcnJheUluZGV4T2YiLCJJRV9QUk9UTyIsIm5hbWVzIiwidG9MZW5ndGgiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiTUFUQ0giLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyZXMiLCJyeCIsImZ1bGxVbmljb2RlIiwiQSIsIm1hdGNoU3RyIiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJwcm90byIsImZvcmNlZCIsIiRpdGVyYXRvcnMiLCJnZXRLZXlzIiwiSXRlcmF0b3JzIiwiSVRFUkFUT1IiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJBcnJheSIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJOQU1FIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiYWRkVG9VbnNjb3BhYmxlcyIsInN0ZXAiLCJpdGVyYXRlZCIsImtpbmQiLCJfdCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkxJQlJBUlkiLCIkaXRlckNyZWF0ZSIsInNldFRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJCVUdHWSIsInJldHVyblRoaXMiLCJCYXNlIiwiQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsImRlc2NyaXB0b3IiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJ3cml0ZSIsImx0IiwiUHJvcGVydGllcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJtYXgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b09iamVjdCIsIk9iamVjdFByb3RvIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwicmVnaXN0cmF0aW9uIiwicmVnaXN0cmF0aW9uRXJyb3IiLCJpbml0TWFwIiwidXBkYXRlUmVzdGF1cmFudHMiLCJmZXRjaE5laWdoYm9yaG9vZHMiLCJmZXRjaEN1aXNpbmVzIiwiZmlsbE5laWdoYm9yaG9vZHNIVE1MIiwic2VsZWN0Iiwib3B0aW9uIiwiYXBwZW5kIiwiZmlsbEN1aXNpbmVzSFRNTCIsImNlbnRlciIsInpvb20iLCJzY3JvbGxXaGVlbFpvb20iLCJ0aWxlTGF5ZXIiLCJtYXBib3hUb2tlbiIsIm1heFpvb20iLCJhdHRyaWJ1dGlvbiIsImNTZWxlY3QiLCJuU2VsZWN0IiwiY0luZGV4Iiwic2VsZWN0ZWRJbmRleCIsIm5JbmRleCIsImZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZCIsInJlc2V0UmVzdGF1cmFudHMiLCJmaWxsUmVzdGF1cmFudHNIVE1MIiwibWFya2VycyIsInJlbW92ZSIsInVsIiwiY3JlYXRlUmVzdGF1cmFudEhUTUwiLCJhZGRNYXJrZXJzVG9NYXAiLCJsaSIsImltYWdlIiwiZGl2IiwiY2xhc3NOYW1lIiwic2V0QXR0cmlidXRlIiwiaW1hZ2VVcmxGb3JSZXN0YXVyYW50IiwiYWRkcmVzcyIsInRvZ2dsZUZhdkJ0biIsIm1vcmUiLCJjbGFzc0xpc3QiLCJvbmNsaWNrIiwibG9jYXRpb24iLCJtYXBNYXJrZXJGb3JS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QVksZUFDakJvVyxFQUFLSixhQUFhLGFBQWM5YSxFQUFXbEcsS0FBT2tHLEVBQVdtQyxhQUFlbkMsRUFBV2diLFFBQVUsZ0JBQ2pHRSxFQUFLRSxRQUFVLEtBQ2IsTUFBTXplLEVBQU02RSxJQUFTeUIsaUJBQWlCakQsR0FDdENyRSxPQUFPMGYsU0FBVzFlLEdBRXBCK2QsRUFBR3RCLE9BQU84QixHQUVIUixHQU1IRCxFQUFrQixXQUFvQyxJQUFuQzVhLEVBQW1DLHVEQUFyQmhFLEtBQUtnRSxZQUMxQ0EsRUFBWUUsUUFBUUMsSUFFbEIsTUFBTTBDLEVBQVNsQixJQUFTOFosdUJBQXVCdGIsRUFBWW1ELEdBQzNEVCxFQUFPNlksR0FBRyxTQUNWLFdBQ0U1ZixPQUFPMGYsU0FBU0csS0FBTzlZLEVBQU8rWSxRQUFROWUsT0FFeENkLEtBQUt3ZSxRQUFRcFQsS0FBS3ZFIiwiZmlsZSI6ImFwcC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNjApO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiY29uc3QgY2FjaGVWZXJzaW9uID0gJzMnO1xuY29uc3QgU1RBVElDX0NBQ0hFID0gYHJlc3RhdXJhbnQtY2FjaGUtdiR7Y2FjaGVWZXJzaW9ufWA7XG5jb25zdCBJTUFHRVNfQ0FDSEUgPSBgaW1hZ2VzX2NhY2hlLXZgO1xuY29uc3QgYWxsQ2FjaGVzID0gW1xuICBTVEFUSUNfQ0FDSEUsXG4gIElNQUdFU19DQUNIRVxuXTtcbmltcG9ydCB7IG9wZW5EQiwgZGVsZXRlREIsIHdyYXAsIHVud3JhcCB9IGZyb20gJ2lkYic7XG5leHBvcnQge2RiUHJvbWlzZX1cblxuY29uc3QgZGJQcm9taXNlID0gb3BlbkRCKCdyci1kYicsIDMsIHtcbiAgdXBncmFkZShkYiwgb2xkVmVyc2lvbikge1xuICAgIHN3aXRjaCAob2xkVmVyc2lvbikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBjb25zdCBzdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycsIHsga2V5UGF0aDogJ2lkJyB9KTtcbiAgICAgICAgc3RvcmUuY3JlYXRlSW5kZXgoJ2lkJywgJ2lkJyk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGNvbnN0IHJldmlld3NTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXZpZXdzJywge1xuICAgICAgICAgIGtleVBhdGg6ICdpZCcsXG4gICAgICAgICAgLy8gYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV2aWV3c1N0b3JlLmNyZWF0ZUluZGV4KFwicmVzdGF1cmFudF9pZFwiLCBcInJlc3RhdXJhbnRfaWRcIik7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGNvbnN0IHBlbmRpbmdTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwZW5kaW5nJywge1xuICAgICAgICAgIGtleVBhdGg6ICdpZCcsXG4gICAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuXG4gY29uc3QgZ2V0UmVzdGF1cmFudHMgPSAoZXZlbnQpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmZXRjaChldmVudC5yZXF1ZXN0KVxuICAgICAgLnRoZW4ocmVzcCA9PiByZXNwLmpzb24oKSlcbiAgICAgIC50aGVuKGpzb24gPT4geyByZXNvbHZlKGpzb24pOyB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuZnVuY3Rpb24gaXNJbWFnZVVSTCh1cmwpIHtcbiAgbGV0IGltZ1R5cGVzID0gW1wicG5nXCIsIFwianBnXCIsIFwianBlZ1wiLCBcInN2Z1wiLCBcImdpZlwiXTtcbiAgbGV0IGlzSW1hZ2UgPSBmYWxzZTtcbiAgZm9yIChsZXQgdHlwZSBvZiBpbWdUeXBlcykge1xuICAgIGlmICh1cmwuZW5kc1dpdGgodHlwZSkpIHsgaXNJbWFnZSA9IHRydWU7IGJyZWFrfTtcbiAgfVxuICByZXR1cm4gaXNJbWFnZTtcbn1cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdpbnN0YWxsJywgZXZlbnQgPT4ge1xuICBldmVudC53YWl0VW50aWwoXG4gICAgY2FjaGVzLm9wZW4oU1RBVElDX0NBQ0hFKS50aGVuKGNhY2hlID0+IHtcbiAgICAgIHJldHVybiBjYWNoZS5hZGRBbGwoW1xuICAgICAgICAnLycsXG4gICAgICAgICcuL2FwcC5idW5kbGUuanMnLFxuICAgICAgICAnLi9yZXN0YXVyYW50LmJ1bmRsZS5qcycsXG4gICAgICAgICcuL2ltZy9ycl9pY29uLnBuZycsXG4gICAgICAgICcuL2Nzcy9zdHlsZXMuY3NzJ1xuICAgICAgXSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igc2V0dGluZyB1cCBpbnN0YWxsIGV2ZW50IGZvciBzdycpO1xuICAgICAgfSk7XG4gICAgfSlcbiAgKTtcbn0pO1xuXG4vLyBDbGVhbiB1bnVzZWQgY2FjaGVzIHdpdGggbmFtZXMgc3RhcnRpbmcgd2l0aCByZXN0YXVyYW50XG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2FjdGl2YXRlJywgZXZlbnQgPT4ge1xuICBldmVudC53YWl0VW50aWwoXG4gICAgY2FjaGVzLmtleXMoKS50aGVuKGNhY2hlTmFtZXMgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICBjYWNoZU5hbWVzLmZpbHRlcihjYWNoZU5hbWUgPT4ge1xuICAgICAgICAgIHJldHVybiBjYWNoZU5hbWUuc3RhcnRzV2l0aCgncmVzdGF1cmFudC0nKSAmJlxuICAgICAgICAgICAgICAgICBjYWNoZU5hbWUgIT0gU1RBVElDX0NBQ0hFO1xuICAgICAgICB9KS5tYXAoY2FjaGVOYW1lID0+IHtcbiAgICAgICAgICByZXR1cm4gY2FjaGVzLmRlbGV0ZShjYWNoZU5hbWUpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KVxuICApO1xufSk7XG5cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIGV2ZW50ID0+IHtcbiAgbGV0IGNoZWNrVXJsID0gbmV3IFVSTChldmVudC5yZXF1ZXN0LnVybCk7XG4gIGlmIChjaGVja1VybC5wb3J0ID09PSBcIjEzMzdcIikge1xuICAgIGxldCBpZCA9IGNoZWNrVXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3Jlc3RhdXJhbnRfaWQnKSAtIDA7XG4gICAgcmV0dXJuIGhhbmRsZUFKQVhFdmVudChldmVudCwgaWQpO1xuICB9IGVsc2Uge1xuICAgIGhhbmRsZU5vbkFKQVhFdmVudChldmVudCk7XG4gIH1cbn0pO1xuXG5jb25zdCBoYW5kbGVBSkFYRXZlbnQgPSAoZXZlbnQsIGlkKSA9PiB7XG4gIC8vIE9ubHkgdXNlIGZvciBjYWNoaW5nIGZvciBHZXQgZXZlbnRzXG4gIGlmKGV2ZW50LnJlcXVlc3QubWV0aG9kICE9PSBcIkdFVFwiKSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQucmVxdWVzdCk7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuICAgIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgICAgZmV0Y2goZXZlbnQucmVxdWVzdClcbiAgICApXG4gIH0gZWxzZSBpZihldmVudC5yZXF1ZXN0LnVybC5pbmRleE9mKFwicmVzdGF1cmFudHNcIikgPiAtMSkge1xuICAgIGhhbmRsZVJlc3RhdXJhbnRFdmVudHMoZXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdzdGFydGluZyBoYW5kbGluZyBmcm9tIHJldmlld3MgZXZlbnQnKVxuICAgIGhhbmRsZVJldmlld3NFdmVudHMoZXZlbnQsIGlkKTtcbiAgfVxufVxuXG5jb25zdCBoYW5kbGVSZXN0YXVyYW50RXZlbnRzID0gKGV2ZW50KSA9PiB7XG4gIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgICAgZGJQcm9taXNlLnRoZW4oIGRiID0+IHtcbiAgICAgICAgcmV0dXJuIGRiXG4gICAgICAgICAgLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycpXG4gICAgICAgICAgLm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpXG4gICAgICAgICAgLmdldEFsbCgpO1xuICAgICAgfSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Jlc3BvbmRpbmcgZnJvbSBoYW5kbGVyZXN0YXVyYW50ZXZlbnRzIGZyb20gc2VydmljZXdvcmtlcicpO1xuICAgICAgICByZXR1cm4gKChkYXRhLmxlbmd0aCAmJiBkYXRhKSB8fCBnZXRSZXN0YXVyYW50cyhldmVudClcbiAgICAgICAgICAudGhlbiggcmVzdGF1cmFudHMgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZldGNoZWQgbm93IHN0b3JpbmcnKTtcbiAgICAgICAgICAgIHJldHVybiBkYlByb21pc2UudGhlbihkYiA9PiB7XG4gICAgICAgICAgICAgIGxldCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgICAgICAgbGV0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICAgICAgICAgIHJlc3RhdXJhbnRzLmZvckVhY2goZnVuY3Rpb24ocmVzdGF1cmFudCl7XG4gICAgICAgICAgICAgICAgc3RvcmUucHV0KHJlc3RhdXJhbnQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHR4LmRvbmU7XG4gICAgICAgICAgICB9KS50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdG9yZWQgcmVzdGF1cmFudHMsIG5vdyByZXR1cm5pbmcnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oZmluYWxSZXNwb25zZSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZmluYWxSZXNwb25zZSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShmaW5hbFJlc3BvbnNlKSk7XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFwiRXJyb3IgZmV0Y2hpbmcgZGF0YVwiLCB7c3RhdHVzOiA1MDB9KTtcbiAgICB9KVxuICApXG59XG5cbmNvbnN0IGhhbmRsZVJldmlld3NFdmVudHMgPSAoZXZlbnQsIGlkKSA9PiB7XG4gIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgIHJldHVybiBkYlxuICAgICAgICAudHJhbnNhY3Rpb24oJ3Jldmlld3MnKVxuICAgICAgICAub2JqZWN0U3RvcmUoJ3Jldmlld3MnKVxuICAgICAgICAuaW5kZXgoXCJyZXN0YXVyYW50X2lkXCIpXG4gICAgICAgIC5nZXRBbGwoaWQpO1xuICAgIH0pLnRoZW4oIGRhdGEgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3NlcnZpY2V3b3JrZXIgaGFuZGxlIHJldmlld3MnKTtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgcmV0dXJuIChkYXRhLmxlbmd0aCAmJiBkYXRhKSB8fCBmZXRjaChldmVudC5yZXF1ZXN0KVxuICAgICAgICAudGhlbihmZXRjaFJlc3BvbnNlID0+IHtcbiAgICAgICAgICByZXR1cm4gZmV0Y2hSZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCByZXZpZXdzID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygndXNpbmcgc2VydmljZXdvcmtlciBmZXRjaCcpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGFydGluZyB0byBzdG9yZSByZXZpZXdzJyk7XG4gICAgICAgICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgICAgICAgIGxldCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXdzJywgJ3JlYWR3cml0ZScpXG4gICAgICAgICAgICBsZXQgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmV2aWV3cycpO1xuICAgICAgICAgICAgcmV2aWV3cy5mb3JFYWNoKGZ1bmN0aW9uKHJldmlldykge1xuICAgICAgICAgICAgICBzdG9yZS5wdXQocmV2aWV3KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHR4LmRvbmU7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbiggKCkgPT4gcmV2aWV3cylcbiAgICAgICAgfSlcbiAgICB9KS50aGVuKGZpbmFsUmVzcG9uc2UgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShmaW5hbFJlc3BvbnNlKSk7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShcIkVycm9yIGZldGNoaW5nIGRhdGFcIiwge3N0YXR1czogNTAwfSk7XG4gICAgfSkpXG59XG5cbmNvbnN0IGhhbmRsZU5vbkFKQVhFdmVudCA9IChldmVudCkgPT4ge1xuICAvLyBDaGVjayBpZiB0aGUgSFRNTCByZXF1ZXN0IGhhcyBwcmV2aW91c2x5IGJlZW4gY2FjaGVkLiBJZiBzbywgcmV0dXJuIHRoZVxuICAvLyByZXNwb25zZSBmcm9tIHRoZSBjYWNoZS4gSWYgbm90LCBmZXRjaCB0aGUgcmVxdWVzdCwgY2FjaGUgaXQsIGFuZCB0aGVuIHJldHVyblxuICAvLyBpdC5cbiAgZXZlbnQucmVzcG9uZFdpdGgoXG4gICAgY2FjaGVzLm1hdGNoKGV2ZW50LnJlcXVlc3QpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8IGZldGNoKGV2ZW50LnJlcXVlc3QpLnRoZW4oZmV0Y2hSZXNwb25zZSA9PiB7XG4gICAgICAgIGxldCB1c2VDYWNoZSA9IGlzSW1hZ2VVUkwoZXZlbnQucmVxdWVzdC51cmwpID8gIElNQUdFU19DQUNIRSA6IFNUQVRJQ19DQUNIRTtcbiAgICAgICAgcmV0dXJuIGNhY2hlc1xuICAgICAgICAgIC5vcGVuKHVzZUNhY2hlKVxuICAgICAgICAgIC50aGVuKGNhY2hlID0+IHtcbiAgICAgICAgICAgIGNhY2hlLnB1dChldmVudC5yZXF1ZXN0LCBmZXRjaFJlc3BvbnNlLmNsb25lKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGZldGNoUmVzcG9uc2U7XG4gICAgICAgICAgfSk7XG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoXCJBcHBsaWNhdGlvbiBpcyBub3QgY29ubmVjdGVkIHRvIHRoZSBpbnRlcm5ldFwiLCB7XG4gICAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgICAgc3RhdHVzVGV4dDogXCJBcHBsaWNhdGlvbiBpcyBub3QgY29ubmVjdGVkIHRvIHRoZSBpbnRlcm5ldFwiXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSlcbiAgKTtcblxuICAvLyBVcGRhdGVzIHRoZSBkYXRhIGZyb20gdGhlIG5ldHdvcmsgdG8gdXNlIG9uIG5leHQgcmVxdWVzdC5cbiAgZXZlbnQud2FpdFVudGlsKHVwZGF0ZShldmVudC5yZXF1ZXN0KSk7XG59XG5cbmNvbnN0IHVwZGF0ZSA9IChyZXF1ZXN0KSA9PiB7XG4gIGxldCB1c2VDYWNoZSA9IGlzSW1hZ2VVUkwocmVxdWVzdC51cmwpID8gIElNQUdFU19DQUNIRSA6IFNUQVRJQ19DQUNIRTtcbiAgcmV0dXJuIGNhY2hlcy5vcGVuKHVzZUNhY2hlKS50aGVuKGNhY2hlID0+IHtcbiAgICByZXR1cm4gZmV0Y2gocmVxdWVzdCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICByZXR1cm4gY2FjaGUucHV0KHJlcXVlc3QsIHJlc3BvbnNlKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvKipcbiAqIENvbW1vbiBkYXRhYmFzZSBoZWxwZXIgZnVuY3Rpb25zLlxuICovXG5pbXBvcnQgeyBvcGVuREIsIGRlbGV0ZURCLCB3cmFwLCB1bndyYXAgfSBmcm9tICdpZGInO1xuaW1wb3J0IHtkYlByb21pc2V9IGZyb20gJy4uL3N3LmpzJztcblxuLy8gY29uc3QgZGJQcm9taXNlID0gb3BlbkRCKCdyci1kYicsIDMsIHtcbi8vICAgdXBncmFkZShkYiwgb2xkVmVyc2lvbikge1xuLy8gICAgIHN3aXRjaCAob2xkVmVyc2lvbikge1xuLy8gICAgICAgY2FzZSAwOlxuLy8gICAgICAgICBjb25zdCBzdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycsIHsga2V5UGF0aDogJ2lkJywgfSk7XG4vLyAgICAgICAgIHN0b3JlLmNyZWF0ZUluZGV4KCdpZCcsICdpZCcpO1xuLy8gICAgICAgY2FzZSAxOlxuLy8gICAgICAgICBjb25zdCByZXZpZXdzU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgncmV2aWV3cycsIHtcbi8vICAgICAgICAgICBrZXlQYXRoOiAnaWQnLFxuLy8gICAgICAgICB9KTtcbi8vICAgICAgICAgcmV2aWV3c1N0b3JlLmNyZWF0ZUluZGV4KFwicmVzdGF1cmFudF9pZFwiLCBcInJlc3RhdXJhbnRfaWRcIik7XG4vLyAgICAgICBjYXNlIDI6XG4vLyAgICAgICAgIGNvbnN0IHBlbmRpbmdTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwZW5kaW5nJywge1xuLy8gICAgICAgICAgIGtleVBhdGg6ICdpZCcsXG4vLyAgICAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuLy8gICAgICAgICB9KVxuLy8gICAgIH1cbi8vICAgfVxuLy8gfSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERCSGVscGVyIHtcblxuICAvKipcbiAgICogRGF0YWJhc2UgVVJMLlxuICAgKiBDaGFuZ2UgdGhpcyB0byByZXN0YXVyYW50cy5qc29uIGZpbGUgbG9jYXRpb24gb24geW91ciBzZXJ2ZXIuXG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEFCQVNFX1VSTCgpIHtcbiAgICBjb25zdCBwb3J0ID0gMTMzNy8vIENoYW5nZSB0aGlzIHRvIHlvdXIgc2VydmVyIHBvcnRcbiAgICByZXR1cm4gYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fS9yZXN0YXVyYW50c2A7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERBVEFCQVNFX1JFVklFV1NfVVJMKCkge1xuICAgIGNvbnN0IHBvcnQgPSAxMzM3IC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgc2VydmVyIHBvcnRcbiAgICByZXR1cm4gYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fS9yZXZpZXdzYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbGwgcmVzdGF1cmFudHMuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50cyhjYWxsYmFjaykge1xuICAgIGZldGNoKERCSGVscGVyLkRBVEFCQVNFX1VSTCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24ocmVzdGF1cmFudHMpIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdGF1cmFudHMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZmV0Y2hSZXZpZXdzKCByZXN0YXVyYW50X2lkLCBjYWxsYmFjaykge1xuICAgIGxldCBmZXRjaFVSTCA9IERCSGVscGVyLkRBVEFCQVNFX1JFVklFV1NfVVJMICsgXCIvP3Jlc3RhdXJhbnRfaWQ9XCIgKyByZXN0YXVyYW50X2lkO1xuICAgIGZldGNoKGZldGNoVVJMKS50aGVuKCByZXNwb25zZSA9PiB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pLnRoZW4ocmV2aWV3cyA9PiB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJldmlld3MpO1xuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUlkKGlkLCBjYWxsYmFjaykge1xuICAgIC8vIGZldGNoIGFsbCByZXN0YXVyYW50cyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZXN0YXVyYW50ID0gcmVzdGF1cmFudHMuZmluZChyID0+IHIuaWQgPT0gaWQpO1xuICAgICAgICBpZiAocmVzdGF1cmFudCkgeyAvLyBHb3QgdGhlIHJlc3RhdXJhbnRcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50KTtcbiAgICAgICAgfSBlbHNlIHsgLy8gUmVzdGF1cmFudCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZGF0YWJhc2VcbiAgICAgICAgICBjYWxsYmFjaygnUmVzdGF1cmFudCBkb2VzIG5vdCBleGlzdCcsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIHR5cGUgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lKGN1aXNpbmUsIGNhbGxiYWNrKSB7XG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzICB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gY3Vpc2luZSB0eXBlXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBuZWlnaGJvcmhvb2Qgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlOZWlnaGJvcmhvb2QobmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gbmVpZ2hib3Job29kXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgYW5kIGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxuICAgKi9cbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZChjdWlzaW5lLCBuZWlnaGJvcmhvb2QsIGNhbGxiYWNrKSB7XG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHJlc3VsdHMgPSByZXN0YXVyYW50c1xuICAgICAgICBpZiAoY3Vpc2luZSAhPSAnYWxsJykgeyAvLyBmaWx0ZXIgYnkgY3Vpc2luZVxuICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZWlnaGJvcmhvb2QgIT0gJ2FsbCcpIHsgLy8gZmlsdGVyIGJ5IG5laWdoYm9yaG9vZFxuICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIG5laWdoYm9yaG9vZHMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXG4gICAqL1xuICBzdGF0aWMgZmV0Y2hOZWlnaGJvcmhvb2RzKGNhbGxiYWNrKSB7XG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gR2V0IGFsbCBuZWlnaGJvcmhvb2RzIGZyb20gYWxsIHJlc3RhdXJhbnRzXG4gICAgICAgIGNvbnN0IG5laWdoYm9yaG9vZHMgPSByZXN0YXVyYW50cy5tYXAoKHYsIGkpID0+IHJlc3RhdXJhbnRzW2ldLm5laWdoYm9yaG9vZClcbiAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXMgZnJvbSBuZWlnaGJvcmhvb2RzXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzLmZpbHRlcigodiwgaSkgPT4gbmVpZ2hib3Job29kcy5pbmRleE9mKHYpID09IGkpXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZU5laWdoYm9yaG9vZHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGFsbCBjdWlzaW5lcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cbiAgICovXG4gIHN0YXRpYyBmZXRjaEN1aXNpbmVzKGNhbGxiYWNrKSB7XG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gR2V0IGFsbCBjdWlzaW5lcyBmcm9tIGFsbCByZXN0YXVyYW50c1xuICAgICAgICBjb25zdCBjdWlzaW5lcyA9IHJlc3RhdXJhbnRzLm1hcCgodiwgaSkgPT4gcmVzdGF1cmFudHNbaV0uY3Vpc2luZV90eXBlKVxuICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIGN1aXNpbmVzXG4gICAgICAgIGNvbnN0IHVuaXF1ZUN1aXNpbmVzID0gY3Vpc2luZXMuZmlsdGVyKCh2LCBpKSA9PiBjdWlzaW5lcy5pbmRleE9mKHYpID09IGkpXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZUN1aXNpbmVzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0YXVyYW50IHBhZ2UgVVJMLlxuICAgKi9cbiAgc3RhdGljIHVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgIHJldHVybiAoYC9yZXN0YXVyYW50Lmh0bWw/aWQ9JHtyZXN0YXVyYW50LmlkfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RhdXJhbnQgaW1hZ2UgVVJMLlxuICAgKi9cbiAgc3RhdGljIGltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XG4gICAgaWYoIXJlc3RhdXJhbnQucGhvdG9ncmFwaCkge1xuICAgICAgcmV0dXJuIChgL2ltZy8ke3Jlc3RhdXJhbnQuaWR9LmpwZ2ApXG4gICAgfVxuICAgIHJldHVybiAoYC9pbWcvJHtyZXN0YXVyYW50LnBob3RvZ3JhcGh9LmpwZ2ApO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcCBtYXJrZXIgZm9yIGEgcmVzdGF1cmFudC5cbiAgICovXG4gIHN0YXRpYyBtYXBNYXJrZXJGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIG1hcCkge1xuICAgIC8vIGh0dHBzOi8vbGVhZmxldGpzLmNvbS9yZWZlcmVuY2UtMS4zLjAuaHRtbCNtYXJrZXJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgTC5tYXJrZXIoW3Jlc3RhdXJhbnQubGF0bG5nLmxhdCwgcmVzdGF1cmFudC5sYXRsbmcubG5nXSxcbiAgICAgIHt0aXRsZTogcmVzdGF1cmFudC5uYW1lLFxuICAgICAgYWx0OiByZXN0YXVyYW50Lm5hbWUsXG4gICAgICB1cmw6IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudClcbiAgICAgIH0pXG4gICAgICBtYXJrZXIuYWRkVG8obmV3TWFwKTtcbiAgICByZXR1cm4gbWFya2VyO1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUNhY2hlZFJlc3RhdXJhbnRSZXZpZXcoZm9ybURhdGEpIHtcbiAgICBjb25zb2xlLmxvZygndXBkYXRpbmcgY2FjaGUgZm9yIG5ldyByZXZpZXcnLCBmb3JtRGF0YSk7XG4gICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKCBkYiA9PiB7XG4gICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXdzJywgJ3JlYWR3cml0ZScpO1xuICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmV2aWV3cycpO1xuICAgICAgc3RvcmUucHV0KGZvcm1EYXRhKTtcbiAgICAgIGNvbnNvbGUubG9nKCdzdWNjZXNzZnVsbHkgcHV0IHJldmlldyBpbiBzdG9yZScpO1xuICAgICAgcmV0dXJuIHR4LmRvbmU7XG4gICAgfSlcbiAgfVxuXG4vKipcbiogR3JhYiB0aGUgb3JpZ2luYWwgcmV2aWV3IGZyb20gdGhlIGRiIGFuZCByZXBsYWNlIHdpdGggZWRpdGVkIHJldmlld1xuKi9cbiAgc3RhdGljIGVkaXRSZXZpZXcoZm9ybURhdGEsIGVkaXRpbmcpIHtcbiAgICByZXR1cm4gZGJQcm9taXNlLnRoZW4oZGIgPT4ge1xuICAgICAgbGV0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jldmlld3MnKTtcbiAgICAgIGxldCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXZpZXdzJyk7XG4gICAgICByZXR1cm4gc3RvcmUuZ2V0KGVkaXRpbmcuaWQpO1xuICAgIH0pLnRoZW4oIHJldmlldyA9PiB7XG4gICAgICByZXR1cm4gZGJQcm9taXNlLnRoZW4oZGIgPT4ge1xuICAgICAgICBsZXQgdHggPSBkYi50cmFuc2FjdGlvbigncmV2aWV3cycsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgbGV0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jldmlld3MnKTtcbiAgICAgICAgbGV0IG5ld1JldmlldyA9IE9iamVjdC5hc3NpZ24oe30sIHJldmlldywgZm9ybURhdGEpO1xuICAgICAgICBzdG9yZS5wdXQobmV3UmV2aWV3KTtcbiAgICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlO1xuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBzdWJtaXRSZXZpZXcoZm9ybURhdGEsIGVkaXRpbmcpIHtcbiAgICBjb25zb2xlLmxvZyhlZGl0aW5nKTtcbiAgICBjb25zdCBtZXRob2QgPSBlZGl0aW5nID8gXCJQVVRcIiA6IFwiUE9TVFwiO1xuICAgIGNvbnN0IHVybCA9IGVkaXRpbmcgPyBgJHtEQkhlbHBlci5EQVRBQkFTRV9SRVZJRVdTX1VSTH0vJHtlZGl0aW5nLmlkfWAgOiBEQkhlbHBlci5EQVRBQkFTRV9SRVZJRVdTX1VSTDtcbiAgICBpZiAoZWRpdGluZykge1xuICAgICAgREJIZWxwZXIuZWRpdFJldmlldyhmb3JtRGF0YSwgZWRpdGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERCSGVscGVyLnVwZGF0ZUNhY2hlZFJlc3RhdXJhbnRSZXZpZXcoZm9ybURhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gREJIZWxwZXIuYWRkUGVuZGluZ1JlcXVlc3RUb1F1ZSh1cmwsIG1ldGhvZCwgZm9ybURhdGEpO1xuICB9XG5cbiAgc3RhdGljIGFkZFBlbmRpbmdSZXF1ZXN0VG9RdWUodXJsLCBtZXRob2QsIGZvcm1EYXRhKSB7XG4gICAgLy9vcGVuIGRhdGFiYXNlIGFuZCBhZGQgcmVxdWVzdCBkZXRhaWxzIHRvIHRoZSBwZW5kaW5nIHN0b3JlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3BlbmRpbmcnLCAncmVhZHdyaXRlJyk7XG4gICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdwZW5kaW5nJyk7XG4gICAgICByZXR1cm4gc3RvcmUucHV0KHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVybCxcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgRXJyb3IgcHV0dGluZyBkYXRhIGluIHBlbmRpbmcgZGI6ICR7ZXJyb3J9YCk7XG4gICAgfSkudGhlbihEQkhlbHBlci5uZXh0UGVuZGluZygoZXJyb3IsIGpzb24pID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmUoanNvbik7XG4gICAgfSkpO1xuICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBuZXh0UGVuZGluZyhjYWxsYmFjaykge1xuICAgIERCSGVscGVyLmF0dGVtcHRDb21taXRQZW5kaW5nKERCSGVscGVyLm5leHRQZW5kaW5nKS50aGVuKGogPT4ge1xuICAgICAgY29uc29sZS5sb2coaik7XG4gICAgICBjYWxsYmFjayhudWxsLCBqKTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGF0dGVtcHRDb21taXRQZW5kaW5nKGNhbGxiYWNrKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBwZW5kaW5nIGl0ZW1zIHVudGlsIHRoZXJlIGlzIGEgbmV0d29yayBmYWlsdXJlXG4gICAgbGV0IHVybDtcbiAgICBsZXQgbWV0aG9kO1xuICAgIGxldCBib2R5O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBkYlByb21pc2UudGhlbihkYiA9PiB7XG4gICAgICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkRCIG5vdCBhdmFpbGFibGVcIik7XG4gICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbigncGVuZGluZycsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncGVuZGluZycpO1xuICAgICAgICBzdG9yZS5vcGVuQ3Vyc29yKCkudGhlbiggY3Vyc29yID0+IHtcbiAgICAgICAgICBpZiAoIWN1cnNvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ25vIG1vcmUgY3Vyc29ycycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN1cnNvci52YWx1ZTtcbiAgICAgICAgICB1cmwgPSB2YWx1ZS5kYXRhLnVybDtcbiAgICAgICAgICBtZXRob2QgPSB2YWx1ZS5kYXRhLm1ldGhvZDtcbiAgICAgICAgICBib2R5ID0gdmFsdWUuZGF0YS5mb3JtRGF0YTtcblxuICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBwYXJhbWV0ZXIgdGhlbiB3ZSdyZSBvbiBhIGJhZCByZWNvcmQgdGhhdCBzaG91bGQgYmUgdG9zc2VkXG4gICAgICAgICAgLy8gYW5kIHRoZW4gbW92ZSBvblxuICAgICAgICAgIGlmICgoIXVybCB8fCAhbWV0aG9kKSB8fCAobWV0aG9kID09PSBcIlBPU1RcIiAmJiAhYm9keSkpIHtcbiAgICAgICAgICAgIGN1cnNvclxuICAgICAgICAgICAgICAuZGVsZXRlKClcbiAgICAgICAgICAgICAgLnRoZW4oY2FsbGJhY2spO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsZXRlZCBhIGJhZCBjdXJzb3InKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2RcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmZXRjaCh1cmwsIHByb3BlcnRpZXMpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rICYmICFyZXNwb25zZS5yZWRpcmVjdGVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIHRoZSByZXNwb25zZSBhbmQgd2UgYXJlIG9mZmxpbmUnKTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oanNvbiA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGRlbHR4ID0gZGIudHJhbnNhY3Rpb24oJ3BlbmRpbmcnLCAncmVhZHdyaXRlJyk7XG4gICAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gZGVsdHgub2JqZWN0U3RvcmUoJ3BlbmRpbmcnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlLm9wZW5DdXJzb3IoKVxuICAgICAgICAgICAgICAudGhlbiggY3Vyc29yID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3Vyc29yLmRlbGV0ZSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coY3Vyc29yLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWxldGVkIGl0ZW0gZnJvbSBwZW5kaW5nIHN0b3JlJyk7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coanNvbik7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShqc29uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBuZXR3b3JrJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgc3luY1Jlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgICAgIGxldCB1cmwgPSBgaHR0cDovL2xvY2FsaG9zdDoxMzM3L3Jlc3RhdXJhbnRzLyR7cmVzdGF1cmFudC5pZH0vP2lzX2Zhdm9yaXRlPSR7cmVzdGF1cmFudC5pc19mYXZvcml0ZX1gO1xuICAgICAgIGxldCBtZXRob2QgPSAnUFVUJztcbiAgICAgICBEQkhlbHBlci5hZGRQZW5kaW5nUmVxdWVzdFRvUXVlKHVybCwgbWV0aG9kKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgdXBkYXRpbmcgcmVzdGF1cmFudCBiYWNrZW5kIGRhdGEuLi4nLCBlcnJvciwgcmVzdGF1cmFudCk7XG4gICAgICAgfSk7XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlUmVzdGF1cmFudEluREIobmV3X3Jlc3RhdXJhbnQpIHtcbiAgICByZXR1cm4gZGJQcm9taXNlLnRoZW4oZnVuY3Rpb24oZGIpe1xuICAgICAgbGV0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnRzJywgJ3JlYWR3cml0ZScpO1xuICAgICAgbGV0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XG4gICAgICBzdG9yZS5wdXQobmV3X3Jlc3RhdXJhbnQpO1xuICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlXG4gICAgfSkudGhlbihmdW5jdGlvbigpe1xuICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3X3Jlc3RhdXJhbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIHRvZ2dsZUZhdkJ0bihyZXN0YXVyYW50X2lkKSB7XG4gICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKCBkYiA9PiB7XG4gICAgICBsZXQgdHggPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnKTtcbiAgICAgIGxldCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpO1xuICAgICAgcmV0dXJuIHN0b3JlLmdldChyZXN0YXVyYW50X2lkKTtcbiAgICB9KS50aGVuKCByZXN0YXVyYW50ID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHJlc3RhdXJhbnQpO1xuICAgICAgY29uc3QgbmV3X3Jlc3RhdXJhbnQgPSBPYmplY3QuYXNzaWduKHt9LCByZXN0YXVyYW50KTtcbiAgICAgIG5ld19yZXN0YXVyYW50LmlzX2Zhdm9yaXRlID0gKHJlc3RhdXJhbnQuaXNfZmF2b3JpdGUgPT09ICd0cnVlJyB8fCByZXN0YXVyYW50LmlzX2Zhdm9yaXRlID09PSB0cnVlKSA/XG4gICAgICAnZmFsc2UnIDogJ3RydWUnO1xuICAgICAgREJIZWxwZXIuc3luY1Jlc3RhdXJhbnQobmV3X3Jlc3RhdXJhbnQpO1xuICAgICAgcmV0dXJuIERCSGVscGVyLnVwZGF0ZVJlc3RhdXJhbnRJbkRCKG5ld19yZXN0YXVyYW50KTtcbiAgICB9KS50aGVuKCBuZXdfcmVzdGF1cmFudCA9PiB7XG4gICAgICBjb25zdCBmYXZCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZmF2LWJ0bi0ke25ld19yZXN0YXVyYW50LmlkfWApO1xuICAgICAgaWYobmV3X3Jlc3RhdXJhbnQuaXNfZmF2b3JpdGUgPT09ICd0cnVlJyB8fCBuZXdfcmVzdGF1cmFudC5pc19mYXZvcml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBmYXZCdG4uaW5uZXJIVE1MID0gJ0Zhdm9yaXRlZCEnO1xuICAgICAgICBmYXZCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICdob3RwaW5rJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZhdkJ0bi5pbm5lckhUTUwgPSAnQWRkIHRvIGZhdm9yaXRlJztcbiAgICAgICAgZmF2QnRuLnN0eWxlLmJhY2tncm91bmQgPSAnZ3JleSc7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVDYWNoZWRSZXZpZXcocmV2aWV3X2lkKSB7XG4gICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcbiAgICAgIGxldCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdyZXZpZXdzJywgJ3JlYWR3cml0ZScpXG4gICAgICBsZXQgc3RvcmUgPSAgdHgub2JqZWN0U3RvcmUoJ3Jldmlld3MnKTtcbiAgICAgIHN0b3JlLmRlbGV0ZShyZXZpZXdfaWQpO1xuICAgICAgY29uc29sZS5sb2coJ2RlbGV0ZWQgcmV2aWV3IGZyb20gaWRiJyk7XG4gICAgICByZXR1cm4gdHguY29tcGxldGU7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2Vycm9yIGRlbGV0aW5nIHJldmlldzogJywgZXJyb3IpO1xuICAgIH0pO1xuICB9XG5cblxuICBzdGF0aWMgZGVsZXRlUmV2aWV3KHJldmlld19pZCkge1xuICAgIGNvbnN0IHVybCA9IGAke0RCSGVscGVyLkRBVEFCQVNFX1JFVklFV1NfVVJMfS8ke3Jldmlld19pZH1gO1xuICAgIGNvbnNvbGUubG9nKHVybCk7XG4gICAgY29uc3QgbWV0aG9kID0gXCJERUxFVEVcIjtcbiAgICBEQkhlbHBlci5kZWxldGVDYWNoZWRSZXZpZXcocmV2aWV3X2lkKTtcbiAgICByZXR1cm4gREJIZWxwZXIuYWRkUGVuZGluZ1JlcXVlc3RUb1F1ZSh1cmwsIG1ldGhvZCk7XG4gIH1cblxuICBzdGF0aWMgZGVsZXRlVGVtcFJldmlldyh0ZW1wX2lkKSB7XG4gICAgZGJQcm9taXNlLnRoZW4oZGIgPT4ge1xuICAgICAgbGV0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jldmlld3MnLCAncmVhZHdyaXRlJylcbiAgICAgIGxldCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXZpZXdzJyk7XG4gICAgICBzdG9yZS5kZWxldGUodGVtcF9pZCk7XG4gICAgICBjb25zb2xlLmxvZygnZGVsZXRlZCBvbGR2ZXJzaW9uIG9mIHJldmlldyB3aXRoIG9sZCBpZCcpO1xuICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlO1xuICAgIH0pLmNhdGNoKCBlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnZXJyb3IgZGVsZXRpbmcgdGVtcCByZXZpZXc6ICcsIGVycm9yKTtcbiAgICB9KVxuICB9XG59XG5cblxuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuNScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKGMgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcclxubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xyXG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cclxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XHJcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XHJcbiAgICAgICAgKGlkYlByb3h5YWJsZVR5cGVzID0gW1xyXG4gICAgICAgICAgICBJREJEYXRhYmFzZSxcclxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXHJcbiAgICAgICAgICAgIElEQkluZGV4LFxyXG4gICAgICAgICAgICBJREJDdXJzb3IsXHJcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxyXG4gICAgICAgIF0pKTtcclxufVxyXG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cclxuZnVuY3Rpb24gZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKSB7XHJcbiAgICByZXR1cm4gKGN1cnNvckFkdmFuY2VNZXRob2RzIHx8XHJcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xyXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmFkdmFuY2UsXHJcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXHJcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxyXG4gICAgICAgIF0pKTtcclxufVxyXG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xyXG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcclxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xyXG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XHJcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xyXG4gICAgICAgICAgICB1bmxpc3RlbigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcclxuICAgIH0pO1xyXG4gICAgcHJvbWlzZVxyXG4gICAgICAgIC50aGVuKHZhbHVlID0+IHtcclxuICAgICAgICAvLyBTaW5jZSBjdXJzb3JpbmcgcmV1c2VzIHRoZSBJREJSZXF1ZXN0ICgqc2lnaCopLCB3ZSBjYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsXHJcbiAgICAgICAgLy8gKHNlZSB3cmFwRnVuY3Rpb24pLlxyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQkN1cnNvcikge1xyXG4gICAgICAgICAgICBjdXJzb3JSZXF1ZXN0TWFwLnNldCh2YWx1ZSwgcmVxdWVzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENhdGNoaW5nIHRvIGF2b2lkIFwiVW5jYXVnaHQgUHJvbWlzZSBleGNlcHRpb25zXCJcclxuICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICAvLyBUaGlzIG1hcHBpbmcgZXhpc3RzIGluIHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBidXQgZG9lc24ndCBkb2Vzbid0IGV4aXN0IGluIHRyYW5zZm9ybUNhY2hlLiBUaGlzXHJcbiAgICAvLyBpcyBiZWNhdXNlIHdlIGNyZWF0ZSBtYW55IHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdC5cclxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XHJcbiAgICByZXR1cm4gcHJvbWlzZTtcclxufVxyXG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcclxuICAgIC8vIEVhcmx5IGJhaWwgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIGEgZG9uZSBwcm9taXNlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxyXG4gICAgaWYgKHRyYW5zYWN0aW9uRG9uZU1hcC5oYXModHgpKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xyXG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcclxuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB1bmxpc3RlbigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvcik7XHJcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcclxuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcclxuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcclxuICAgIH0pO1xyXG4gICAgLy8gQ2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cclxuICAgIHRyYW5zYWN0aW9uRG9uZU1hcC5zZXQodHgsIGRvbmUpO1xyXG59XHJcbmxldCBpZGJQcm94eVRyYXBzID0ge1xyXG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcclxuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgdHJhbnNhY3Rpb24uZG9uZS5cclxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdkb25lJylcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XHJcbiAgICAgICAgICAgIC8vIFBvbHlmaWxsIGZvciBvYmplY3RTdG9yZU5hbWVzIGJlY2F1c2Ugb2YgRWRnZS5cclxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvYmplY3RTdG9yZU5hbWVzJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5vYmplY3RTdG9yZU5hbWVzIHx8IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5nZXQodGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBNYWtlIHR4LnN0b3JlIHJldHVybiB0aGUgb25seSBzdG9yZSBpbiB0aGUgdHJhbnNhY3Rpb24sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgbWFueS5cclxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxyXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldFtwcm9wXSk7XHJcbiAgICB9LFxyXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xyXG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbiAmJlxyXG4gICAgICAgICAgICAocHJvcCA9PT0gJ2RvbmUnIHx8IHByb3AgPT09ICdzdG9yZScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQ7XHJcbiAgICB9LFxyXG59O1xyXG5mdW5jdGlvbiBhZGRUcmFwcyhjYWxsYmFjaykge1xyXG4gICAgaWRiUHJveHlUcmFwcyA9IGNhbGxiYWNrKGlkYlByb3h5VHJhcHMpO1xyXG59XHJcbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XHJcbiAgICAvLyBEdWUgdG8gZXhwZWN0ZWQgb2JqZWN0IGVxdWFsaXR5ICh3aGljaCBpcyBlbmZvcmNlZCBieSB0aGUgY2FjaGluZyBpbiBgd3JhcGApLCB3ZVxyXG4gICAgLy8gb25seSBjcmVhdGUgb25lIG5ldyBmdW5jIHBlciBmdW5jLlxyXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXHJcbiAgICBpZiAoZnVuYyA9PT0gSURCRGF0YWJhc2UucHJvdG90eXBlLnRyYW5zYWN0aW9uICYmXHJcbiAgICAgICAgISgnb2JqZWN0U3RvcmVOYW1lcycgaW4gSURCVHJhbnNhY3Rpb24ucHJvdG90eXBlKSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xyXG4gICAgICAgICAgICBjb25zdCB0eCA9IGZ1bmMuY2FsbCh1bndyYXAodGhpcyksIHN0b3JlTmFtZXMsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuc2V0KHR4LCBzdG9yZU5hbWVzLnNvcnQgPyBzdG9yZU5hbWVzLnNvcnQoKSA6IFtzdG9yZU5hbWVzXSk7XHJcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxyXG4gICAgLy8gSURCLCB5b3UgYWR2YW5jZSB0aGUgY3Vyc29yIGFuZCB3YWl0IGZvciBhIG5ldyAnc3VjY2Vzcycgb24gdGhlIElEQlJlcXVlc3QgdGhhdCBnYXZlIHlvdSB0aGVcclxuICAgIC8vIGN1cnNvci4gSXQncyBraW5kYSBsaWtlIGEgcHJvbWlzZSB0aGF0IGNhbiByZXNvbHZlIHdpdGggbWFueSB2YWx1ZXMuIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlXHJcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXHJcbiAgICAvLyB1bmRlZmluZWQgaWYgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIGhhcyBiZWVuIHJlYWNoZWQuXHJcbiAgICBpZiAoZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKS5pbmNsdWRlcyhmdW5jKSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXHJcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXHJcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHdyYXAoY3Vyc29yUmVxdWVzdE1hcC5nZXQodGhpcykpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXHJcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cclxuICAgICAgICByZXR1cm4gd3JhcChmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncykpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xyXG4gICAgLy8gVGhpcyBkb2Vzbid0IHJldHVybiwgaXQganVzdCBjcmVhdGVzIGEgJ2RvbmUnIHByb21pc2UgZm9yIHRoZSB0cmFuc2FjdGlvbixcclxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXHJcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcclxuICAgICAgICBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odmFsdWUpO1xyXG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xyXG4gICAgLy8gUmV0dXJuIHRoZSBzYW1lIHZhbHVlIGJhY2sgaWYgd2UncmUgbm90IGdvaW5nIHRvIHRyYW5zZm9ybSBpdC5cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XHJcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcclxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlJlcXVlc3QpXHJcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xyXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxyXG4gICAgLy8gVGhpcyBpcyBmYXN0ZXIsIGJ1dCBpdCBhbHNvIHByb3ZpZGVzIG9iamVjdCBlcXVhbGl0eS5cclxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxyXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xyXG4gICAgY29uc3QgbmV3VmFsdWUgPSB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKTtcclxuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxyXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXHJcbiAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XHJcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xyXG59XHJcbmNvbnN0IHVud3JhcCA9ICh2YWx1ZSkgPT4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG5cbmV4cG9ydCB7IHdyYXAgYXMgYSwgYWRkVHJhcHMgYXMgYiwgaW5zdGFuY2VPZkFueSBhcyBjLCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgZCwgdW53cmFwIGFzIGUgfTtcbiIsImltcG9ydCB7IGEgYXMgd3JhcCwgYiBhcyBhZGRUcmFwcyB9IGZyb20gJy4vY2h1bmsuanMnO1xuZXhwb3J0IHsgZSBhcyB1bndyYXAsIGEgYXMgd3JhcCB9IGZyb20gJy4vY2h1bmsuanMnO1xuXG4vKipcclxuICogT3BlbiBhIGRhdGFiYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cclxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXHJcbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXHJcbiAqL1xyXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZyB9ID0ge30pIHtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcclxuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcclxuICAgIGlmICh1cGdyYWRlKSB7XHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChibG9ja2VkKVxyXG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsICgpID0+IGJsb2NrZWQoKSk7XHJcbiAgICBpZiAoYmxvY2tpbmcpIHtcclxuICAgICAgICBvcGVuUHJvbWlzZS50aGVuKGRiID0+IGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCBibG9ja2luZykpLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3BlblByb21pc2U7XHJcbn1cclxuLyoqXHJcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cclxuICovXHJcbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UobmFtZSk7XHJcbiAgICBpZiAoYmxvY2tlZClcclxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoKSA9PiBibG9ja2VkKCkpO1xyXG4gICAgcmV0dXJuIHdyYXAocmVxdWVzdCkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xyXG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XHJcbmNvbnN0IHdyaXRlTWV0aG9kcyA9IFsncHV0JywgJ2FkZCcsICdkZWxldGUnLCAnY2xlYXInXTtcclxuY29uc3QgY2FjaGVkTWV0aG9kcyA9IG5ldyBNYXAoKTtcclxuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xyXG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSURCRGF0YWJhc2UgJiZcclxuICAgICAgICAhKHByb3AgaW4gdGFyZ2V0KSAmJlxyXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApO1xyXG4gICAgY29uc3QgdGFyZ2V0RnVuY05hbWUgPSBwcm9wLnJlcGxhY2UoL0Zyb21JbmRleCQvLCAnJyk7XHJcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xyXG4gICAgY29uc3QgaXNXcml0ZSA9IHdyaXRlTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSk7XHJcbiAgICBpZiAoXHJcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXHJcbiAgICAhKHRhcmdldEZ1bmNOYW1lIGluICh1c2VJbmRleCA/IElEQkluZGV4IDogSURCT2JqZWN0U3RvcmUpLnByb3RvdHlwZSkgfHxcclxuICAgICAgICAhKGlzV3JpdGUgfHwgcmVhZE1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jIGZ1bmN0aW9uIChzdG9yZU5hbWUsIC4uLmFyZ3MpIHtcclxuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcclxuICAgICAgICBjb25zdCB0eCA9IHRoaXMudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiAncmVhZG9ubHknKTtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0gdHguc3RvcmU7XHJcbiAgICAgICAgaWYgKHVzZUluZGV4KVxyXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuaW5kZXgoYXJncy5zaGlmdCgpKTtcclxuICAgICAgICBjb25zdCByZXR1cm5WYWwgPSB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpO1xyXG4gICAgICAgIGlmIChpc1dyaXRlKVxyXG4gICAgICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgICAgIHJldHVybiByZXR1cm5WYWw7XHJcbiAgICB9O1xyXG4gICAgY2FjaGVkTWV0aG9kcy5zZXQocHJvcCwgbWV0aG9kKTtcclxuICAgIHJldHVybiBtZXRob2Q7XHJcbn1cclxuYWRkVHJhcHMob2xkVHJhcHMgPT4gKHtcclxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcclxuICAgIGhhczogKHRhcmdldCwgcHJvcCkgPT4gISFnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKSxcclxufSkpO1xuXG5leHBvcnQgeyBvcGVuREIsIGRlbGV0ZURCIH07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoKSB7XG5cbiAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignL3NlcnZpY2V3b3JrZXIuYnVuZGxlLmpzJykudGhlbihyZWdpc3RyYXRpb24gPT4ge1xuICAgICAgIGNvbnNvbGUubG9nKCdTVyByZWdpc3RlcmVkOiAnLCByZWdpc3RyYXRpb24pO1xuICAgICB9KS5jYXRjaChyZWdpc3RyYXRpb25FcnJvciA9PiB7XG4gICAgICAgY29uc29sZS5sb2coJ1NXIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6ICcsIHJlZ2lzdHJhdGlvbkVycm9yKTtcbiAgICAgfSk7XG4gICB9KTtcbiAgfVxuXG59KSgpO1xuXG5cbiIsImltcG9ydCByZWdpc3RyYXRpb24gZnJvbSAnLi9yZWdpc3RyYXRpb24nO1xuaW1wb3J0IERCSGVscGVyIGZyb20gJy4vZGJoZWxwZXInO1xuXG5sZXQgcmVzdGF1cmFudHMsXG4gIG5laWdoYm9yaG9vZHMsXG4gIGN1aXNpbmVzXG52YXIgbmV3TWFwO1xudmFyIG1hcmtlcnMgPSBbXTtcblxuLyoqXG4gKiBGZXRjaCBuZWlnaGJvcmhvb2RzIGFuZCBjdWlzaW5lcyBhcyBzb29uIGFzIHRoZSBwYWdlIGlzIGxvYWRlZC5cbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT4ge1xuICBpbml0TWFwKCk7XG4gIHVwZGF0ZVJlc3RhdXJhbnRzKCk7XG4gIGZldGNoTmVpZ2hib3Job29kcygpO1xuICBmZXRjaEN1aXNpbmVzKCk7XG4gIERCSGVscGVyLm5leHRQZW5kaW5nKCk7XG59KTtcblxuLyoqXG4gKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyBhbmQgc2V0IHRoZWlyIEhUTUwuXG4gKi9cbmNvbnN0IGZldGNoTmVpZ2hib3Job29kcyA9ICgpID0+IHtcbiAgREJIZWxwZXIuZmV0Y2hOZWlnaGJvcmhvb2RzKChlcnJvciwgbmVpZ2hib3Job29kcykgPT4ge1xuICAgIGlmIChlcnJvcikgeyAvLyBHb3QgYW4gZXJyb3JcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLm5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzO1xuICAgICAgZmlsbE5laWdoYm9yaG9vZHNIVE1MKCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgbmVpZ2hib3Job29kcyBIVE1MLlxuICovXG5jb25zdCBmaWxsTmVpZ2hib3Job29kc0hUTUwgPSAobmVpZ2hib3Job29kcyA9IHNlbGYubmVpZ2hib3Job29kcykgPT4ge1xuICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVpZ2hib3Job29kcy1zZWxlY3QnKTtcbiAgc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHVwZGF0ZVJlc3RhdXJhbnRzKTtcbiAgbmVpZ2hib3Job29kcy5mb3JFYWNoKG5laWdoYm9yaG9vZCA9PiB7XG4gICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgb3B0aW9uLmlubmVySFRNTCA9IG5laWdoYm9yaG9vZDtcbiAgICBvcHRpb24udmFsdWUgPSBuZWlnaGJvcmhvb2Q7XG4gICAgc2VsZWN0LmFwcGVuZChvcHRpb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBGZXRjaCBhbGwgY3Vpc2luZXMgYW5kIHNldCB0aGVpciBIVE1MLlxuICovXG5jb25zdCBmZXRjaEN1aXNpbmVzID0gKCkgPT4ge1xuICBEQkhlbHBlci5mZXRjaEN1aXNpbmVzKChlcnJvciwgY3Vpc2luZXMpID0+IHtcbiAgICBpZiAoZXJyb3IpIHsgLy8gR290IGFuIGVycm9yIVxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuY3Vpc2luZXMgPSBjdWlzaW5lcztcbiAgICAgIGZpbGxDdWlzaW5lc0hUTUwoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBjdWlzaW5lcyBIVE1MLlxuICovXG5jb25zdCBmaWxsQ3Vpc2luZXNIVE1MID0gKGN1aXNpbmVzID0gc2VsZi5jdWlzaW5lcykgPT4ge1xuICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XG4gIHNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVSZXN0YXVyYW50cyk7XG5cbiAgY3Vpc2luZXMuZm9yRWFjaChjdWlzaW5lID0+IHtcbiAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBvcHRpb24uaW5uZXJIVE1MID0gY3Vpc2luZTtcbiAgICBvcHRpb24udmFsdWUgPSBjdWlzaW5lO1xuICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBsZWFmbGV0IG1hcCwgY2FsbGVkIGZyb20gSFRNTC5cbiAqL1xuY29uc3QgaW5pdE1hcCA9ICgpID0+IHtcbiAgbmV3TWFwID0gTC5tYXAoJ21hcCcsIHtcbiAgICAgICAgY2VudGVyOiBbNDAuNzIyMjE2LCAtNzMuOTg3NTAxXSxcbiAgICAgICAgem9vbTogMTIsXG4gICAgICAgIHNjcm9sbFdoZWVsWm9vbTogZmFsc2VcbiAgICAgIH0pO1xuICBzZWxmLm5ld01hcCA9IG5ld01hcDtcbiAgTC50aWxlTGF5ZXIoJ2h0dHBzOi8vYXBpLnRpbGVzLm1hcGJveC5jb20vdjQve2lkfS97en0ve3h9L3t5fS5qcGc3MD9hY2Nlc3NfdG9rZW49e21hcGJveFRva2VufScsIHtcbiAgICBtYXBib3hUb2tlbjogJ3BrLmV5SjFJam9pZDJWdWRHbHVJaXdpWVNJNkltTnFhWEowTjI1aVpqRndkall6YTNBNE1HdDFhSFUyYmpFaWZRLkRuTkZVb041dXp3MDFsX1hLX2M3blEnLFxuICAgIG1heFpvb206IDE4LFxuICAgIGF0dHJpYnV0aW9uOiAnTWFwIGRhdGEgJmNvcHk7IDxhIGhyZWY9XCJodHRwczovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9cIj5PcGVuU3RyZWV0TWFwPC9hPiBjb250cmlidXRvcnMsICcgK1xuICAgICAgJzxhIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvMi4wL1wiPkNDLUJZLVNBPC9hPiwgJyArXG4gICAgICAnSW1hZ2VyeSDCqSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubWFwYm94LmNvbS9cIj5NYXBib3g8L2E+JyxcbiAgICBpZDogJ21hcGJveC5zdHJlZXRzJ1xuICB9KS5hZGRUbyhuZXdNYXApO1xuXG59XG5cbi8qKlxuICogVXBkYXRlIHBhZ2UgYW5kIG1hcCBmb3IgY3VycmVudCByZXN0YXVyYW50cy5cbiAqL1xuY29uc3QgdXBkYXRlUmVzdGF1cmFudHMgPSAoKSA9PiB7XG4gIGNvbnN0IGNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XG4gIGNvbnN0IG5TZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVpZ2hib3Job29kcy1zZWxlY3QnKTtcblxuICBjb25zdCBjSW5kZXggPSBjU2VsZWN0LnNlbGVjdGVkSW5kZXg7XG4gIGNvbnN0IG5JbmRleCA9IG5TZWxlY3Quc2VsZWN0ZWRJbmRleDtcblxuICBjb25zdCBjdWlzaW5lID0gY1NlbGVjdFtjSW5kZXhdLnZhbHVlO1xuICBjb25zdCBuZWlnaGJvcmhvb2QgPSBuU2VsZWN0W25JbmRleF0udmFsdWU7XG5cbiAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZCwgKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xuICAgIGlmIChlcnJvcikgeyAvLyBHb3QgYW4gZXJyb3IhXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzZXRSZXN0YXVyYW50cyhyZXN0YXVyYW50cyk7XG4gICAgICBmaWxsUmVzdGF1cmFudHNIVE1MKCk7XG4gICAgfVxuICB9KVxufVxuXG4vKipcbiAqIENsZWFyIGN1cnJlbnQgcmVzdGF1cmFudHMsIHRoZWlyIEhUTUwgYW5kIHJlbW92ZSB0aGVpciBtYXAgbWFya2Vycy5cbiAqL1xuY29uc3QgcmVzZXRSZXN0YXVyYW50cyA9IChyZXN0YXVyYW50cykgPT4ge1xuICAvLyBSZW1vdmUgYWxsIHJlc3RhdXJhbnRzXG4gIHNlbGYucmVzdGF1cmFudHMgPSBbXTtcbiAgY29uc3QgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudHMtbGlzdCcpO1xuICB1bC5pbm5lckhUTUwgPSAnJztcblxuICAvLyBSZW1vdmUgYWxsIG1hcCBtYXJrZXJzXG4gIGlmIChzZWxmLm1hcmtlcnMpIHtcbiAgICBzZWxmLm1hcmtlcnMuZm9yRWFjaChtYXJrZXIgPT4gbWFya2VyLnJlbW92ZSgpKTtcbiAgfVxuICBzZWxmLm1hcmtlcnMgPSBbXTtcbiAgc2VsZi5yZXN0YXVyYW50cyA9IHJlc3RhdXJhbnRzO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbGwgcmVzdGF1cmFudHMgSFRNTCBhbmQgYWRkIHRoZW0gdG8gdGhlIHdlYnBhZ2UuXG4gKi9cbmNvbnN0IGZpbGxSZXN0YXVyYW50c0hUTUwgPSAocmVzdGF1cmFudHMgPSBzZWxmLnJlc3RhdXJhbnRzKSA9PiB7XG4gIGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnRzLWxpc3QnKTtcbiAgcmVzdGF1cmFudHMuZm9yRWFjaChyZXN0YXVyYW50ID0+IHtcbiAgICB1bC5hcHBlbmQoY3JlYXRlUmVzdGF1cmFudEhUTUwocmVzdGF1cmFudCkpO1xuICB9KTtcbiAgYWRkTWFya2Vyc1RvTWFwKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIHJlc3RhdXJhbnQgSFRNTC5cbiAqL1xuY29uc3QgY3JlYXRlUmVzdGF1cmFudEhUTUwgPSAocmVzdGF1cmFudCkgPT4ge1xuICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG5cbiAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGltYWdlLmNsYXNzTmFtZSA9ICdyZXN0YXVyYW50LWltZyc7XG4gIGltYWdlLnNldEF0dHJpYnV0ZSgnYWx0JywgcmVzdGF1cmFudC5uYW1lKTtcbiAgaW1hZ2Uuc3JjID0gREJIZWxwZXIuaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xuICBkaXYuYXBwZW5kKGltYWdlKTtcbiAgbGkuYXBwZW5kKGRpdik7XG5cbiAgY29uc3QgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gIG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xuICBsaS5hcHBlbmQobmFtZSk7XG5cbiAgY29uc3QgbmVpZ2hib3Job29kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBuZWlnaGJvcmhvb2QuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uZWlnaGJvcmhvb2Q7XG4gIGxpLmFwcGVuZChuZWlnaGJvcmhvb2QpO1xuXG4gIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGFkZHJlc3MuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5hZGRyZXNzO1xuICBsaS5hcHBlbmQoYWRkcmVzcyk7XG5cbiAgY29uc3QgZmF2QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGlmIChyZXN0YXVyYW50LmlzX2Zhdm9yaXRlID09PSBcInRydWVcIiB8fCByZXN0YXVyYW50LmlzX2Zhdm9yaXRlID09PSB0cnVlKSB7XG4gICAgZmF2QnRuLmlubmVySFRNTCA9ICdGYXZvcml0ZWQhJztcbiAgICBmYXZCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICdob3RwaW5rJztcbiAgfSBlbHNlIHtcbiAgICBmYXZCdG4uaW5uZXJIVE1MID0gJ0FkZCB0byBmYXZvcml0ZSc7XG4gICAgZmF2QnRuLnN0eWxlLmJhY2tncm91bmQgPSAnZ3JleSc7XG4gIH1cbiAgZmF2QnRuLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIGB0b2dnbGUgZmF2b3JpdGVzIGZvcjogJHtyZXN0YXVyYW50Lm5hbWV9YCk7XG4gIGZhdkJ0bi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBgZmF2LWJ0bi0ke3Jlc3RhdXJhbnQuaWR9YCk7XG4gIGZhdkJ0bi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXJlc3RhdXJhbnQtaWRcIiwgcmVzdGF1cmFudC5pZCk7XG5cbiAgZmF2QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgREJIZWxwZXIudG9nZ2xlRmF2QnRuKHJlc3RhdXJhbnQuaWQpO1xuICB9KVxuXG4gIGxpLmFwcGVuZChmYXZCdG4pO1xuXG4gIGNvbnN0IG1vcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgbW9yZS5jbGFzc0xpc3QgPSBcImJ1dHRvbiBidXR0b24tLXN1Y2Nlc3NcIjtcbiAgbW9yZS5pbm5lckhUTUwgPSAnVmlldyBEZXRhaWxzJztcbiAgbW9yZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHJlc3RhdXJhbnQubmFtZSArIHJlc3RhdXJhbnQubmVpZ2hib3Job29kICsgcmVzdGF1cmFudC5hZGRyZXNzICsgXCJWaWV3IERldGFpbHNcIik7XG4gIG1vcmUub25jbGljayA9ICgpID0+IHtcbiAgICBjb25zdCB1cmwgPSBEQkhlbHBlci51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xuICAgIHdpbmRvdy5sb2NhdGlvbiA9IHVybDtcbiAgfVxuICBsaS5hcHBlbmQobW9yZSk7XG5cbiAgcmV0dXJuIGxpXG59XG5cbi8qKlxuICogQWRkIG1hcmtlcnMgZm9yIGN1cnJlbnQgcmVzdGF1cmFudHMgdG8gdGhlIG1hcC5cbiAqL1xuY29uc3QgYWRkTWFya2Vyc1RvTWFwID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xuICByZXN0YXVyYW50cy5mb3JFYWNoKHJlc3RhdXJhbnQgPT4ge1xuICAgIC8vIEFkZCBtYXJrZXIgdG8gdGhlIG1hcFxuICAgIGNvbnN0IG1hcmtlciA9IERCSGVscGVyLm1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgbmV3TWFwKTtcbiAgICBtYXJrZXIub24oXCJjbGlja1wiLCBvbkNsaWNrKTtcbiAgICBmdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBtYXJrZXIub3B0aW9ucy51cmw7XG4gICAgfVxuICAgIHNlbGYubWFya2Vycy5wdXNoKG1hcmtlcik7XG4gIH0pO1xufVxuXG4iXSwic291cmNlUm9vdCI6IiJ9