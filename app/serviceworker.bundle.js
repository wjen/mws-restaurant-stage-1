!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}({0:function(e,t,n){"use strict";const r=(e,t)=>t.some(t=>e instanceof t);let o,s;const a=new WeakMap,c=new WeakMap,i=new WeakMap,u=new WeakMap,l=new WeakMap;let d={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return c.get(e);if("objectStoreNames"===t)return e.objectStoreNames||i.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return p(e[t])},has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function f(e){return e===IDBDatabase.prototype.transaction&&"objectStoreNames"in IDBTransaction.prototype?function(t,...n){const r=e.call(g(this),t,...n);return i.set(r,t.sort?t.sort():[t]),p(r)}:(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(g(this),t),p(a.get(this))}:function(...t){return p(e.apply(g(this),t))}}function h(e){return"function"==typeof e?f(e):(e instanceof IDBTransaction&&function(e){if(c.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",s),e.removeEventListener("abort",s)},o=()=>{t(),r()},s=()=>{n(e.error),r()};e.addEventListener("complete",o),e.addEventListener("error",s),e.addEventListener("abort",s)});c.set(e,t)}(e),r(e,o||(o=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function p(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",s)},o=()=>{t(p(e.result)),r()},s=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",s)});return t.then(t=>{t instanceof IDBCursor&&a.set(t,e)}),l.set(t,e),t}(e);if(u.has(e))return u.get(e);const t=h(e);return t!==e&&(u.set(e,t),l.set(t,e)),t}const g=e=>l.get(e);function v(e,t,{blocked:n,upgrade:r,blocking:o}={}){const s=indexedDB.open(e,t),a=p(s);return r&&s.addEventListener("upgradeneeded",e=>{r(p(s.result),e.oldVersion,e.newVersion,p(s.transaction))}),n&&s.addEventListener("blocked",()=>n()),o&&a.then(e=>e.addEventListener("versionchange",o)),a}n.d(t,"a",function(){return v});const b=["get","getKey","getAll","getAllKeys","count"],m=["put","add","delete","clear"],w=new Map;function y(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(w.get(t))return w.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n;if(!(n in(r?IDBIndex:IDBObjectStore).prototype))return;let o;return b.includes(n)&&(o=function(e,...t){let o=this.transaction(e).store;return r&&(o=o.index(t.shift())),o[n](...t)}),m.includes(n)&&(o=function(e,...t){const r=this.transaction(e,"readwrite");return r.store[n](...t),r.done}),o&&w.set(t,o),o}d=(e=>({get:(t,n,r)=>y(t,n)||e.get(t,n,r),has:(t,n)=>!!y(t,n)||e.has(t,n)}))(d)},6:function(e,t,n){"use strict";n.r(t);var r=n(0);const o=["static_cache-v5","images_cache-v"],s=Object(r.a)("rr-db",3,{upgrade(e,t){switch(t){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id");case 1:e.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id");case 2:e.createObjectStore("pending",{keyPath:"id",autoIncrement:!0})}}});self.addEventListener("install",e=>{e.waitUntil(caches.open("static_cache-v5").then(e=>e.addAll(["/","/src/main.js","/src/dbhelper.js","/restaurant.html","/index.html","/src/restaurant_info.js","/src/styles.css","/src/rr-icon512.png"]).catch(e=>{console.log("error opening cache"+e)})))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>{Promise.all(e.map(e=>{if(!o.includes(e))return caches.delete(e)}))}))}),self.addEventListener("fetch",e=>{let t=new URL(e.request.url),n=t.searchParams.get("restaurant_id")-0;if("1337"===t.port)return a(e,n);"GET"===e.request.method?e.respondWith(caches.match(e.request).then(t=>(console.log("this should not show"),t||fetch(e.request).then(t=>{let n=function(e){let t=["png","jpg","jpeg","svg","gif"],n=!1;for(let r of t)if(e.endsWith(r)){n=!0;break}return n}(e.request.url)?"images_cache-v":"static_cache-v5";return caches.open(n).then(n=>(n.put(e.request,t.clone()),t))}))).catch(e=>{console.log(e)})):e.respondWith(fetch(e.request))});const a=(e,t)=>{"GET"!==e.request.method?e.respondWith(fetch(e.request)):e.request.url.indexOf("restaurants")>-1?c(e):(console.log("starting handling from reviews event"),i(e,t))},c=e=>{e.respondWith(s.then(e=>(console.log("starting from idb"),e.transaction("restaurants").objectStore("restaurants").getAll())).then(t=>(console.log(t),t.length&&t||(e=>new Promise(function(t,n){fetch(e.request).then(e=>e.json()).then(e=>{t(e)}).catch(e=>{console.log(e),n(e)})}))(e).then(e=>(console.log("fetched now storing"),s.then(t=>{let n=t.transaction("restaurants","readwrite"),r=n.objectStore("restaurants");return e.forEach(function(e){r.put(e)}),n.done}).then(()=>(console.log("stored restaurants, now returning"),e)))))).then(e=>(console.log(e),new Response(JSON.stringify(e)))).catch(e=>new Response("Error fetching data",{status:500})))},i=(e,t)=>{e.respondWith(s.then(e=>e.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(t)).then(t=>(console.log("serviceworker handle reviews"),console.log(t),t.length&&t||fetch(e.request).then(e=>e.json()).then(e=>(console.log("using serviceworker fetch"),console.log("starting to store reviews"),s.then(t=>{let n=t.transaction("reviews","readwrite"),r=n.objectStore("reviews");return e.forEach(function(e){r.put(e)}),n.done}).then(()=>e))))).then(e=>(console.log(e),new Response(JSON.stringify(e)))).catch(e=>new Response("Error fetching data",{status:500})))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,