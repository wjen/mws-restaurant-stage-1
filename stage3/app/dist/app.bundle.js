!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=60)}([function(e,t,n){var r=n(15)("wks"),o=n(17),i=n(1).Symbol,s="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=s&&i[e]||(s?i:o)("Symbol."+e))}).store=r},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){"use strict";n.r(t),n.d(t,"dbPromise",(function(){return i}));n(40),n(46);var r=n(20);const o="restaurant-cache-v".concat("3"),i=Object(r.a)("rr-db",3,{upgrade(e,t){switch(t){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id");case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id");case 2:e.createObjectStore("pending",{keyPath:"id",autoIncrement:!0})}}});function s(e){let t=["png","jpg","jpeg","svg","gif"],n=!1;for(let r of t)if(e.endsWith(r)){n=!0;break}return n}self.addEventListener("install",e=>{e.waitUntil(caches.open(o).then(e=>e.addAll(["/","./app.bundle.js","./restaurant.bundle.js","./img/rr_icon.png","./css/styles.css"]).catch(e=>{console.log("error setting up install event for sw")})))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.filter(e=>e.startsWith("restaurant-")&&e!=o).map(e=>caches.delete(e)))))}),self.addEventListener("fetch",e=>{let t=new URL(e.request.url);if("1337"===t.port){let n=t.searchParams.get("restaurant_id")-0;return a(e,n)}l(e)});const a=(e,t)=>{"GET"!==e.request.method?(console.log(e.request),console.log(e),e.respondWith(fetch(e.request))):e.request.url.indexOf("restaurants")>-1?c(e):(console.log("starting handling from reviews event"),u(e,t))},c=e=>{e.respondWith(i.then(e=>e.transaction("restaurants").objectStore("restaurants").getAll()).then(t=>(console.log("responding from handlerestaurantevents from serviceworker"),t.length&&t||(e=>new Promise((function(t,n){fetch(e.request).then(e=>e.json()).then(e=>{t(e)}).catch(e=>{console.log(e),n(e)})})))(e).then(e=>(console.log("fetched now storing"),i.then(t=>{let n=t.transaction("restaurants","readwrite"),r=n.objectStore("restaurants");return e.forEach((function(e){r.put(e)})),n.done}).then(()=>(console.log("stored restaurants, now returning"),e)))))).then(e=>(console.log(e),new Response(JSON.stringify(e)))).catch(e=>new Response("Error fetching data",{status:500})))},u=(e,t)=>{e.respondWith(i.then(e=>e.transaction("reviews").objectStore("reviews").index("restaurant_id").getAll(t)).then(t=>(console.log("serviceworker handle reviews"),console.log(t),t.length&&t||fetch(e.request).then(e=>e.json()).then(e=>(console.log("using serviceworker fetch"),console.log("starting to store reviews"),i.then(t=>{let n=t.transaction("reviews","readwrite"),r=n.objectStore("reviews");return e.forEach((function(e){r.put(e)})),n.done}).then(()=>e))))).then(e=>new Response(JSON.stringify(e))).catch(e=>new Response("Error fetching data",{status:500})))},l=e=>{e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request).then(t=>{let n=s(e.request.url)?"images_cache-v":o;return caches.open(n).then(n=>(n.put(e.request,t.clone()),t))}).catch(e=>new Response("Application is not connected to the internet",{status:404,statusText:"Application is not connected to the internet"})))),e.waitUntil(f(e.request))},f=e=>{let t=s(e.url)?"images_cache-v":o;return caches.open(t).then(t=>fetch(e).then(n=>t.put(e,n)))}},function(e,t,n){var r=n(11),o=n(23);e.exports=n(6)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(9);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));n(20);var r=n(2);class o{static get DATABASE_URL(){return"http://localhost:".concat(1337,"/restaurants")}static get DATABASE_REVIEWS_URL(){return"http://localhost:".concat(1337,"/reviews")}static fetchRestaurants(e){fetch(o.DATABASE_URL).then((function(t){t.json().then((function(t){e(null,t)}))}))}static fetchReviews(e,t){let n=o.DATABASE_REVIEWS_URL+"/?restaurant_id="+e;fetch(n).then(e=>e.json()).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantById(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){o.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){o.fetchRestaurants((r,o)=>{if(r)n(r,null);else{let r=o;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){o.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){o.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return"/restaurant.html?id=".concat(e.id)}static imageUrlForRestaurant(e){return e.photograph?"/img/".concat(e.photograph,".jpg"):"/img/".concat(e.id,".jpg")}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:o.urlForRestaurant(e)});return n.addTo(newMap),n}static updateCachedRestaurantReview(e){return console.log("updating cache for new review",e),r.dbPromise.then(t=>{const n=t.transaction("reviews","readwrite");return n.objectStore("reviews").put(e),console.log("successfully put review in store"),n.done})}static editReview(e,t){return r.dbPromise.then(e=>e.transaction("reviews").objectStore("reviews").get(t.id)).then(t=>r.dbPromise.then(n=>{let r=n.transaction("reviews","readwrite"),o=r.objectStore("reviews"),i=Object.assign({},t,e);return o.put(i),r.complete}))}static submitReview(e,t){console.log(t);const n=t?"PUT":"POST",r=t?"".concat(o.DATABASE_REVIEWS_URL,"/").concat(t.id):o.DATABASE_REVIEWS_URL;return t?o.editReview(e,t):o.updateCachedRestaurantReview(e),o.addPendingRequestToQue(r,n,e)}static addPendingRequestToQue(e,t,n){return new Promise((i,s)=>{r.dbPromise.then(r=>r.transaction("pending","readwrite").objectStore("pending").put({data:{url:e,method:t,formData:n}})).catch(e=>{console.log("Error putting data in pending db: ".concat(e))}).then(o.nextPending((e,t)=>e?(console.log(e),s(e)):i(t)))})}static nextPending(e){o.attemptCommitPending(o.nextPending).then(t=>{console.log(t),e(null,t)}).catch(t=>{console.log(t),e&&e(t)})}static attemptCommitPending(e){let t,n,o;return new Promise((i,s)=>{r.dbPromise.then(r=>{if(!r.objectStoreNames.length)return console.log("DB not available"),void r.close();r.transaction("pending","readwrite").objectStore("pending").openCursor().then(a=>{if(!a)return void console.log("no more cursors");const c=a.value;if(t=c.data.url,n=c.data.method,o=c.data.formData,!t||!n||"POST"===n&&!o)return a.delete().then(e),void console.log("deleted a bad cursor");const u={body:JSON.stringify(o),method:n};fetch(t,u).then(t=>(console.log(t),t.ok||t.redirected?t.json().then(t=>r.transaction("pending","readwrite").objectStore("pending").openCursor().then(n=>n.delete().then(()=>(console.log(n.value),console.log("deleted item from pending store"),e(),console.log(t),i(t))))):(console.log("this is the response and we are offline"),void console.log(t)))).catch(e=>(console.log(e),s("no network")))})})})}static syncRestaurant(e){let t="http://localhost:1337/restaurants/".concat(e.id,"/?is_favorite=").concat(e.is_favorite);o.addPendingRequestToQue(t,"PUT").catch(t=>{console.log("error updating restaurant backend data...",t,e)})}static updateRestaurantInDB(e){return r.dbPromise.then((function(t){let n=t.transaction("restaurants","readwrite");return n.objectStore("restaurants").put(e),n.complete})).then((function(){return Promise.resolve(e)}))}static toggleFavBtn(e){return r.dbPromise.then(t=>t.transaction("restaurants").objectStore("restaurants").get(e)).then(e=>{console.log(e);const t=Object.assign({},e);return t.is_favorite="true"===e.is_favorite||!0===e.is_favorite?"false":"true",o.syncRestaurant(t),o.updateRestaurantInDB(t)}).then(e=>{const t=document.getElementById("fav-btn-".concat(e.id));"true"===e.is_favorite||!0===e.is_favorite?(t.innerHTML="Favorited!",t.style.background="hotpink"):(t.innerHTML="Add to favorite",t.style.background="grey")})}static deleteCachedReview(e){return r.dbPromise.then(t=>{let n=t.transaction("reviews","readwrite");return n.objectStore("reviews").delete(e),console.log("deleted review from idb"),n.complete}).catch(e=>{console.log("error deleting review: ",e)})}static deleteReview(e){const t="".concat(o.DATABASE_REVIEWS_URL,"/").concat(e);console.log(t);return o.deleteCachedReview(e),o.addPendingRequestToQue(t,"DELETE")}static deleteTempReview(e){r.dbPromise.then(t=>{let n=t.transaction("reviews","readwrite");return n.objectStore("reviews").delete(e),console.log("deleted oldversion of review with old id"),n.complete}).catch(e=>{console.log("error deleting temp review: ",e)})}}},function(e,t,n){e.exports=!n(13)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(1),o=n(3),i=n(8),s=n(17)("src"),a=n(44),c=(""+a).split("toString");n(16).inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var u="function"==typeof n;u&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(u&&(i(n,s)||o(n,s,e[t]?""+e[t]:c.join(String(t)))),e===r?e[t]=n:a?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[s]||a.call(this)}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(4),o=n(35),i=n(36),s=Object.defineProperty;t.f=n(6)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(50),o=n(10);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(16),o=n(1),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(25)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=e.exports={version:"2.6.5"};"number"==typeof __e&&(__e=n)},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports={}},function(e,t,n){var r=n(15)("keys"),o=n(17);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return g}));let r,o;const i=new WeakMap,s=new WeakMap,a=new WeakMap,c=new WeakMap,u=new WeakMap;let l={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return s.get(e);if("objectStoreNames"===t)return e.objectStoreNames||a.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return p(e[t])},has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function f(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(o||(o=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(h(this),t),p(i.get(this))}:function(...t){return p(e.apply(h(this),t))}:function(t,...n){const r=e.call(h(this),t,...n);return a.set(r,t.sort?t.sort():[t]),p(r)}}function d(e){return"function"==typeof e?f(e):(e instanceof IDBTransaction&&function(e){if(s.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",i),e.removeEventListener("abort",i)},o=()=>{t(),r()},i=()=>{n(e.error),r()};e.addEventListener("complete",o),e.addEventListener("error",i),e.addEventListener("abort",i)});s.set(e,t)}(e),t=e,(r||(r=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some(e=>t instanceof e)?new Proxy(e,l):e);var t}function p(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",i)},o=()=>{t(p(e.result)),r()},i=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",i)});return t.then(t=>{t instanceof IDBCursor&&i.set(t,e)}).catch(()=>{}),u.set(t,e),t}(e);if(c.has(e))return c.get(e);const t=d(e);return t!==e&&(c.set(e,t),u.set(t,e)),t}const h=e=>u.get(e);function g(e,t,{blocked:n,upgrade:r,blocking:o}={}){const i=indexedDB.open(e,t),s=p(i);return r&&i.addEventListener("upgradeneeded",e=>{r(p(i.result),e.oldVersion,e.newVersion,p(i.transaction))}),n&&i.addEventListener("blocked",()=>n()),o&&s.then(e=>e.addEventListener("versionchange",o)).catch(()=>{}),s}const v=["get","getKey","getAll","getAllKeys","count"],m=["put","add","delete","clear"],y=new Map;function b(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(y.get(t))return y.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,o=m.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!o&&!v.includes(n))return;const i=async function(e,...t){const i=this.transaction(e,o?"readwrite":"readonly");let s=i.store;r&&(s=s.index(t.shift()));const a=s[n](...t);return o&&await i.done,a};return y.set(t,i),i}l=(e=>({get:(t,n,r)=>b(t,n)||e.get(t,n,r),has:(t,n)=>!!b(t,n)||e.has(t,n)}))(l)},function(e,t,n){var r=n(12),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){e.exports=!1},function(e,t,n){"use strict";var r,o,i=n(34),s=RegExp.prototype.exec,a=String.prototype.replace,c=s,u=(r=/a/,o=/b*/g,s.call(r,"a"),s.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),l=void 0!==/()??/.exec("")[1];(u||l)&&(c=function(e){var t,n,r,o,c=this;return l&&(n=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),u&&(t=c.lastIndex),r=s.call(c,e),u&&r&&(c.lastIndex=c.global?r.index+r[0].length:t),l&&r&&r.length>1&&a.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=c},function(e,t,n){var r=n(1),o=n(16),i=n(3),s=n(7),a=n(37),c=function(e,t,n){var u,l,f,d,p=e&c.F,h=e&c.G,g=e&c.S,v=e&c.P,m=e&c.B,y=h?r:g?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(u in h&&(n=t),n)f=((l=!p&&y&&void 0!==y[u])?y:n)[u],d=m&&l?a(f,r):v&&"function"==typeof f?a(Function.call,f):f,y&&s(y,u,f,e&c.U),b[u]!=f&&i(b,u,d),v&&w[u]!=f&&(w[u]=f)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,n){var r=n(9),o=n(1).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(38),o=n(24);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(11).f,o=n(8),i=n(0)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){"use strict";var r=n(41)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){"use strict";var r=n(42),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(43);var r=n(7),o=n(3),i=n(13),s=n(10),a=n(0),c=n(26),u=a("species"),l=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=a(e),p=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[u]=function(){return n}),n[d](""),!t})):void 0;if(!p||!h||"replace"===e&&!l||"split"===e&&!f){var g=/./[d],v=n(s,d,""[e],(function(e,t,n,r,o){return t.exec===c?p&&!o?{done:!0,value:g.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),m=v[0],y=v[1];r(String.prototype,e,m),o(RegExp.prototype,d,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},function(e,t,n){"use strict";var r=n(4);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){e.exports=!n(6)&&!n(13)((function(){return 7!=Object.defineProperty(n(28)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(9);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(45);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(8),o=n(14),i=n(55)(!1),s=n(19)("IE_PROTO");e.exports=function(e,t){var n,a=o(e),c=0,u=[];for(n in a)n!=s&&r(a,n)&&u.push(n);for(;t.length>c;)r(a,n=t[c++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(10);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";var r=n(4),o=n(21),i=n(31),s=n(32);n(33)("match",1,(function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var c=r(e),u=String(this);if(!c.global)return s(c,u);var l=c.unicode;c.lastIndex=0;for(var f,d=[],p=0;null!==(f=s(c,u));){var h=String(f[0]);d[p]=h,""===h&&(c.lastIndex=i(u,o(c.lastIndex),l)),p++}return 0===p?null:d}]}))},function(e,t,n){var r=n(12),o=n(10);e.exports=function(e){return function(t,n){var i,s,a=String(o(t)),c=r(n),u=a.length;return c<0||c>=u?e?"":void 0:(i=a.charCodeAt(c))<55296||i>56319||c+1===u||(s=a.charCodeAt(c+1))<56320||s>57343?e?a.charAt(c):i:e?a.slice(c,c+2):s-56320+(i-55296<<10)+65536}}},function(e,t,n){var r=n(22),o=n(0)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,s;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(s=r(t))&&"function"==typeof t.callee?"Arguments":s}},function(e,t,n){"use strict";var r=n(26);n(27)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){e.exports=n(15)("native-function-to-string",Function.toString)},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){for(var r=n(47),o=n(29),i=n(7),s=n(1),a=n(3),c=n(18),u=n(0),l=u("iterator"),f=u("toStringTag"),d=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),g=0;g<h.length;g++){var v,m=h[g],y=p[m],b=s[m],w=b&&b.prototype;if(w&&(w[l]||a(w,l,d),w[f]||a(w,f,m),c[m]=d,y))for(v in r)w[v]||i(w,v,r[v],!0)}},function(e,t,n){"use strict";var r=n(48),o=n(49),i=n(18),s=n(14);e.exports=n(51)(Array,"Array",(function(e,t){this._t=s(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){var r=n(0)("unscopables"),o=Array.prototype;null==o[r]&&n(3)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){var r=n(22);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){"use strict";var r=n(25),o=n(27),i=n(7),s=n(3),a=n(18),c=n(52),u=n(30),l=n(58),f=n(0)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,g,v,m){c(n,t,h);var y,b,w,x=function(e){if(!d&&e in R)return R[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},S=t+" Iterator",E="values"==g,j=!1,R=e.prototype,L=R[f]||R["@@iterator"]||g&&R[g],_=L||x(g),T=g?E?x("entries"):_:void 0,P="Array"==t&&R.entries||L;if(P&&(w=l(P.call(new e)))!==Object.prototype&&w.next&&(u(w,S,!0),r||"function"==typeof w[f]||s(w,f,p)),E&&L&&"values"!==L.name&&(j=!0,_=function(){return L.call(this)}),r&&!m||!d&&!j&&R[f]||s(R,f,_),a[t]=_,a[S]=p,g)if(y={values:E?_:x("values"),keys:v?_:x("keys"),entries:T},m)for(b in y)b in R||i(R,b,y[b]);else o(o.P+o.F*(d||j),t,y);return y}},function(e,t,n){"use strict";var r=n(53),o=n(23),i=n(30),s={};n(3)(s,n(0)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(s,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(4),o=n(54),i=n(24),s=n(19)("IE_PROTO"),a=function(){},c=function(){var e,t=n(28)("iframe"),r=i.length;for(t.style.display="none",n(57).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;r--;)delete c.prototype[i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(a.prototype=r(e),n=new a,a.prototype=null,n[s]=e):n=c(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(11),o=n(4),i=n(29);e.exports=n(6)?Object.defineProperties:function(e,t){o(e);for(var n,s=i(t),a=s.length,c=0;a>c;)r.f(e,n=s[c++],t[n]);return e}},function(e,t,n){var r=n(14),o=n(21),i=n(56);e.exports=function(e){return function(t,n,s){var a,c=r(t),u=o(c.length),l=i(s,u);if(e&&n!=n){for(;u>l;)if((a=c[l++])!=a)return!0}else for(;u>l;l++)if((e||l in c)&&c[l]===n)return e||l||0;return!e&&-1}}},function(e,t,n){var r=n(12),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(1).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(8),o=n(39),i=n(19)("IE_PROTO"),s=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?s:null}},function(e,t,n){"use strict";"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/serviceworker.bundle.js").then(e=>{console.log("SW registered: ",e)}).catch(e=>{console.log("SW registration failed: ",e)})})},function(e,t,n){"use strict";n.r(t);n(59);var r=n(5);var o;document.addEventListener("DOMContentLoaded",e=>{u(),l(),i(),a(),r.a.nextPending()});const i=()=>{r.a.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,s())})},s=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.neighborhoods;const t=document.getElementById("neighborhoods-select");t.addEventListener("change",l),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},a=()=>{r.a.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,c())})},c=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.cuisines;const t=document.getElementById("cuisines-select");t.addEventListener("change",l),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},u=()=>{o=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),self.newMap=o,L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1Ijoid2VudGluIiwiYSI6ImNqaXJ0N25iZjFwdjYza3A4MGt1aHU2bjEifQ.DnNFUoN5uzw01l_XK_c7nQ",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(o)},l=()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,o=t.selectedIndex,i=e[n].value,s=t[o].value;r.a.fetchRestaurantByCuisineAndNeighborhood(i,s,(e,t)=>{e?console.error(e):(f(t),d())})},f=e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e},d=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurants;const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(p(e))}),h()},p=e=>{const t=document.createElement("li"),n=document.createElement("img"),o=document.createElement("div");n.className="restaurant-img",n.setAttribute("alt",e.name),n.src=r.a.imageUrlForRestaurant(e),o.append(n),t.append(o);const i=document.createElement("h1");i.innerHTML=e.name,t.append(i);const s=document.createElement("p");s.innerHTML=e.neighborhood,t.append(s);const a=document.createElement("p");a.innerHTML=e.address,t.append(a);const c=document.createElement("button");"true"===e.is_favorite||!0===e.is_favorite?(c.innerHTML="Favorited!",c.style.background="hotpink"):(c.innerHTML="Add to favorite",c.style.background="grey"),c.setAttribute("title","toggle favorites for: ".concat(e.name)),c.setAttribute("id","fav-btn-".concat(e.id)),c.setAttribute("data-restaurant-id",e.id),c.addEventListener("click",()=>{r.a.toggleFavBtn(e.id)}),t.append(c);const u=document.createElement("button");return u.classList="button button--success",u.innerHTML="View Details",u.setAttribute("aria-label",e.name+e.neighborhood+e.address+"View Details"),u.onclick=()=>{const t=r.a.urlForRestaurant(e);window.location=t},t.append(u),t},h=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:self.restaurants;e.forEach(e=>{const t=r.a.mapMarkerForRestaurant(e,o);t.on("click",(function(){window.location.href=t.options.url})),self.markers.push(t)})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,