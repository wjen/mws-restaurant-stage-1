!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";const r=(e,t)=>t.some(t=>e instanceof t);let o,a;const s=new WeakMap,i=new WeakMap,c=new WeakMap,u=new WeakMap,l=new WeakMap;let d={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return i.get(e);if("objectStoreNames"===t)return e.objectStoreNames||c.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return h(e[t])},has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function f(e){return e===IDBDatabase.prototype.transaction&&"objectStoreNames"in IDBTransaction.prototype?function(t,...n){const r=e.call(m(this),t,...n);return c.set(r,t.sort?t.sort():[t]),h(r)}:(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(m(this),t),h(s.get(this))}:function(...t){return h(e.apply(m(this),t))}}function p(e){return"function"==typeof e?f(e):(e instanceof IDBTransaction&&function(e){if(i.has(e))return;const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",a),e.removeEventListener("abort",a)},o=()=>{t(),r()},a=()=>{n(e.error),r()};e.addEventListener("complete",o),e.addEventListener("error",a),e.addEventListener("abort",a)});i.set(e,t)}(e),r(e,o||(o=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function h(e){if(e instanceof IDBRequest)return function(e){const t=new Promise((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",a)},o=()=>{t(h(e.result)),r()},a=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",a)});return t.then(t=>{t instanceof IDBCursor&&s.set(t,e)}),l.set(t,e),t}(e);if(u.has(e))return u.get(e);const t=p(e);return t!==e&&(u.set(e,t),l.set(t,e)),t}const m=e=>l.get(e);function g(e,t,{blocked:n,upgrade:r,blocking:o}={}){const a=indexedDB.open(e,t),s=h(a);return r&&a.addEventListener("upgradeneeded",e=>{r(h(a.result),e.oldVersion,e.newVersion,h(a.transaction))}),n&&a.addEventListener("blocked",()=>n()),o&&s.then(e=>e.addEventListener("versionchange",o)),s}n.d(t,"a",function(){return g});const b=["get","getKey","getAll","getAllKeys","count"],v=["put","add","delete","clear"],y=new Map;function w(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(y.get(t))return y.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n;if(!(n in(r?IDBIndex:IDBObjectStore).prototype))return;let o;return b.includes(n)&&(o=function(e,...t){let o=this.transaction(e).store;return r&&(o=o.index(t.shift())),o[n](...t)}),v.includes(n)&&(o=function(e,...t){const r=this.transaction(e,"readwrite");return r.store[n](...t),r.done}),o&&y.set(t,o),o}d=(e=>({get:(t,n,r)=>w(t,n)||e.get(t,n,r),has:(t,n)=>!!w(t,n)||e.has(t,n)}))(d)},function(e,t,n){"use strict";n.r(t);var r=n(0);const o=Object(r.a)("rr-db",3,{upgrade(e,t){switch(t){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id");case 1:e.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id");case 2:e.createObjectStore("pending",{keyPath:"id",autoIncrement:!0})}}});class a{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get DATABASE_REVIEWS_URL(){return"http://localhost:1337/reviews"}static fetchRestaurants(e){fetch(a.DATABASE_URL).then(function(t){t.json().then(function(t){e(null,t)})})}static fetchReviews(e,t){let n=a.DATABASE_REVIEWS_URL+"/?restaurant_id="+e;fetch(n).then(e=>e.json()).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantById(e,t){a.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){a.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){a.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){a.fetchRestaurants((r,o)=>{if(r)n(r,null);else{let r=o;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){a.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){a.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e.photograph?`/img/${e.photograph}.jpg`:`/img/${e.id}.jpg`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:a.urlForRestaurant(e)});return n.addTo(newMap),n}static updateCachedRestaurantReview(e){return console.log("updating cache for new review",e),o.then(t=>{const n=t.transaction("reviews","readwrite"),r=n.objectStore("reviews");return console.log("putting review in store"),r.put(e),console.log("successfully put review in store"),n.done})}static saveNewReview(e,t){const n=a.DATABASE_REVIEWS_URL;a.updateCachedRestaurantReview(e),a.addPendingRequestToQue(n,"POST",e).then(e=>{t(null,e)})}static addPendingRequestToQue(e,t,n){return new Promise((r,s)=>{o.then(r=>{r.transaction("pending","readwrite").objectStore("pending").put({data:{url:e,method:t,formData:n}})}).catch(e=>{console.log(e)}).then(a.nextPending((e,t)=>(console.log(t),r(t))))})}static nextPending(e){a.attemptCommitPending(a.nextPending).then(t=>{console.log(t),e(null,t)})}static attemptCommitPending(e){let t,n,r;return new Promise((a,s)=>{o.then(o=>{if(!o.objectStoreNames.length)return console.log("DB not available"),void o.close();o.transaction("pending","readwrite").objectStore("pending").openCursor().then(s=>{if(!s)return;s.value;if(t=s.value.data.url,n=s.value.data.method,r=s.value.data.formData,!t||!n||"POST"===n&&!r)return void s.delete().then(e());const i={body:JSON.stringify(r),method:n};fetch(t,i).then(e=>{if(e.ok||e.redirected)return e.json()}).then(t=>{o.transaction("pending","readwrite").objectStore("pending").openCursor().then(n=>{n.delete().then(()=>(e(),console.log(t),a(t)))}),console.log("deleted item from pending store")}).catch(e=>{console.log(e)})})})})}static syncRestaurant(e){try{let t=`http://localhost:1337/restaurants/${e.id}/?is_favorite=${e.is_favorite}`;return fetch(t,{method:"PUT"}).then(function(e){return e.json()})}catch(t){console.log("error updating restaurant backend data...",t,e)}}static updateRestaurantInDB(e){return o.then(function(t){let n=t.transaction("restaurants","readwrite");return n.objectStore("restaurants").put(e),n.complete}).then(function(){return Promise.resolve(e)})}static toggleFavBtn(e){return o.then(t=>{return t.transaction("restaurants").objectStore("restaurants").get(e)}).then(e=>{console.log(e);const t=Object.assign({},e);return t.is_favorite="true"===e.is_favorite||!0===e.is_favorite?"false":"true",a.syncRestaurant(t),a.updateRestaurantInDB(t)}).then(e=>{const t=document.getElementById(`fav-btn-${e.id}`);"true"===e.is_favorite||!0===e.is_favorite?(t.innerHTML="Favorited!",t.style.background="hotpink"):(t.innerHTML="Add to favorite",t.style.background="grey")})}}window.DBHelper=a},function(e,t,n){n(1),e.exports=n(3)},function(e,t){var n;document.addEventListener("DOMContentLoaded",e=>{i(),r(),a()});const r=()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,o())})},o=(e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");t.addEventListener("change",c),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},a=()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,s())})},s=(e=self.cuisines)=>{const t=document.getElementById("cuisines-select");t.addEventListener("change",c),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})},i=()=>{n=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),self.newMap=n,L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1Ijoid2VudGluIiwiYSI6ImNqaXJ0N25iZjFwdjYza3A4MGt1aHU2bjEifQ.DnNFUoN5uzw01l_XK_c7nQ",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(n),c()},c=()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,o=e[n].value,a=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(o,a,(e,t)=>{e?console.error(e):(u(t),l())})},u=e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e},l=(e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{console.log(e),t.append(d(e))}),f()},d=e=>{const t=document.createElement("li"),n=document.createElement("img"),r=document.createElement("div");n.className="restaurant-img",n.setAttribute("alt",e.name),n.src=DBHelper.imageUrlForRestaurant(e),console.log(n.src),r.append(n),t.append(r);const o=document.createElement("h1");o.innerHTML=e.name,t.append(o);const a=document.createElement("p");a.innerHTML=e.neighborhood,t.append(a);const s=document.createElement("p");s.innerHTML=e.address,t.append(s),console.log("is_favorite: ",e.is_favorite);const i=document.createElement("button");!e.is_favorite||e.is_favorite.toString();"true"===e.is_favorite||!0===e.is_favorite?(i.innerHTML="Favorited!",i.style.background="hotpink"):(i.innerHTML="Add to favorite",i.style.background="grey"),i.setAttribute("title",`toggle favorites for: ${e.name}`),i.setAttribute("id",`fav-btn-${e.id}`),i.setAttribute("data-restaurant-id",e.id),i.addEventListener("click",()=>{console.log("clicked favbtn"),DBHelper.toggleFavBtn(e.id)}),t.append(i);const c=document.createElement("button");return c.classList="button button--success",c.innerHTML="View Details",c.setAttribute("aria-label",e.name+e.neighborhood+e.address+"View Details"),c.onclick=(()=>{const t=DBHelper.urlForRestaurant(e);window.location=t}),t.append(c),t},f=(e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,n);t.on("click",function(){window.location.href=t.options.url}),self.markers.push(t)})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,