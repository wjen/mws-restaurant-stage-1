!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=10)}([function(n,e,t){"use strict";t.d(e,"a",function(){return i});var r=t(1);const o=Object(r.a)("rr-db",3,{upgrade(n,e){switch(e){case 0:n.createObjectStore("restaurants",{keyPath:"id"}).createIndex("id","id");case 1:n.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id");case 2:n.createObjectStore("pending",{keyPath:"id",autoIncrement:!0})}}});class i{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get DATABASE_REVIEWS_URL(){return"http://localhost:1337/reviews"}static fetchRestaurants(n){fetch(i.DATABASE_URL).then(function(e){e.json().then(function(e){n(null,e)})})}static fetchReviews(n,e){let t=i.DATABASE_REVIEWS_URL+"/?restaurant_id="+n;fetch(t).then(n=>n.json()).then(n=>{e(null,n)}).catch(n=>{e(n,null)})}static fetchRestaurantById(n,e){i.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.find(e=>e.id==n);t?e(null,t):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(n,e){i.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.filter(e=>e.cuisine_type==n);e(null,t)}})}static fetchRestaurantByNeighborhood(n,e){i.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.filter(e=>e.neighborhood==n);e(null,t)}})}static fetchRestaurantByCuisineAndNeighborhood(n,e,t){i.fetchRestaurants((r,o)=>{if(r)t(r,null);else{let r=o;"all"!=n&&(r=r.filter(e=>e.cuisine_type==n)),"all"!=e&&(r=r.filter(n=>n.neighborhood==e)),t(null,r)}})}static fetchNeighborhoods(n){i.fetchRestaurants((e,t)=>{if(e)n(e,null);else{const e=t.map((n,e)=>t[e].neighborhood),r=e.filter((n,t)=>e.indexOf(n)==t);n(null,r)}})}static fetchCuisines(n){i.fetchRestaurants((e,t)=>{if(e)n(e,null);else{const e=t.map((n,e)=>t[e].cuisine_type),r=e.filter((n,t)=>e.indexOf(n)==t);n(null,r)}})}static urlForRestaurant(n){return`./restaurant.html?id=${n.id}`}static imageUrlForRestaurant(n){return n.photograph?`/img/${n.photograph}.jpg`:`/img/${n.id}.jpg`}static mapMarkerForRestaurant(n,e){const t=new L.marker([n.latlng.lat,n.latlng.lng],{title:n.name,alt:n.name,url:i.urlForRestaurant(n)});return t.addTo(newMap),t}static updateCachedRestaurantReview(n){return console.log("updating cache for new review",n),o.then(e=>{const t=e.transaction("reviews","readwrite"),r=t.objectStore("reviews");return console.log("putting review in store"),r.put(n),console.log("successfully put review in store"),t.done})}static saveNewReview(n){const e=i.DATABASE_REVIEWS_URL;return i.updateCachedRestaurantReview(n),i.addPendingRequestToQue(e,"POST",n).then(n=>n)}static addPendingRequestToQue(n,e,t){return new Promise((r,a)=>{o.then(r=>{r.transaction("pending","readwrite").objectStore("pending").put({data:{url:n,method:e,formData:t}})}).catch(n=>{console.log(n)}).then(i.nextPending((n,e)=>(console.log(e),r(e))))})}static nextPending(n){i.attemptCommitPending(i.nextPending).then(e=>{console.log(e),n(null,e)})}static attemptCommitPending(n){let e,t,r;return new Promise((i,a)=>{o.then(o=>{if(!o.objectStoreNames.length)return console.log("DB not available"),void o.close();o.transaction("pending","readwrite").objectStore("pending").openCursor().then(a=>{if(!a)return;a.value;if(e=a.value.data.url,t=a.value.data.method,r=a.value.data.formData,!e||!t||"POST"===t&&!r)return void a.delete().then(n());const s={body:JSON.stringify(r),method:t};fetch(e,s).then(n=>n.ok||n.redirected?n.json():(console.log("this is the response and we are offline"),void console.log(n))).then(e=>{o.transaction("pending","readwrite").objectStore("pending").openCursor().then(t=>{t.delete().then(()=>(n(),console.log(e),i(e)))}),console.log("deleted item from pending store")}).catch(n=>{console.log(n)})})})})}static syncRestaurant(n){try{let e=`http://localhost:1337/restaurants/${n.id}/?is_favorite=${n.is_favorite}`;return fetch(e,{method:"PUT"}).then(function(n){return n.json()})}catch(e){console.log("error updating restaurant backend data...",e,n)}}static updateRestaurantInDB(n){return o.then(function(e){let t=e.transaction("restaurants","readwrite");return t.objectStore("restaurants").put(n),t.complete}).then(function(){return Promise.resolve(n)})}static toggleFavBtn(n){return o.then(e=>{return e.transaction("restaurants").objectStore("restaurants").get(n)}).then(n=>{console.log(n);const e=Object.assign({},n);return e.is_favorite="true"===n.is_favorite||!0===n.is_favorite?"false":"true",i.syncRestaurant(e),i.updateRestaurantInDB(e)}).then(n=>{const e=document.getElementById(`fav-btn-${n.id}`);"true"===n.is_favorite||!0===n.is_favorite?(e.innerHTML="Favorited!",e.style.background="hotpink"):(e.innerHTML="Add to favorite",e.style.background="grey")})}}},function(n,e,t){"use strict";const r=(n,e)=>e.some(e=>n instanceof e);let o,i;const a=new WeakMap,s=new WeakMap,c=new WeakMap,l=new WeakMap,d=new WeakMap;let u={get(n,e,t){if(n instanceof IDBTransaction){if("done"===e)return s.get(n);if("objectStoreNames"===e)return n.objectStoreNames||c.get(n);if("store"===e)return t.objectStoreNames[1]?void 0:t.objectStore(t.objectStoreNames[0])}return h(n[e])},has:(n,e)=>n instanceof IDBTransaction&&("done"===e||"store"===e)||e in n};function f(n){return n===IDBDatabase.prototype.transaction&&"objectStoreNames"in IDBTransaction.prototype?function(e,...t){const r=n.call(m(this),e,...t);return c.set(r,e.sort?e.sort():[e]),h(r)}:(i||(i=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(n)?function(...e){return n.apply(m(this),e),h(a.get(this))}:function(...e){return h(n.apply(m(this),e))}}function p(n){return"function"==typeof n?f(n):(n instanceof IDBTransaction&&function(n){if(s.has(n))return;const e=new Promise((e,t)=>{const r=()=>{n.removeEventListener("complete",o),n.removeEventListener("error",i),n.removeEventListener("abort",i)},o=()=>{e(),r()},i=()=>{t(n.error),r()};n.addEventListener("complete",o),n.addEventListener("error",i),n.addEventListener("abort",i)});s.set(n,e)}(n),r(n,o||(o=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(n,u):n)}function h(n){if(n instanceof IDBRequest)return function(n){const e=new Promise((e,t)=>{const r=()=>{n.removeEventListener("success",o),n.removeEventListener("error",i)},o=()=>{e(h(n.result)),r()},i=()=>{t(n.error),r()};n.addEventListener("success",o),n.addEventListener("error",i)});return e.then(e=>{e instanceof IDBCursor&&a.set(e,n)}),d.set(e,n),e}(n);if(l.has(n))return l.get(n);const e=p(n);return e!==n&&(l.set(n,e),d.set(e,n)),e}const m=n=>d.get(n);function g(n,e,{blocked:t,upgrade:r,blocking:o}={}){const i=indexedDB.open(n,e),a=h(i);return r&&i.addEventListener("upgradeneeded",n=>{r(h(i.result),n.oldVersion,n.newVersion,h(i.transaction))}),t&&i.addEventListener("blocked",()=>t()),o&&a.then(n=>n.addEventListener("versionchange",o)),a}t.d(e,"a",function(){return g});const b=["get","getKey","getAll","getAllKeys","count"],v=["put","add","delete","clear"],x=new Map;function w(n,e){if(!(n instanceof IDBDatabase)||e in n||"string"!=typeof e)return;if(x.get(e))return x.get(e);const t=e.replace(/FromIndex$/,""),r=e!==t;if(!(t in(r?IDBIndex:IDBObjectStore).prototype))return;let o;return b.includes(t)&&(o=function(n,...e){let o=this.transaction(n).store;return r&&(o=o.index(e.shift())),o[t](...e)}),v.includes(t)&&(o=function(n,...e){const r=this.transaction(n,"readwrite");return r.store[t](...e),r.done}),o&&x.set(e,o),o}u=(n=>({get:(e,t,r)=>w(e,t)||n.get(e,t,r),has:(e,t)=>!!w(e,t)||n.has(e,t)}))(u)},function(n,e,t){var r=t(3);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(5)(r,o);r.locals&&(n.exports=r.locals)},function(n,e,t){(n.exports=t(4)(!1)).push([n.i,'@charset "utf-8";\n/* CSS Document */\n* {\n  box-sizing: border-box;\n  margin:0;\n  padding:0;\n}\n\n/* Define base font-size here; most elements will inherit this. */\nhtml{\n    font-size:1em;      /* Assuming 16px... */\n    line-height:1.5;\n    font-family: Arial, Helvetica, sans-serif;\n    color: #333;\n}\n\nbody,td,th,p{\n\tfont-family: Arial, Helvetica, sans-serif;\n\tfont-size: 1em;\n\tcolor: #333;\n\tline-height: 1.5;\n}\nbody {\n  max-width: 1100px;\n\tbackground-color: #fdfdfd;\n\tmargin: 0 auto;\n\tposition:relative;\n}\n\nmain, section {\n  width: 100%;\n}\nul, li {\n\tfont-family: Arial, Helvetica, sans-serif;\n\tfont-size: 10pt;\n\tcolor: #333;\n}\na {\n\tcolor: orange;\n\ttext-decoration: none;\n}\na:hover, a:focus {\n\tcolor: #3397db;\n\ttext-decoration: none;\n}\na img{\n\tborder: none 0px #fff;\n}\nh1, h2, h3, h4, h5, h6 {\n  font-family: Arial, Helvetica, sans-serif;\n  margin: 0 0 20px;\n}\narticle, aside, canvas, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\n.maincontent {\n  background-color: #f3f3f3;\n  min-height: 100%;\n}\n#footer {\n  background-color: #444;\n  color: #aaa;\n  font-size: 8pt;\n  letter-spacing: 1px;\n  padding: 25px;\n  text-align: center;\n  text-transform: uppercase;\n}\n\n.navigation h1 a:hover, .navigation h1 a:focus, a:focus, a:hover, button:hover,\nbutton:focus {\n  color:rgba(85,172,238 ,1);\n  text-decoration: underline;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14),\n              0 3px 1px -2px rgba(0, 0, 0, .2),\n              0 1px 5px 0 rgba(0, 0, 0, .12);\n}\n#restaurants-list li button:hover, #restaurants-list li .button:focus,\n.filter-options select:hover, .filter-options select:focus, #submit-form-btn:hover, #submit-form-btn:focus {\n  background-color:rgba(85,172,238 ,1);\n  color: #fff;\n  text-decoration: underline;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14),\n              0 3px 1px -2px rgba(0, 0, 0, .2),\n              0 1px 5px 0 rgba(0, 0, 0, .12);\n}\n\n/* ====================== Navigation ====================== */\nheader {\n    width: 100%;\n    background: #333;\n}\nul {\n  padding: 0;\n  list-style: none;\n}\n.navigation {\n  display:flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 10px;\n  color: rgba(117,117,117 ,1);\n}\n.navigation h1 {\n text-align: center;\n font-size: 1em;\n margin-bottom: 0;\n}\n\n.navigation li {\n  height: 100%;\n}\n\n.navigation .navigation__title {\n flex-grow: 1;\n}\n.navigation img {\n  width: 48px;\n  height: 48px;\n  background-color: white;\n}\n.navigation h1 a {\n  color: #fff;\n  font-size: 48px;\n  font-weight: 200;\n  letter-spacing: 10px;\n  margin: 10px auto;\n  font-family: \'Pacifico\', cursive;\n}\n#breadcrumb {\n    padding: 10px;\n    list-style: none;\n    background-color: #eee;\n    font-size: 17px;\n    margin: 0;\n    width: 100%;\n}\n\n/* Display list items side by side */\n#breadcrumb li {\n    display: inline;\n}\n\n/* Add a slash symbol (/) before/behind each list item */\n#breadcrumb li+li:before {\n    padding: 8px;\n    color: black;\n    content: "/\\00a0";\n}\n\n/* Add a color to all links inside the list */\n#breadcrumb li a {\n    color: #0275d8;\n    text-decoration: none;\n}\n\n/* Add a color on mouse-over */\n#breadcrumb li a:hover {\n    color: #01447e;\n    text-decoration: underline;\n}\n/* ====================== Map ====================== */\n#map {\n  height: 400px;\n  width: 100%;\n  background-color: #ccc;\n}\n/* ====================== Restaurant Filtering ====================== */\n.filter-options {\n  width: 100%;\n  background-color: #333;\n  align-items: center;\n}\n.filter-options h2 {\n  color: white;\n  font-size: 1rem;\n  font-weight: normal;\n  line-height: 1;\n  margin: 0 10px;\n  padding-top: 10px;\n}\n.filter-options select {\n  background-color: white;\n  border: 1px solid #fff;\n  font-family: Arial,sans-serif;\n  font-size: 11pt;\n  height: 35px;\n  letter-spacing: 0;\n  margin: 10px;\n  padding: 10px;\n  width: 200px;\n}\n.filter-label {\n  display: none;\n}\n\n.filter-section {\n  width: 100%;\n}\n\n/* ====================== Restaurant Listing ====================== */\n\n/*========\n===Flexbox on list and content\n========*/\n\n#restaurants-list {\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  background-color: #f3f3f3;\n  list-style: outside none none;\n  margin: 0;\n  padding: 30px 15px 60px;\n  text-align: center;\n}\n#restaurants-list li {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  flex-grow: 1;\n  background-color: #fff;\n  border: 2px solid #ccc;\n  font-family: Arial,sans-serif;\n  margin: 15px;\n  min-height: 380px;\n  padding: 0 30px 25px;\n  text-align: left;\n  width: 100%;\n}\n#restaurants-list .restaurant-img {\n  background-color: #ccc;\n  display: block;\n  margin: 0;\n  max-width: 100%;\n  max-height: 300px;\n  min-width: 100%;\n}\n#restaurants-list li h1 {\n  color: #f18200;\n  font-family: Arial,sans-serif;\n  font-size: 14pt;\n  font-weight: 200;\n  letter-spacing: 0;\n  line-height: 1.3;\n  margin: 20px 0 10px;\n  text-transform: uppercase;\n\n}\n#restaurants-list p {\n  margin: 0;\n  font-size: 11pt;\n}\n#restaurants-list li button {\n  background-color: orange;\n  border-bottom: 3px solid #eee;\n  color: #fff;\n  display: inline-block;\n  font-size: 10pt;\n  margin: 15px 0 0;\n  padding: 8px 30px 10px;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n}\n\n\n/* ====================== Restaurant Details ====================== */\n.inside header {\n  /*position: fixed;*/\n  /*top: 0;*/\n  width: 100%;\n  /*z-index: 1000;*/\n}\n.inside #map-container {\n  /*background: blue none repeat scroll 0 0;*/\n  height: 200px;\n  padding-bottom: 10px;\n}\n.inside #map {\n  background-color: #ccc;\n  height: 100%;\n  width: 100%;\n}\n.inside #footer {\n/*  bottom: 0;\n  position: absolute;*/\n  width: 100%;\n}\n#restaurant-name {\n  color: #f18200;\n  font-family: Arial,sans-serif;\n  font-size: 24pt;\n  font-weight: 200;\n  letter-spacing: 0;\n  margin: 10px auto;\n  text-transform: uppercase;\n  line-height: 1.1;\n}\n#restaurant-img {\n\twidth: 100%;\n  max-height: 80vh;\n}\n#restaurant-address {\n  font-size: 1.3em;\n  margin: 10px 0px;\n  width: 50%;\n}\n#restaurant-cuisine {\n  background-color: #333;\n  color: #ddd;\n  font-size: 1.2em;\n  font-weight: 300;\n  letter-spacing: 10px;\n  margin: 0 0 20px;\n  padding: 2px 0;\n  text-align: center;\n  text-transform: uppercase;\n\twidth: 100%;\n}\n#restaurant-container, #reviews-container, #reviews-form-container{\n  border-bottom: 1px solid #d9d9d9;\n  border-top: 1px solid #fff;\n  padding: 20px;\n  width: 100%;\n  display:flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n#reviews-container, #reviews-form-container {\n  padding: 30px 40px 40px;\n}\n#reviews-container h2, #reviews-form-container h2 {\n  color: #f58500;\n  font-size: 24pt;\n  font-weight: 300;\n  letter-spacing: -1px;\n  padding-bottom: 1pt;\n  margin: 0 auto;\n}\n#reviews-list {\n  margin: 0;\n  padding: 0;\n}\n#reviews-list li {\n  background-color: #fff;\n  border: 2px solid #f3f3f3;\n  display: block;\n  list-style-type: none;\n  margin: 0 0 30px;\n  overflow: hidden;\n  padding: 10px 20px 20px;\n  /*position: relative;*/\n  width: 100%;\n}\n#reviews-list li p {\n  margin: 0 0 10px;\n}\n#restaurant-hours {\n  width: 50%;\n}\n#restaurant-hours td {\n  color: #666;\n  font-size: 1em;\n}\n\n#create-edit-review-form {\n  width: 100%;\n}\n#create-edit-review-form label {\n  display: block;\n  margin: 0 auto;\n  text-align: center;\n  font-size: 1rem;\n}\n\n#create-edit-review-form input, #create-edit-review-form textarea {\n  display: block;\n  margin: 0 auto;\n  border: 1px solid gray;\n  padding: 5px;\n  width: 50%;\n}\n\n.submit-form-button {\n    display:block;\n    color: white;\n    background: orange;\n    padding: 10px;\n    width: 20%;\n    margin: 10px;\n    text-align: center;\n}\n\n/*//////////\n// Media Queries\n//////////*/\n\n@media screen and (min-width: 1000px) {\n  #restaurants-list li {\n    max-width: 30%;\n  }\n}\n@media screen and (max-width: 999px) and (min-width: 671px) {\n  #restaurants-list li {\n    min-width: 290px;\n    width: 45%;\n    max-width: 45%;\n  }\n}\n\n@media screen and (max-width: 670px) {\n  header {\n    /*min-height: 50px;*/\n  }\n  #restaurants-list li {\n    max-width: 80%;\n    margin: 8px auto;\n  }\n  .navigation h1 a{\n    font-size: 2.6em;\n  }\n  .navigation img {\n    width: 30px;\n    height: 30px;\n  }\n}\n\n@media screen and (max-width: 540px) {\n\n  .navigation h1 a{\n    font-size: 1.7em;\n    display: inline-block;\n  }\n  .navigation img {\n    display: none;\n  }\n  .filter-options select {\n    width: 50%);\n  }\n  #restaurant-container h1, #reviews-container h2 {\n    font-size: 1.5em;\n  }\n  #restaurant-img {\n    width: 100%;\n    height: 400px;\n  }\n  #restaurant-address {\n    width: 100%;\n  }\n  #restaurant-hours {\n    width: 100%;\n  }\n  #restaurant-hours td {\n    font-size: 1em;\n  }\n  #restaurant-cuisine {\n    font-size: 1em;\n  }\n}\n@media screen and (max-width: 450px) {\n  .filter-options select {\n    width: calc(100% - 24px);\n    margin: 10px;\n  }\n  #reviews-container {\n    padding: 0;\n  }\n}\n',""])},function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[t].concat(i).concat([o]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];null!=a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(n){var e={};return function(n,t){if("function"==typeof n)return n();if(void 0===e[n]){var r=function(n,e){return e?e.querySelector(n):document.querySelector(n)}.call(this,n,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}}(),c=null,l=0,d=[],u=t(6);function f(n,e){for(var t=0;t<n.length;t++){var r=n[t],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function p(n,e){for(var t=[],r={},o=0;o<n.length;o++){var i=n[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):t.push(r[a]={id:a,parts:[s]})}return t}function h(n,e){var t=s(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=d[d.length-1];if("top"===n.insertAt)r?r.nextSibling?t.insertBefore(e,r.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),d.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(n.insertAt.before,t);t.insertBefore(e,o)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=d.indexOf(n);e>=0&&d.splice(e,1)}function g(n){var e=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var r=function(){0;return t.nc}();r&&(n.attrs.nonce=r)}return b(e,n.attrs),h(n,e),e}function b(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function v(n,e){var t,r,o,i;if(e.transform&&n.css){if(!(i="function"==typeof e.transform?e.transform(n.css):e.transform.default(n.css)))return function(){};n.css=i}if(e.singleton){var a=l++;t=c||(c=g(e)),r=y.bind(null,t,a,!1),o=y.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",b(e,n.attrs),h(n,e),e}(e),r=function(n,e,t){var r=t.css,o=t.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,e),o=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=g(e),r=function(n,e){var t=e.css,r=e.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){m(t)});return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=p(n,e);return f(t,e),function(n){for(var r=[],o=0;o<t.length;o++){var a=t[o];(s=i[a.id]).refs--,r.push(s)}n&&f(p(n,e),e);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var x,w=(x=[],function(n,e){return x[n]=e,x.filter(Boolean).join("\n")});function y(n,e,t,r){var o=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=w(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,r=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var o,i=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,e,t){"use strict";"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/serviceworker.bundle.js").then(n=>{console.log("SW registered: ",n),console.log("HELLO FROM REGISTRATION JS")}).catch(n=>{console.log("SW registration failed: ",n)})})},,,function(n,e,t){n.exports=t(11)},function(n,e,t){"use strict";t.r(e);t(2),t(7);var r=t(0);let o;var i;document.addEventListener("DOMContentLoaded",n=>{a(),(o=document.getElementById("submit-form-btn")).addEventListener("click",h)});const a=()=>{s((n,e)=>{n?console.error(n):(i=L.map("map",{center:[e.latlng.lat,e.latlng.lng],zoom:16,scrollWheelZoom:!1}),self.newMap=i,L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1Ijoid2VudGluIiwiYSI6ImNqaXJ0N25iZjFwdjYza3A4MGt1aHU2bjEifQ.DnNFUoN5uzw01l_XK_c7nQ",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(i),f(),r.a.mapMarkerForRestaurant(self.restaurant,self.newMap))}),r.a.nextPending()},s=n=>{if(self.restaurant)return n(null,self.restaurant),void console.log("self restaurant already fetched");const e=p("id");e?r.a.fetchRestaurantById(e,(e,t)=>{self.restaurant=t,t?(c(),n(null,t)):console.error(e)}):(error="No restaurant id in URL",n(error,null))},c=(n=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=n.name,document.getElementById("restaurant-address").innerHTML=` ${n.name} <br> ${n.address}`;const e=document.getElementById("restaurant-img");e.className="restaurant-img",e.src=r.a.imageUrlForRestaurant(n),document.getElementById("restaurant-cuisine").innerHTML=n.cuisine_type,n.operating_hours&&l(),r.a.fetchReviews(n.id,(n,e)=>{d(e)})},l=(n=self.restaurant.operating_hours)=>{const e=document.getElementById("restaurant-hours");for(let t in n){const r=document.createElement("tr"),o=document.createElement("td");o.innerHTML=t,r.appendChild(o);const i=document.createElement("td");i.innerHTML=n[t],r.appendChild(i),e.appendChild(r)}},d=(n=self.restaurant.reviews)=>{const e=document.getElementById("reviews-container"),t=document.createElement("h2");if(t.innerHTML="Reviews",e.appendChild(t),!n){const n=document.createElement("p");return n.innerHTML="No reviews yet!",void e.appendChild(n)}const r=document.getElementById("reviews-list");n.forEach(n=>{r.appendChild(u(n))}),e.appendChild(r)},u=n=>{const e=document.createElement("li");e.setAttribute("id",`review-li-${n.id}`);const t=document.createElement("p");t.innerHTML=n.name,e.appendChild(t);const r=document.createElement("p");r.innerHTML="<strong>Created:</strong> "+new Date(n.createdAt).toDateString(),e.appendChild(r);const o=document.createElement("p");o.innerHTML=`Rating: ${n.rating}`,e.appendChild(o);const i=document.createElement("p");return i.innerHTML=n.comments,e.appendChild(i),e},f=(n=self.restaurant)=>{const e=document.getElementById("breadcrumb"),t=document.createElement("li");t.innerHTML=n.name,e.appendChild(t)},p=(n,e)=>{e||(e=window.location.href),n=n.replace(/[\[\]]/g,"\\$&");const t=new RegExp(`[?&]${n}(=([^&#]*)|&|#|$)`).exec(e);return t?t[2]?decodeURIComponent(t[2].replace(/\+/g," ")):"":null},h=()=>{console.log("submit review function");let n=m();/[a-zA-Z]{2,}$/gi.test(n.name)?/[1-5]{1}$/gi.test(n.rating)?n.comments.length<3?alert("comments input must be minimum of 3 characters"):(n.restaurant_id=self.restaurant.id,r.a.saveNewReview(n).then(n=>{console.log(n);alert("Created Review");let e=u(n);document.getElementById("reviews-list").appendChild(e);var t=document.getElementById(`review-li-${n.id}`);t.scrollIntoView&&t.scrollIntoView.constructor===Function&&t.scrollIntoView(!0)})):alert("rating input must be a number, 1-5"):alert("name input must be letters only, minimum of 2 characters")},m=()=>({name:document.getElementById("name").value.trim(),rating:document.getElementById("rating").value.trim(),comments:document.getElementById("review-field").value.trim()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,